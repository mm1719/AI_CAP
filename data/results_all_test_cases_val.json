[
    [
        [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "def remove_Occ(string,char): \r\n    first_index = string.find(char) \r\n    last_index = len(string) - string[::-1].find(char) - 1\r\n    string = string.replace(string[first_index],'').replace(string[last_index],'') \r\n    return string"
    ],
    [
        [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "def sort_matrix(test_list):\r\n  res = sorted(test_list, key = sum)\r\n  return (res)"
    ],
    [
        [
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "from collections import Counter \r\ndef count_common(list):\r\n  temp = Counter(list)\r\n  result = temp.most_common(4)\r\n  return result"
    ],
    [
        [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "def find_Volume(b,h,d):\r\n  volume = (b * h * d) / 2\r\n  return volume"
    ],
    [
        [
            "assert split_lowerstring(\"AbCd\")==['bC','d']",
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "import re\r\ndef split_lowerstring(lowerstring):\r\n lowerstring=re.sub('([a-z])([A-Z])', '\\\\1,\\\\2',lowerstring)\r\n return lowerstring.split(',')"
    ],
    [
        [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "import re\r\ndef text_lowercase_underscore(text):\r\n        patterns = '[a-z]+(_[a-z]+)*$'\r\n        if re.search(patterns, text):\r\n                return ('Found a match!')\r\n        else:\r\n                return ('No match found!')"
    ],
    [
        [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "def square_perimeter(a):\r\n  perimeter=4*a\r\n  return perimeter"
    ],
    [
        [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "def remove_dirty_chars(s1, s2):\r\n    result = ''\r\n    for ch in s1:\r\n        if ch not in s2:\r\n            result += ch\r\n    return result"
    ],
    [
        [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "def test_duplicate(array):\r\n  if len(array) == len(set(array)):\r\n    return True\r\n  else:\r\n    return False"
    ],
    [
        [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "def is_woodball(n):\r\n    if n%10==3 and n%100//10==3:\r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert multiples_of_num(4,3)== [3,6,9,12]",
            "assert multiples_of_num(2,5)== [5,10]",
            "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "def multiples_of_num(n,m):\r\n    return [n * i for i in range(1,m+1)]"
    ],
    [
        [
            "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
            "assert find_first_duplicate([1, 2, 3, 4])==-1",
            "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "def find_first_duplicate(arr):\r\n    seen = set()\r\n    for x in arr:\r\n        if x in seen:\r\n            return x\r\n        seen.add(x)\r\n    return -1"
    ],
    [
        [
            "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
            "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
            "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "def maximum_Sum(lists):\r\n    max_sum = 0\r\n    for l in lists:\r\n        max_sum = max_sum + max(l)\r\n    return max_sum"
    ],
    [
        [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
        ],
        "def binary_to_decimal(binary):\r\n    decimal = 0\r\n    i = 0\r\n    while(binary > 0):\r\n        decimal = decimal + (binary % 10) * pow(2, i)\r\n        i += 1\r\n        binary = binary // 10\r\n    return decimal"
    ],
    [
        [
            "assert find_Product([1,1,2,3],4) == 6",
            "assert find_Product([1,2,3,1,1],5) == 6",
            "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "def find_Product(arr,n): \r\n    temp = [0 for i in range(n)] \r\n    temp[n - 1] = arr[n - 1] \r\n    for i in range(n - 2, -1, -1): \r\n        temp[i] = arr[i] * temp[i + 1] \r\n    minimum = temp[0]  \r\n    for i in range(1, n): \r\n        if temp[i] < minimum: \r\n            minimum = temp[i] \r\n    return minimum"
    ],
    [
        [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
            "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
            "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "def check_k_elements(test_list, K):\r\n  res = all(K in tup for tup in test_list)\r\n  return (res)"
    ],
    [
        [
            "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
            "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
            "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "def remove_digits(list1):\r\n    result = [s for s in list1 if not any(c.isdigit() for c in s)]\r\n    return result"
    ],
    [
        [
            "assert binomial_Coeff(5,2) == 10",
            "assert binomial_Coeff(4,3) == 4",
            "assert binomial_Coeff(3,2) == 3"
        ],
        "def binomial_Coeff(n,k): \r\n    if (k == 0 or k == n): \r\n        return 1\r\n    return binomial_Coeff(n - 1, k - 1) + binomial_Coeff(n - 1, k)"
    ],
    [
        [
            "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
            "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
            "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "def get_Odd_Occurrence(arr,n): \r\n    for i in range(0,n): \r\n        count = 0\r\n        for j in range(0,n): \r\n            if arr[i] == arr[j]: \r\n                count += 1\r\n        if (count % 2 != 0): \r\n            return arr[i] \r\n    return -1"
    ],
    [
        [
            "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
            "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
            "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "def count_Substring_With_Equal_Ends(s):\r\n    cnt = 0\r\n    for i in range(len(s)):\r\n        for j in range(i + 1, len(s)):\r\n            if s[i] == s[j]:\r\n                cnt += 1\r\n    return cnt"
    ],
    [
        [
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
        ],
        "def get_frequently_seen_elements(input_list, K):\r\n   freq_dict = {}\r\n   for l in input_list:\r\n      for x in l:\r\n         if x not in freq_dict:\r\n            freq_dict[x] = 1\r\n         else:\r\n            freq_dict[x] += 1\r\n   import heapq\r\n   heap = [(-value, key) for key, value in freq_dict.items()]\r\n   heapq.heapify(heap)\r\n   return [heapq.heappop(heap)[1] for i in range(K)]"
    ],
    [
        [
            "assert max_Prime_Factors(15) == 5",
            "assert max_Prime_Factors(6) == 3",
            "assert max_Prime_Factors(2) == 2"
        ],
        "def max_Prime_Factors(n): \r\n    i = 2\r\n    while i * i <= n: \r\n        if (n % i == 0): \r\n            n = n // i \r\n        else: \r\n            i += 1\r\n    return n"
    ],
    [
        [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
        ],
        "def decimal_To_Binary(n): \r\n    if (n == 0): \r\n        return 0\r\n    return (n % 2) + decimal_To_Binary(int(n / 2))"
    ],
    [
        [
            "assert find_missing([1,2,3,5],4) == 4",
            "assert find_missing([1,3,4,5],4) == 2",
            "assert find_missing([1,2,3,5,6,7],5) == 4"
        ],
        "def find_missing(arr,n): \r\n    for i in range(0,n): \r\n        if arr[i] != i + 1: \r\n            return i + 1\r\n    return n + 1"
    ],
    [
        [
            "assert find_rect_num(4) == 20",
            "assert find_rect_num(5) == 30",
            "assert find_rect_num(6) == 42"
        ],
        "def find_rect_num(n): \r\n    if (n == 0): \r\n        return 0\r\n    fac = [0 for i in range(n + 1)] \r\n    fac[0] = 1\r\n    for i in range(1, n + 1): \r\n        fac[i] = fac[i - 1] + i \r\n    return fac[n]"
    ],
    [
        [
            "assert find_Nth_Digit(1,2,1) == 5",
            "assert find_Nth_Digit(3,5,1) == 6",
            "assert find_Nth_Digit(5,6,5) == 3"
        ],
        "def find_Nth_Digit(A,B,N) : \r\n    x = A / (B + 10) \r\n    y = min(int(x),18) \r\n    return int(str(y)[N - 1])"
    ],
    [
        [
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        ],
        "def sort_mixed_list(mixed_list): \r\n    result = [i for i in mixed_list if not isinstance(i, int)] + [j for j in mixed_list if isinstance(j, int)] \r\n    return result"
    ],
    [
        [
            "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert div_even_odd([1,5,7,9,10])==10"
        ],
        "def div_even_odd(list1):\r\n    first_even = next((el for el in list1 if el%2==0),-1)\r\n    first_odd = next((el for el in list1 if el%2!=0),-1)\r\n    return (first_even/first_odd)"
    ],
    [
        [
            "assert rearange_string(\"aab\")==('aba')",
            "assert rearange_string(\"aabb\")==('abab')",
            "assert rearange_string(\"abccdd\")==('cdabcd')"
        ],
        "def rearange_string(str1):\r\n    str1 = sorted(str1)\r\n    count = 1\r\n    res = ''\r\n    for i in range(len(str1)-1):\r\n        if str1[i] != str1[i+1]:\r\n            res += str1[i]\r\n            count += 1\r\n    res += str1[i]+str1[i+1]\r\n    if count%2==0:\r\n        return (res)"
    ],
    [
        [
            "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
            "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
            "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
        ],
        "from collections import Counter \r\ndef freq_element(lists):\r\n  freq = Counter(list(itertools.chain(*lists))) \r\n  return (freq)"
    ],
    [
        [
            "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
            "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
            "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
        ],
        "def filter_evennumbers(list1):\r\n  result = list(filter(lambda x: (x%2 == 0), list1))\r\n  return result"
    ],
    [
        [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
            "assert find_Sum([1,2,3,1,1],5) == 3",
            "assert find_Sum([1,1,2],3) == 2"
        ],
        "def find_Sum(arr,n): \r\n    arr.sort() \r\n    sum = arr[0] \r\n    for i in range(0,n-1): \r\n        if (arr[i] == arr[i+1]): \r\n            sum = sum + arr[i] \r\n        else: \r\n            continue\r\n    return sum"
    ],
    [
        [
            "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
            "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
            "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
        ],
        "import re\r\ndef text_match(text):\r\n  patterns = '[a-z]+_[a-z]+'\r\n  if re.search(patterns,  text):\r\n    return 'Found a match!'\r\n  else:\r\n    return('No match found')"
    ],
    [
        [
            "assert text_match_string(\" python\")==('Not matched!')",
            "assert text_match_string(\"python\")==('Found a match!')",
            "assert text_match_string(\"  lang\")==('Not matched!')"
        ],
        "import re\r\ndef text_match_string(text):\r\n  patterns = r\"^\\w+\"\r\n  if re.search(patterns,  text):\r\n    return ('Matched!')\r\n  else:\r\n    return ('Not matched!')"
    ],
    [
        [
            "assert get_gcd([2, 4, 6, 8, 16]) == 2",
            "assert get_gcd([1, 2, 3]) == 1",
            "assert get_gcd([2, 4, 6, 8]) == 2 "
        ],
        "def get_gcd(nums):\r\n    import math\r\n    n = nums[0]\r\n    for i in nums:\r\n        n = math.gcd(n, i)\r\n    return n"
    ],
    [
        [
            "assert test_distinct([1,5,7,9]) == True",
            "assert test_distinct([2,4,5,5,7,9]) == False",
            "assert test_distinct([1,2,3]) == True"
        ],
        "def test_distinct(list1):\r\n    set1 = set(list1)\r\n    if len(set1) == len(list1):\r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert compute_Last_Digit(2,4) == 2",
            "assert compute_Last_Digit(6,8) == 6",
            "assert compute_Last_Digit(1,2) == 2"
        ],
        "def compute_Last_Digit(a,b): \r\n    if (a == 0 or b == 0): \r\n        return 0; \r\n    if (a == b): \r\n        return a; \r\n    if (a > b): \r\n        return compute_Last_Digit(a-b,b); \r\n    if (b % 2 == 0): \r\n        return compute_Last_Digit((b/2),a); \r\n    return compute_Last_Digit(((b+1)/2),a);"
    ],
    [
        [
            "assert odd_bit_set_number(10) == 15",
            "assert odd_bit_set_number(20) == 21",
            "assert odd_bit_set_number(30) == 31"
        ],
        "def set_all_odd_bits(n): \r\n    n |= n >> 1; \r\n    n |= n >> 2; \r\n    n |= n >> 4; \r\n    n |= n >> 8; \r\n    n |= n >> 16;          \r\n    return (n >> 1) ^ 1\r\ndef odd_bit_set_number(n):\r\n  return (set_all_odd_bits(n))"
    ],
    [
        [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
        ],
        "def specified_element(test_list, A):\r\n  res = [sub[0] for sub in test_list if len(sub) > A]\r\n  return (res)"
    ],
    [
        [
            "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
            "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
        ],
        "def min_length_list(list1):\r\n  min_length_list = min(list1, key = len)\r\n  return (len(min_length_list), min_length_list)"
    ],
    [
        [
            "assert check_equilateral(6,8,12)==False ",
            "assert check_equilateral(6,6,12)==False",
            "assert check_equilateral(6,6,6)==True"
        ],
        "def check_equilateral(a,b,c): \r\n    if a==b==c: \r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
        ],
        "def parallelogram_area(b,h):\r\n  area=(b*h)\r\n  return area"
    ],
    [
        [
            "assert check_Equality(\"abcda\") == \"Equal\"",
            "assert check_Equality(\"ab\") == \"Not Equal\"",
            "assert check_Equality(\"mad\") == \"Not Equal\""
        ],
        "def check_Equality(str1): \r\n    if (str1[0] == str1[len(str1) - 1]): \r\n        return (\"Equal\") \r\n    else: \r\n        return (\"Not Equal\")"
    ],
    [
        [
            "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
            "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
            "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
        ],
        "def counting_sort(arr):\r\n    max_val = max(arr)\r\n    min_val = min(arr)\r\n    count = [0 for i in range(min_val,max_val+1)]\r\n    for i in arr:\r\n        count[i-min_val] += 1\r\n    arr_index = 0\r\n    for i in range(min_val, max_val+1):\r\n        while count[i-min_val] > 0:\r\n            arr[arr_index] = i\r\n            arr_index += 1\r\n            count[i-min_val] -= 1\r\n    return arr"
    ],
    [
        [
            "assert tn_gp(1,5,2)==16",
            "assert tn_gp(1,5,4)==256",
            "assert tn_gp(2,6,3)==486"
        ],
        "def tn_gp(a,n,d):\r\n  if n == 1:\r\n    return a\r\n  else:\r\n    return a * (d ** (n - 1))"
    ],
    [
        [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "def check(n): \r\n    rev = 0\r\n    while (n > 0): \r\n        dig = n % 10\r\n        n = n // 10\r\n        rev = rev * 10 + dig \r\n    if (n == 2 * rev - 1): \r\n        return True\r\n    return False"
    ],
    [
        [
            "assert find_Max_Num([1,2,3],3) == 321",
            "assert find_Max_Num([4,5,6,1],4) == 6541",
            "assert find_Max_Num([1,2,3,9],4) == 9321"
        ],
        "def find_Max_Num(nums,n): \r\n    str_nums = [str(i) for i in nums] \r\n    result = ''.join(sorted(str_nums, reverse = True)) \r\n    return result"
    ],
    [
        [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False"
        ],
        "def opposite_Signs(x,y):\r\n  if (x*y) < 0:\r\n    return True\r\n  else:\r\n    return False"
    ],
    [
        [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "def is_octagonal(n):\r\n    return int(n * (2 * n - 1))"
    ],
    [
        [
            "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
            "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
            "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
        ],
        "def max_len_sub(arr, n): \r\n\tmax_len = 1\r\n\tcurr_len = 1\r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] - arr[i - 1] == 1 or arr[i] - arr[i] == 2): \r\n\t\t\tcurr_len += 1\r\n\t\telse: \r\n\t\t\tmax_len = max(max_len, curr_len)\r\n\t\t\tcurr_len = 1\r\n\tmax_len = max(max_len, curr_len)\r\n\treturn max_len"
    ],
    [
        [
            "assert count_Substrings('112112',6) == 6",
            "assert count_Substrings('111',3) == 6",
            "assert count_Substrings('1101112',7) == 12"
        ],
        "def count_Substrings(s,n): \r\n    count = 0\r\n    for i in range(n): \r\n        sum = 0\r\n        for j in range(i,n): \r\n            sum += int(s[j]) \r\n            if (sum == j - i + 1): \r\n                count += 1\r\n    return count"
    ],
    [
        [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "def smallest_num(num):\r\n    return min(num)"
    ],
    [
        [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "def max_difference(test_list):\r\n  res = max(test_list, key = itemgetter(1))\r\n  res = max(res[0], res[1])\r\n  res = max(res for sub in test_list for res in sub)\r\n  res = max(res for res in test_list)\r\n  return (res - min(test_list, key = itemgetter(1))[1])"
    ],
    [
        [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "def subject_marks(subject_tuple):\r\n  subject_tuple.sort(key = lambda x: x[1])\r\n  return subject_tuple"
    ],
    [
        [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "def recursive_list_sum(l):\r\n    total = 0\r\n    for x in l:\r\n        if type(x) is list:\r\n            total += recursive_list_sum(x)\r\n        else:\r\n            total += x\r\n    return total"
    ],
    [
        [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "def pos_count(nums):\r\n    pos_nums = [num for num in nums if num > 0]\r\n    return len(pos_nums)"
    ],
    [
        [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "def bell_number(n): \r\n    bell = [[0 for i in range(n+1)] for j in range(n+1)] \r\n    bell[0][0] = 1\r\n    for i in range(1, n+1):\r\n        bell[i][0] = bell[i-1][i-1]\r\n        for j in range(1, i+1): \r\n            bell[i][j] = bell[i-1][j-1] + bell[i][j-1] \r\n    return bell[n][0]"
    ],
    [
        [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "def is_Monotonic(arr): \r\n    if (len(arr) == 1): \r\n        return True\r\n    if (arr[0] > arr[1]): \r\n        dir_st = 1\r\n    else: \r\n        dir_st = 0\r\n    for i in range(1, len(arr)): \r\n        if (arr[i] > arr[i - 1]): \r\n            dir_st = 1\r\n        elif (arr[i] < arr_prev): \r\n            dir_sd = 0\r\n    if (dir_st == 1 and dir_sd == 0): \r\n        return True\r\n    return False"
    ],
    [
        [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "def is_sublist(list1,list2):\r\n    return list2 in list1"
    ],
    [
        [
            "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
            "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
        ],
        "def get_equal(test_list, test_len):\r\n  res = all(len(t) == test_len for t in test_list)\r\n  if (res):\r\n    return ('All tuples have same length')\r\n  else:\r\n    return ('All tuples do not have same length')"
    ],
    [
        [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "def comb_sort(list1):\r\n    gap = len(list1)\r\n    swapped = True\r\n    while gap != 1 or swapped:\r\n        gap = int(gap / 1.3)\r\n        st = 0\r\n        swapped = False\r\n        while st < len(list1) - 1:\r\n            if list1[st] > list1[st + gap]:\r\n                list1[st], list1[st + gap] = list1[st + gap], list1[st]\r\n                swapped = True\r\n            st += 1\r\n    return list1"
    ],
    [
        [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "def dif_Square(n): \r\n    i = 1;\r\n    while (i * i <= n): \r\n        j = 1; \r\n        while (j * j <= n): \r\n            if (n == (i * i - j * j)): \r\n                return True; \r\n            j = j + 1; \r\n        i = i + 1;   \r\n    return False;"
    ],
    [
        [
            "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
            "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
            "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        ],
        "import re\r\ndef multiple_split(text):\r\n  return (re.findall(r'[\\w]+|[^\\w\\s]', text))"
    ],
    [
        [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
        ],
        "def is_samepatterns(test_list1, test_list2):\r\n  res = set(test_list2) == set(list(map(lambda ele, idx: ele[idx], test_list1, range(len(test_list1)))))\r\n  return (res)"
    ],
    [
        [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
        ],
        "def find_tuples(test_list, K):\r\n  res = [t for t in test_list if all(ele % K == 0 for ele in t)]\r\n  return (str(res))"
    ],
    [
        [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
        ],
        "def count_Squares(width,height):\r\n    return (width * height + width + height - 2) // 2"
    ],
    [
        [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "def is_Diff(n): \r\n    sum_odd = 0; \r\n    sum_even = 0; \r\n    while (n != 0): \r\n        remainder = n % 10; \r\n        if (remainder % 2 == 0): \r\n            sum_even += remainder; \r\n        else: \r\n            sum_odd += remainder; \r\n        n = int(n / 10); \r\n    if (sum_even == sum_odd): \r\n        return True; \r\n    else: \r\n        return False;"
    ],
    [
        [
            "assert count_With_Odd_SetBits(5) == 3",
            "assert count_With_Odd_SetBits(10) == 5",
            "assert count_With_Odd_SetBits(15) == 8"
        ],
        "def count_With_Odd_SetBits(n): \r\n    n += 1; \r\n    powerOf2 = 2; \r\n    cnt = n // 2; \r\n    while (powerOf2 <= n): \r\n        powerOf2 = powerOf2 << 1; \r\n        if (n % powerOf2 == 0): \r\n            cnt += n // powerOf2; \r\n    return cnt;"
    ],
    [
        [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "def word_len(s): \r\n    word_len = len(s) \r\n    if word_len%2==0: \r\n        return True\r\n    else: \r\n        return False"
    ],
    [
        [
            "assert tetrahedral_number(5) == 35.0",
            "assert tetrahedral_number(6) == 56.0",
            "assert tetrahedral_number(7) == 84.0"
        ],
        "def tetrahedral_number(n): \r\n\tif n < 0: \r\n\t\treturn 0\r\n\treturn int(n * (n + 1) * (n + 2) / 6)"
    ],
    [
        [
            "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
            "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
            "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        ],
        "def zip_tuples(test_tup1, test_tup2):\r\n  res = list(zip(test_tup1, test_tup2))\r\n  return (res)"
    ],
    [
        [
            "assert volume_sphere(10)==4188.790204786391",
            "assert volume_sphere(25)==65449.84694978735",
            "assert volume_sphere(20)==33510.32163829113"
        ],
        "import math\r\ndef volume_sphere(r):\r\n  volume = (4/3)*math.pi*r**3\r\n  return volume"
    ],
    [
        [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "def get_Char(str1):\r\n    return chr(ord('f') - sum(ord(char) for char in str1))"
    ],
    [
        [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "def sequence(n): \r\n    if (n == 1): \r\n        return 1\r\n    if (n == 2): \r\n        return 2\r\n    if (n == 3): \r\n        return 3\r\n    sequence_nums = [1, 2, 3]\r\n    for i in range(4, n + 1):\r\n        current_num = sequence_nums[i - 1] + sequence_nums[i - 2] * sequence_nums[i - 3]\r\n        sequence_nums.append(current_num)        \r\n    return sequence_nums[n]"
    ],
    [
        [
            "assert surfacearea_sphere(10)==1256.6370614359173",
            "assert surfacearea_sphere(15)==2827.4333882308138",
            "assert surfacearea_sphere(20)==5026.548245743669"
        ],
        "import math\r\ndef surfacearea_sphere(r):\r\n  surfacearea=4*math.pi*(r*r)\r\n  return surfacearea"
    ],
    [
        [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "def centered_hexagonal_number(n): \r\n\treturn n * (2*n - 1)"
    ],
    [
        [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "from collections import ChainMap\r\ndef merge_dictionaries_three(dict1,dict2,dict3):\r\n  result = dict(ChainMap(dict1, dict2, dict3))\r\n  return result"
    ],
    [
        [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
        ],
        "from collections import defaultdict \r\ndef freq_count(list1):\r\n    dict = defaultdict(int)\r\n    for i in list1:\r\n        dict[i] += 1\r\n    return dict"
    ],
    [
        [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "def closest_num(n): \r\n    i = n - 1\r\n    while (n >= i): \r\n        n = n - 1\r\n        i = n - 1\r\n    return i"
    ],
    [
        [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "def len_log(list1):\r\n    lens = []\r\n    for word in list1:\r\n        lens.append(len(word))\r\n    return max(lens)"
    ],
    [
        [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "def find_substring(list1,substring):\r\n    res = [s for s in list1 if substring in s]\r\n    return len(res) > 0"
    ],
    [
        [
            "assert is_undulating(\"1212121\") == True",
            "assert is_undulating(\"1991\") == False",
            "assert is_undulating(\"121\") == True"
        ],
        "def is_undulating(num):\r\n    if len(num)%2==0:\r\n        return False\r\n    for i in range(1,len(num)):\r\n        if (num[i]-num[i-1])*2==1:\r\n            return True\r\n    return False"
    ],
    [
        [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "def power(a,b):\r\n    return a**b"
    ],
    [
        [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "def index_minimum(test_list):\r\n  res = min(test_list, key=lambda x: x[1])\r\n  return (res[0])"
    ],
    [
        [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "def Find_Min_Length(lst): \r\n    min_length = float('inf') \r\n    for l in lst: \r\n        if len(l) < min_length: \r\n            min_length = len(l) \r\n    return min_length"
    ],
    [
        [
            "assert divisor(15) == 4 ",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "def divisor(n): \r\n    count = 0\r\n    for i in range(1, n + 1): \r\n        if (n % i == 0): \r\n            count += 1\r\n    return count"
    ],
    [
        [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "from collections import Counter \r\ndef frequency_lists(lists):\r\n    return Counter(sum(lists, []))"
    ],
    [
        [
            "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
            "assert multiply_num((-10,-20,-30))==-2000.0",
            "assert multiply_num((19,15,18))==1710.0"
        ],
        "def multiply_num(numbers):\r\n    temp = 1\r\n    for x in numbers:\r\n        temp *= x\r\n    return temp / len(numbers)"
    ],
    [
        [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111' "
        ],
        "def decimal_to_binary(n):\r\n    if (n >= 1):\r\n        decimal_to_binary(n // 2)\r\n        print(n % 2, end='')\r\n    else:\r\n        print(n)"
    ],
    [
        [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "def next_smallest_palindrome(n):\r\n    for x in range(n+1, 100000000):\r\n        if str(x) == str(x)[::-1]:\r\n            return x"
    ],
    [
        [
            "assert kth_element([12,3,5,7,19], 5, 2) == 3",
            "assert kth_element([17,24,8,23], 4, 3) == 8",
            "assert kth_element([16,21,25,36,4], 5, 4) == 36"
        ],
        "def kth_element(arr, k, n): \r\n\tarr.sort() \r\n\treturn arr[k - 1]"
    ],
    [
        [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "def snake_to_camel(text):\r\n        import re\r\n        str1 = re.sub('_(.)', lambda x: x.group(1).upper(), text)\r\n        return str1"
    ],
    [
        [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "def eulerian_num(n, m): \r\n\tdp = [[0 for j in range(m + 1)] for i in range(n + 1)] \r\n\tdp[0][0] = 1\r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, m + 1): \r\n\t\t\tdp[i][j] = dp[i - 1][j] + dp[i][j - 1] \r\n\treturn dp[n][m]"
    ],
    [
        [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "def sort_sublists(test_list):\r\n  res = [sorted(sublist) for sublist in test_list]\r\n  return (res)"
    ],
    [
        [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "def count(list): \r\n    true_ctr = 0\r\n    for ele in list: \r\n        if (ele == True): \r\n            true_ctr += 1\r\n    return true_ctr"
    ],
    [
        [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "def add_lists(test_list, test_tup):\r\n  test_tup = test_tup + test_list\r\n  return (9, 10, 5, 6, 7)"
    ],
    [
        [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
        ],
        "def count_Hexadecimal(l,u): \r\n    cnt = 0\r\n    for i in range(l,u + 1): \r\n        if (repr(i).startswith('0x') or \r\n            repr(i).startswith('0X')): \r\n            cnt += 1\r\n    return cnt"
    ],
    [
        [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "from heapq import merge\r\ndef merge_sorted_list(list1,list2,list3):\r\n  return merge(list1,list2,list3)"
    ],
    [
        [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "def odd_Equivalent(s,n) : \r\n    count = 0\r\n    for i in range(n) : \r\n        if s[i] == '0' : \r\n            count += 1\r\n    return count"
    ],
    [
        [
            "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        ],
        "def extract_missing(num_range, start, end):\r\n    return [(start, x) for x in range(start, end + 1) if x not in num_range] + [(x, end)] for x in range(num_range[1][1], end + 1) if x not in num_range]"
    ],
    [
        [
            "assert common_in_nested_lists([[12, 18, 23, 25, 45], [7, 12, 18, 24, 28], [1, 5, 8, 12, 15, 16, 18]])==[18, 12]",
            "assert common_in_nested_lists([[12, 5, 23, 25, 45], [7, 11, 5, 23, 28], [1, 5, 8, 18, 23, 16]])==[5,23]",
            "assert common_in_nested_lists([[2, 3,4, 1], [4, 5], [6,4, 8],[4, 5], [6, 8,4]])==[4]"
        ],
        "def common_in_nested_lists(list1):\r\n    result = list(set(list1[0]).intersection(*list1))\r\n    return result"
    ],
    [
        [
            "assert perimeter(2,4) == 12",
            "assert perimeter(1,2) == 6",
            "assert perimeter(3,1) == 8"
        ],
        "import math\r\ndef perimeter(r,h):\r\n  pi = math.pi\r\n  perimeter = 2 * pi * r\r\n  return perimeter"
    ],
    [
        [
            "assert check_integer(\"python\")==False",
            "assert check_integer(\"1\")==True",
            "assert check_integer(\"12345\")==True"
        ],
        "def check_integer(string):\r\n    if string.isdigit():\r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert assign_freq([(6, 5, 8), (2, 7), (6, 5, 8), (6, 5, 8), (9, ), (2, 7)] ) == '[(6, 5, 8, 3), (2, 7, 2), (9, 1)]'",
            "assert assign_freq([(4, 2, 4), (7, 1), (4, 8), (4, 2, 4), (9, 2), (7, 1)] ) == '[(4, 2, 4, 2), (7, 1, 2), (4, 8, 1), (9, 2, 1)]'",
            "assert assign_freq([(11, 13, 10), (17, 21), (4, 2, 3), (17, 21), (9, 2), (4, 2, 3)] ) == '[(11, 13, 10, 1), (17, 21, 2), (4, 2, 3, 2), (9, 2, 1)]'"
        ],
        "from collections import Counter\r\ndef assign_freq(test_list):\r\n  res = [tuple(frequency(t)) for t in test_list]\r\n  return (str(res))"
    ],
    [
        [
            "assert empty_dit([{},{},{}])==True",
            "assert empty_dit([{1,2},{},{}])==False",
            "assert empty_dit({})==True"
        ],
        "def empty_dit(test_list):\r\n  res = all(not d for d in test_list)\r\n  return (res)"
    ],
    [
        [
            "assert tuple_to_int((1,2,3))==123",
            "assert tuple_to_int((4,5,6))==456",
            "assert tuple_to_int((5,6,7))==567"
        ],
        "def tuple_to_int(t):\r\n    temp = ''\r\n    for i in t:\r\n        temp += str(i)\r\n    return int(temp)"
    ],
    [
        [
            "assert list_to_float( [(\"3\", \"4\"), (\"1\", \"26.45\"), (\"7.32\", \"8\"), (\"4\", \"8\")] ) == '[(3.0, 4.0), (1.0, 26.45), (7.32, 8.0), (4.0, 8.0)]'",
            "assert list_to_float( [(\"4\", \"4\"), (\"2\", \"27\"), (\"4.12\", \"9\"), (\"7\", \"11\")] ) == '[(4.0, 4.0), (2.0, 27.0), (4.12, 9.0), (7.0, 11.0)]'",
            "assert list_to_float( [(\"6\", \"78\"), (\"5\", \"26.45\"), (\"1.33\", \"4\"), (\"82\", \"13\")] ) == '[(6.0, 78.0), (5.0, 26.45), (1.33, 4.0), (82.0, 13.0)]'"
        ],
        "def list_to_float(test_list):\r\n  res = [(float(x) if type(x) is str else x) for x in test_list]\r\n  return (str(res))"
    ],
    [
        [
            "assert string_to_list(\"python programming\")==['python','programming']",
            "assert string_to_list(\"lists tuples strings\")==['lists','tuples','strings']",
            "assert string_to_list(\"write a program\")==['write','a','program']"
        ],
        "def string_to_list(string):\r\n  li = list(string.split(\" \"))\r\n  return li"
    ],
    [
        [
            "assert search([1,1,2,2,3],5) == 3",
            "assert search([1,1,3,3,4,4,5,5,7,7,8],11) == 8",
            "assert search([1,2,2,3,3,4,4],7) == 1"
        ],
        "def search(arr,n): \r\n    for i in range(0,n): \r\n        count = 1\r\n        for j in range(i+1,n): \r\n            if (arr[i] == arr[j]): \r\n                count+=1\r\n        if (count == 1): \r\n            return arr[i] \r\n    return -1"
    ],
    [
        [
            "assert max_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==36",
            "assert max_product_tuple([(10,20), (15,2), (5,10)] )==200",
            "assert max_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==484"
        ],
        "def max_product_tuple(test_list):\r\n  res = -1\r\n  for tup in test_list:\r\n    res = max(res, tup[0] * tup[1])\r\n  return (res)"
    ],
    [
        [
            "assert check_triplet([2, 7, 4, 0, 9, 5, 1, 3], 8, 6, 0) == True",
            "assert check_triplet([1, 4, 5, 6, 7, 8, 5, 9], 8, 6, 0) == False",
            "assert check_triplet([10, 4, 2, 3, 5], 5, 15, 0) == True"
        ],
        "def check_triplet(arr, a, b, c):\r\n  arr.sort()\r\n  for i in range(len(arr)-2):\r\n    j = i + 1\r\n    k = len(arr) - 1\r\n    while (j < k):\r\n      if (arr[i] + arr[j] + arr[k] == a):\r\n        return True\r\n      elif (arr[i] + arr[j] + arr[k] < c):\r\n        j += 1\r\n      else:\r\n        k -= 1\r\n  return False"
    ],
    [
        [
            "assert smartNumber(1) == 30",
            "assert smartNumber(50) == 273",
            "assert smartNumber(1000) == 2664"
        ],
        "def smartNumber(n): \r\n    x = 1\r\n    y = 1\r\n    current_num = 1\r\n    count = 0\r\n    while count < n: \r\n        current_num = x + 10*y\r\n        count += 1\r\n        x = x + 11*y \r\n        y = 11*y \r\n    return current_num"
    ],
    [
        [
            "assert amicable_numbers_sum(999)==504",
            "assert amicable_numbers_sum(9999)==31626",
            "assert amicable_numbers_sum(99)==0"
        ],
        "def sum_amicable_nums(n):\r\n    proper_divisors = lambda n: [1<div for div in range(2,n) if n%div==0]\r\n    amicable_nums = [n for n in range(1,n) if sum(proper_divisors(n))<n and sum(proper_divisors(sum(proper_divisors(n))))==n]\r\n    return sum(amicable_nums)"
    ],
    [
        [
            "assert angle_complex(0,1j)==1.5707963267948966 ",
            "assert angle_complex(2,1j)==0.4636476090008061",
            "assert angle_complex(0,2j)==1.5707963267948966"
        ],
        "import cmath\r\ndef angle_complex(re,im):\r\n  angle = cmath.phase(complex(re,im))\r\n  return angle"
    ],
    [
        [
            "assert find_length(\"11000010001\", 11) == 6",
            "assert find_length(\"10111\", 5) == 1",
            "assert find_length(\"11011101100101\", 14) == 2 "
        ],
        "def find_length(s, n): \r\n    max_diff = 0\r\n    diff = 0\r\n    for i in range(n): \r\n        if s[i] == '0': \r\n            diff += 1\r\n        else: \r\n            diff -= 1\r\n        max_diff = max(max_diff, diff)\r\n    return max_diff"
    ],
    [
        [
            "assert sum(10,15) == 6",
            "assert sum(100,150) == 93",
            "assert sum(4,6) == 3"
        ],
        "def sum_of_divisors(n, m) : \r\n    sum = 0\r\n    for i in range(1, min(n, m) + 1) : \r\n        if (n % i == 0 and m % i == 0) : \r\n            sum += i \r\n    return sum"
    ],
    [
        [
            "assert multiply_int(10,20)==200",
            "assert multiply_int(5,10)==50",
            "assert multiply_int(4,8)==32"
        ],
        "def multiply_int(x,y):\r\n    if y==0:\r\n        return 0\r\n    if (y>0):\r\n        return x+multiply_int(x,y-1)\r\n    if (y<0):\r\n        return -multiply_int(x,(-y))"
    ],
    [
        [
            "assert long_words(3,\"python is a programming language\")==['python','programming','language']",
            "assert long_words(2,\"writing a program\")==['writing','program']",
            "assert long_words(5,\"sorting list\")==['sorting']"
        ],
        "def long_words(n,text):\r\n    wordlist=text.split(\" \")\r\n    long_words=[]\r\n    for word in wordlist:\r\n        if len(word)>n:\r\n            long_words.append(word)\r\n    return long_words"
    ],
    [
        [
            "assert magic_square_test([[7, 12, 1, 14], [2, 13, 8, 11], [16, 3, 10, 5], [9, 6, 15, 4]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 8]])==True",
            "assert magic_square_test([[2, 7, 6], [9, 5, 1], [4, 3, 7]])==False"
        ],
        "def magic_square_test(test_list):\r\n  res = all(sum(row) == 34 for row in test_list)\r\n  return (res)"
    ],
    [
        [
            "assert max_occurrences([2,3,8,4,7,9,8,2,6,5,1,6,1,2,3,2,4,6,9,1,2])==(2, 5)",
            "assert max_occurrences([2,3,8,4,7,9,8,7,9,15,14,10,12,13,16,16,18])==(8, 2)",
            "assert max_occurrences([10,20,20,30,40,90,80,50,30,20,50,10])==(20, 3)"
        ],
        "from collections import Counter \r\ndef max_occurrences(list1):\r\n    c = Counter(list1)\r\n    return c.most_common(1)"
    ],
    [
        [
            "assert reverse_vowels(\"Python\") == \"Python\"",
            "assert reverse_vowels(\"USA\") == \"ASU\"",
            "assert reverse_vowels(\"ab\") == \"ab\""
        ],
        "def reverse_vowels(s):\r\n    vowels = \"AEIOUaeiou\"\r\n    li = list(s)\r\n    i, j = 0, len(s) - 1\r\n    while i < j:\r\n        if li[i] not in vowels:\r\n            i += 1\r\n            continue\r\n        if li[j] not in vowels:\r\n            j -= 1\r\n            continue\r\n        li[i], li[j] = li[j], li[i]\r\n        i, j = i + 1, j - 1\r\n    return \"\".join(li)"
    ],
    [
        [
            "assert tup_string(('e', 'x', 'e', 'r', 'c', 'i', 's', 'e', 's'))==(\"exercises\")",
            "assert tup_string(('p','y','t','h','o','n'))==(\"python\")",
            "assert tup_string(('p','r','o','g','r','a','m'))==(\"program\")"
        ],
        "def tup_string(tup):\r\n  res = ''.join(tup)\r\n  return (res)"
    ],
    [
        [
            "assert sum_negativenum([2, 4, -6, -9, 11, -12, 14, -5, 17])==-32",
            "assert sum_negativenum([10,15,-14,13,-18,12,-20])==-52",
            "assert sum_negativenum([19, -65, 57, 39, 152,-639, 121, 44, 90, -190])==-894"
        ],
        "def sum_negativenum(nums):\r\n  sum_neg = list(filter(lambda x: x<0, nums))\r\n  return sum(sum_neg)"
    ],
    [
        [
            "assert check_last([5,7,10],3,1) == \"ODD\"",
            "assert check_last([2,3],2,3) == \"EVEN\"",
            "assert check_last([1,2,3],3,1) == \"ODD\""
        ],
        "def check_last(arr,p,n): \r\n    for i in range(p): \r\n        arr.append(arr.pop(0)) \r\n    if (arr[n] % 2 == 0): \r\n        return (\"EVEN\") \r\n    else: \r\n        return (\"ODD\")"
    ],
    [
        [
            "assert hexagonal_num(10) == 190",
            "assert hexagonal_num(5) == 45",
            "assert hexagonal_num(7) == 91"
        ],
        "def hexagonal_num(n): \r\n    return n * (2*n - 1)"
    ],
    [
        [
            "assert cal_electbill(75)==246.25",
            "assert cal_electbill(265)==1442.75",
            "assert cal_electbill(100)==327.5"
        ],
        "def cal_electbill(sms):\r\n    if sms >= 150:\r\n        return sms * 12\r\n    else:\r\n        return sms * 10.5"
    ],
    [
        [
            "assert zero_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.15",
            "assert zero_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.00",
            "assert zero_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.00"
        ],
        "def zero_count(array):\r\n    zero_count = array.count(0)\r\n    return (zero_count / len(array))"
    ],
    [
        [
            "assert is_Sum_Of_Powers_Of_Two(10) == True",
            "assert is_Sum_Of_Powers_Of_Two(7) == False",
            "assert is_Sum_Of_Powers_Of_Two(14) == True"
        ],
        "def is_Sum_Of_Powers_Of_Two(n): \r\n    while (n % 2 == 0): \r\n        n = n // 2\r\n    return (n == 1)"
    ],
    [
        [
            "assert circle_circumference(10)==62.830000000000005",
            "assert circle_circumference(5)==31.415000000000003",
            "assert circle_circumference(4)==25.132"
        ],
        "import math\r\ndef circle_circumference(r):\r\n  circumference=2*math.pi*r\r\n  return circumference"
    ],
    [
        [
            "assert extract_singly([(3, 4, 5), (4, 5, 7), (1, 4)]) == [3, 4, 5, 7, 1]",
            "assert extract_singly([(1, 2, 3), (4, 2, 3), (7, 8)]) == [1, 2, 3, 4, 7, 8]",
            "assert extract_singly([(7, 8, 9), (10, 11, 12), (10, 11)]) == [7, 8, 9, 10, 11, 12]"
        ],
        "def extract_singly(test_list):\r\n  res = []\r\n  for sub in test_list:\r\n    for ele in sub:\r\n      if sub.count(ele) == 1:\r\n        res.append(ele)\r\n  return (res)"
    ],
    [
        [
            "assert pancake_sort([15, 79, 25, 38, 69]) == [15, 25, 38, 69, 79]",
            "assert pancake_sort([98, 12, 54, 36, 85]) == [12, 36, 54, 85, 98]",
            "assert pancake_sort([41, 42, 32, 12, 23]) == [12, 23, 32, 41, 42]"
        ],
        "def pancake_sort(arr):\r\n    n = len(arr)\r\n    for i in range(n - 1):\r\n        # find the index of the largest element from i to n-1\r\n        max_idx = i\r\n        for j in range(i, n):\r\n            if arr[j] > arr[max_idx]:\r\n                max_idx = j\r\n        # move the largest element to the end\r\n        if max_idx != i:\r\n            arr[n-1-i], arr[max_idx] = arr[max_idx], arr[n-1-i]\r\n        # move the largest element to its correct position\r\n        for j in range(n-1-i, n):\r\n            if arr[j] > arr[n-1-i]:\r\n                arr[n-1-i], arr[j] = arr[j], arr[n-1-i]\r\n    return arr"
    ],
    [
        [
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,9],[2,1,3,1,2,6,7,9])==3",
            "assert count_samepair([1,2,3,4,5,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==4",
            "assert count_samepair([1,2,3,4,2,6,7,8],[2,2,3,1,2,6,7,8],[2,1,3,1,2,6,7,8])==5"
        ],
        "def count_samepair(list1,list2,list3):\r\n    result= set(list1) & set(list2) & set(list3)\r\n    return len(result)"
    ],
    [
        [
            "assert find_lists(([1, 2, 3, 4], [5, 6, 7, 8])) == 2",
            "assert find_lists(([1, 2], [3, 4], [5, 6]))  == 3",
            "assert find_lists(([9, 8, 7, 6, 5, 4, 3, 2, 1])) == 1"
        ],
        "def find_lists(test_list):\r\n  res = sum(isinstance(i, list) for i in test_list)\r\n  return (res)"
    ],
    [
        [
            "assert sum_Pairs([1,8,9,15,16],5) == 74",
            "assert sum_Pairs([1,2,3,4],4) == 10",
            "assert sum_Pairs([1,2,3,4,5,7,9,11,14],9) == 188"
        ],
        "def sum_Pairs(arr,n): \r\n    ans = 0; \r\n    for i in range(0,n): \r\n        for j in range(i + 1,n): \r\n            ans = ans + abs(arr[i] - arr[j]); \r\n    return ans;"
    ],
    [
        [
            "assert max_Abs_Diff((2,1,5,3),4) == 4",
            "assert max_Abs_Diff((9,3,2,5,1),5) == 8",
            "assert max_Abs_Diff((3,2,1),3) == 2"
        ],
        "def max_Abs_Diff(arr,n): \r\n    minElement = arr[0] \r\n    maxDiff = 0\r\n    for i in range(1,n): \r\n        maxDiff = max(maxDiff, arr[i] - minElement) \r\n        if (arr[i] < minElement): \r\n            minElement = arr[i] \r\n    return maxDiff"
    ],
    [
        [
            "assert ascii_value_string(\"python\")==112",
            "assert ascii_value_string(\"Program\")==80",
            "assert ascii_value_string(\"Language\")==76"
        ],
        "def ascii_value_string(str1):\r\n  ascii_value = 0\r\n  for i in range(len(str1)):\r\n    ascii_value += ord(str1[i])\r\n  return ascii_value"
    ],
    [
        [
            "assert max_path_sum([[1, 0, 0], [4, 8, 0], [1, 5, 3]], 2, 2) == 14",
            "assert max_path_sum([[13, 0, 0], [7, 4, 0], [2, 4, 6]], 2, 2) == 24 ",
            "assert max_path_sum([[2, 0, 0], [11, 18, 0], [21, 25, 33]], 2, 2) == 53"
        ],
        "def max_path_sum(triangle, row, col):\r\n    if row == 0:\r\n        return triangle[row][col]\r\n    else:\r\n        left = max_path_sum(triangle, row - 1, col - 1)\r\n        right = max_path_sum(triangle, row - 1, col)\r\n        return triangle[row][col] + max(left, right)"
    ],
    [
        [
            "assert sum_digits_twoparts(35)==17",
            "assert sum_digits_twoparts(7)==7",
            "assert sum_digits_twoparts(100)==19"
        ],
        "def sum_digits_twoparts(n): \r\n    n = str(n) \r\n    l = len(n) \r\n    ab = [0 for i in range(l + 1)] \r\n    a = l \r\n    b = 0\r\n    for i in range(l - 1): \r\n        ab[i] = int(n[i]) + int(n[i + 1]) \r\n        a = max(a, ab[i]) \r\n        b = l - ab[i] \r\n    return b"
    ],
    [
        [
            "assert longest_subseq_with_diff_one([1, 2, 3, 4, 5, 3, 2], 7) == 6",
            "assert longest_subseq_with_diff_one([10, 9, 4, 5, 4, 8, 6], 7) == 3",
            "assert longest_subseq_with_diff_one([1, 2, 3, 2, 3, 7, 2, 1], 8) == 7"
        ],
        "def longest_subseq_with_diff_one(arr, n): \r\n\tans = 0\r\n\tcount = 1\r\n\tarr.sort() \r\n\tfor i in range(1, n): \r\n\t\tif (arr[i] - arr[i - 1] == 1): \r\n\t\t\tcount += 1\r\n\t\telse: \r\n\t\t\tans = max(ans, count) \r\n\t\t\tcount = 1\r\n\tans = max(ans, count) \r\n\treturn ans"
    ],
    [
        [
            "assert does_Contain_B(1,7,3) == True",
            "assert does_Contain_B(1,-3,5) == False",
            "assert does_Contain_B(3,2,5) == False"
        ],
        "def does_Contain_B(n,a,b): \r\n    while (True): \r\n        if (n == a): \r\n            return True\r\n        a, b = (a + b), a \r\n        if (n == b): \r\n            return True\r\n        a, b = a - b, a \r\n        if (n == a): \r\n            return True\r\n        a, b = b, a \r\n        if (n == b): \r\n            return True\r\n        a, b = a - b, a \r\n        if (n == a): \r\n            return True\r\n        a, b = b, a \r\n        if (n == b): \r\n            return True\r\n        a, b = a + b, a \r\n        if (n == a): \r\n            return True\r\n        a, b = b, a \r\n        if (n == b): \r\n            return True\r\n        a, b = a - b, a \r\n        if (n == a): \r\n            return True\r\n        a, b = b, a \r\n        if (n == b): \r\n            return True\r\n        a, b = a + b, a \r\n        if (n == a): \r\n            return True\r\n        return False"
    ],
    [
        [
            "assert is_coprime(17,13) == True",
            "assert is_coprime(15,21) == False",
            "assert is_coprime(25,45) == False"
        ],
        "def gcd(a,b): \r\n    if (a == 0): \r\n        return b; \r\n    return gcd(a%b,b); \r\ndef is_coprime(a,b): \r\n    if (gcd(a,b) == 1): \r\n        return True; \r\n    return False;"
    ],
    [
        [
            "assert merge_sort([3, 4, 2, 6, 5, 7, 1, 9]) == [1, 2, 3, 4, 5, 6, 7, 9]",
            "assert merge_sort([7, 25, 45, 78, 11, 33, 19]) == [7, 11, 19, 25, 33, 45, 78]",
            "assert merge_sort([3, 1, 4, 9, 8]) == [1, 3, 4, 8, 9]"
        ],
        "def merge_sort(arr):  \r\n    if len(arr) > 1: \r\n        mid = len(arr) // 2\r\n        left_half = arr[:mid] \r\n        right_half = arr[mid:]\r\n        merge_sort(left_half) \r\n        merge_sort(right_half) \r\n        i = j = k = 0\r\n        while i < len(left_half) and j < len(right_half): \r\n            if left_half[i] < right_half[j]: \r\n                arr[k] = left_half[i] \r\n                i = i + 1\r\n            else: \r\n                arr[k] = right_half[j] \r\n                j = j + 1\r\n            k = k + 1\r\n        while i < len(left_half): \r\n            arr[k] = left_half[i] \r\n            i = i + 1\r\n            k = k + 1\r\n        while j < len(right_half): \r\n            arr[k] = right_half[j] \r\n            j = j + 1\r\n            k = k + 1\r\n        return arr"
    ],
    [
        [
            "assert parabola_vertex(5,3,2)==(-0.3, 1.55)",
            "assert parabola_vertex(9,8,4)==(-0.4444444444444444, 2.2222222222222223)",
            "assert parabola_vertex(2,4,6)==(-1.0, 4.0)"
        ],
        "def parabola_vertex(a,b,c):\r\n  x = -b / (2 * a)\r\n  y = a * x ** 2 + b * x + c\r\n  return (x, y)"
    ],
    [
        [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],3)==[2,2,5]"
        ],
        "def specified_element(test_list, ele):\r\n  res = [sub[ele] for sub in test_list if ele in sub]\r\n  return (res)"
    ],
    [
        [
            "assert even_bit_toggle_number(10) == 0",
            "assert even_bit_toggle_number(20) == 30",
            "assert even_bit_toggle_number(30) == 20"
        ],
        "def even_bit_toggle_number(n):\r\n    n |= n >> 1\r\n    n |= n >> 2\r\n    n |= n >> 4\r\n    n |= n >> 8\r\n    n |= n >> 16\r\n    return (n >> 1) ^ 1"
    ],
    [
        [
            "assert tuple_int_str((('333', '33'), ('1416', '55')))==((333, 33), (1416, 55))",
            "assert tuple_int_str((('999', '99'), ('1000', '500')))==((999, 99), (1000, 500))",
            "assert tuple_int_str((('666', '66'), ('1500', '555')))==((666, 66), (1500, 555))"
        ],
        "def tuple_int_str(test_tup):\r\n  res = tuple(map(int, test_tup))\r\n  return (res)"
    ],
    [
        [
            "assert encode_list([1,1,2,3,4,4.3,5,1])==[[2, 1], [1, 2], [1, 3], [1, 4], [1, 4.3], [1, 5], [1, 1]]",
            "assert encode_list('automatically')==[[1, 'a'], [1, 'u'], [1, 't'], [1, 'o'], [1, 'm'], [1, 'a'], [1, 't'], [1, 'i'], [1, 'c'], [1, 'a'], [2, 'l'], [1, 'y']]",
            "assert encode_list('python')==[[1, 'p'], [1, 'y'], [1, 't'], [1, 'h'], [1, 'o'], [1, 'n']]"
        ],
        "def run_length_encoding(input): \r\n    encoding = [[len(list(group)), list(group)[0]] \r\n                for key, group in groupby(input)] \r\n    return encoding"
    ],
    [
        [
            "assert min_Ops([2,2,2,2],4,3) == 0",
            "assert min_Ops([4,2,6,8],4,3) == -1",
            "assert min_Ops([21,33,9,45,63],5,6) == 24"
        ],
        "def min_Ops(arr,n,k): \r\n    s = sum(arr) \r\n    if (s % n): \r\n        return -1\r\n    inc = (s - (s // n)) // k \r\n    return inc"
    ],
    [
        [
            "assert month_season('January',4)==('winter')",
            "assert month_season('October',28)==('autumn')",
            "assert month_season('June',6)==('spring')"
        ],
        "def month_season(month,day):\r\n  if month in (\"January\", \"February\", \"March\"):\r\n    return (\"winter\")\r\n  elif month == \"April\":\r\n    return (\"spring\")\r\n  elif month == \"May\":\r\n    return (\"spring\")\r\n  elif month == \"June\":\r\n    return (\"summer\")\r\n  elif month == \"July\":\r\n    return (\"summer\")\r\n  elif month == \"August\":\r\n    return (\"summer\")\r\n  elif month == \"September\":\r\n    return (\"fall\")\r\n  elif month == \"October\":\r\n    return (\"fall\")\r\n  elif month == \"November\":\r\n    return (\"fall\")\r\n  elif month == \"December\":\r\n    return (\"winter\")"
    ],
    [
        [
            "assert solution(2, 3, 7) == ('x = ', 2, ', y = ', 1)",
            "assert solution(4, 2, 7) == 'No solution'",
            "assert solution(1, 13, 17) == ('x = ', 4, ', y = ', 1)"
        ],
        "def solution(a, b, n):\r\n    x = n // a\r\n    y = n % a\r\n    return ('x = ', x, ', y = ', y)"
    ],
    [
        [
            "assert remove_elements([1,2,3,4,5,6,7,8,9,10],[2,4,6,8])==[1, 3, 5, 7, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[1, 3, 5, 7])==[2, 4, 6, 8, 9, 10]",
            "assert remove_elements([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],[5,7])==[1, 2, 3, 4, 6, 8, 9, 10]"
        ],
        "def remove_elements(list1,list2):\r\n    for item in list2:\r\n        while item in list1:\r\n            list1.remove(item)\r\n    return  list1"
    ],
    [
        [
            "assert sum_series(6)==12",
            "assert sum_series(10)==30",
            "assert sum_series(9)==25"
        ],
        "def sum_series(n):\r\n    if (n == 1):\r\n        return 1\r\n    return n + sum_series(n - 2)"
    ],
    [
        [
            "assert area_polygon(4,20)==400.00000000000006",
            "assert area_polygon(10,15)==1731.1969896610804",
            "assert area_polygon(9,7)==302.90938549487214"
        ],
        "import math\r\ndef area_polygon(s,p):\r\n  area = (s*p)/2\r\n  return area"
    ],
    [
        [
            "assert areEquivalent(36,57) == False",
            "assert areEquivalent(2,4) == False",
            "assert areEquivalent(23,47) == True"
        ],
        "def areEquivalent(n,sum): \r\n    res = sumOfDivisors(n) \r\n    if (res == sum): \r\n        return True\r\n    return False"
    ],
    [
        [
            "assert count_char_position(\"xbcefg\") == 2",
            "assert count_char_position(\"ABcED\") == 3",
            "assert count_char_position(\"AbgdeF\") == 5"
        ],
        "def count_char_position(str1):\r\n  count = 0\r\n  for i in range(len(str1)):\r\n    if str1[i].lower() == 'a':\r\n      count += 1\r\n  return count"
    ],
    [
        [
            "assert find_even_Pair([5,4,7,2,1],5) == 4",
            "assert find_even_Pair([7,2,8,1,0,5,11],7) == 9",
            "assert find_even_Pair([1,2,3],3) == 1"
        ],
        "def find_even_Pair(arr,n): \r\n    count = 0; \r\n    for i in range(0,n): \r\n        for j in range(i + 1,n): \r\n            if ((arr[i] ^ arr[j]) & 1 == 0): \r\n                count += 1; \r\n    return count;"
    ],
    [
        [
            "assert next_Power_Of_2(0) == 1",
            "assert next_Power_Of_2(5) == 8",
            "assert next_Power_Of_2(17) == 32"
        ],
        "def next_Power_Of_2(n): \r\n    if (n == 0): \r\n        return 1\r\n    power = 1\r\n    while (power < n): \r\n        power = power * 2\r\n    return power"
    ],
    [
        [
            "assert frequency([1,2,3],4) == 0",
            "assert frequency([1,2,2,3,3,3,4],3) == 3",
            "assert frequency([0,1,2,3,1,2],1) == 2"
        ],
        "def frequency(arr,n): \r\n    x = [0] * (n) \r\n    for i in range(0,n): \r\n        x[i] = arr.count(arr[i]) \r\n    return x"
    ],
    [
        [
            "assert get_pell(4) == 12",
            "assert get_pell(7) == 169",
            "assert get_pell(8) == 408"
        ],
        "def get_pell(n): \r\n    if n == 0 or n == 1: \r\n        return 1\r\n    else: \r\n        return get_pell(n - 1) + 2 * get_pell(n - 2)"
    ],
    [
        [
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],8,10)==29",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],5,7)==16",
            "assert sum_range_list( [2,1,5,6,8,3,4,9,10,11,8,12],7,10)==38"
        ],
        "def sum_range_list(num_list,start,end):\r\n    sum_range=0\r\n    for i in range(start,end):\r\n        sum_range=sum_range+num_list[i]\r\n    return sum_range"
    ],
    [
        [
            "assert perimeter_pentagon(5)==25",
            "assert perimeter_pentagon(10)==50",
            "assert perimeter_pentagon(15)==75"
        ],
        "def perimeter_pentagon(s):\r\n  perimeter=5*s\r\n  return perimeter"
    ],
    [
        [
            "assert count_occurance(\"letstdlenstdporstd\") == 3",
            "assert count_occurance(\"truststdsolensporsd\") == 1",
            "assert count_occurance(\"makestdsostdworthit\") == 2"
        ],
        "def count_occurance(string, substr):\r\n  count = 0\r\n  l = len(substr)\r\n  for i in range(len(string)):\r\n    if string[i] == substr[0] and string[i:i + l] == substr:\r\n      count += 1\r\n  return count"
    ],
    [
        [
            "assert remove_splchar('python  @#&^%$*program123')==('pythonprogram123')",
            "assert remove_splchar('python %^$@!^&*()  programming24%$^^()    language')==('pythonprogramming24language')",
            "assert remove_splchar('python   ^%&^()(+_)(_^&67)                  program')==('python67program')"
        ],
        "import re\r\ndef remove_splchar(text):\r\n  pattern = re.compile('[\\W_]+')\r\n  return (pattern.sub('', text))"
    ],
    [
        [
            "assert group_keyvalue([('yellow', 1), ('blue', 2), ('yellow', 3), ('blue', 4), ('red', 1)])=={'yellow': [1, 3], 'blue': [2, 4], 'red': [1]}",
            "assert group_keyvalue([('python', 1), ('python', 2), ('python', 3), ('python', 4), ('python', 5)])=={'python': [1,2,3,4,5]}",
            "assert group_keyvalue([('yellow',100), ('blue', 200), ('yellow', 300), ('blue', 400), ('red', 100)])=={'yellow': [100, 300], 'blue': [200, 400], 'red': [100]}"
        ],
        "from itertools import groupby\r\ndef group_keyvalue(l):\r\n    result = dict()\r\n    for key, vals in groupby(l, key=lambda x: x[0]):\r\n        result[key] = list(map(lambda x: x[1], vals))\r\n    return result"
    ],
    [
        [
            "assert is_valid_parenthese(\"(){}[]\")==True",
            "assert is_valid_parenthese(\"()[{)}\")==False",
            "assert is_valid_parenthese(\"()\")==True"
        ],
        "def is_valid_parenthese(s): \r\n    stack = [] \r\n    for ch in s: \r\n        if ch == '(': \r\n            stack.append('(')\r\n        if ch == ')' : \r\n            if not stack: \r\n                return False\r\n            stack.pop()\r\n    if not stack: \r\n        return True\r\n    return False"
    ],
    [
        [
            "assert perimeter_triangle(10,20,30)==60",
            "assert perimeter_triangle(3,4,5)==12",
            "assert perimeter_triangle(25,35,45)==105"
        ],
        "def perimeter_triangle(a,b,c):\r\n  perimeter=a+b+c\r\n  return perimeter"
    ],
    [
        [
            "assert answer(3,8) == (3,6)",
            "assert answer(2,6) == (2,4)",
            "assert answer(1,3) == (1,2)"
        ],
        "def find_nums(m,n): \r\n    for i in range(m,n+1): \r\n        for j in range(i+1,n+1): \r\n            if (i*j) >= m and (i*j) <= n: \r\n                x = i*j\r\n                if (x >= m and x <= n): \r\n                    return (i,j)"
    ],
    [
        [
            "assert string_literals(['language'],'python language')==('Matched!')",
            "assert string_literals(['program'],'python language')==('Not Matched!')",
            "assert string_literals(['python'],'programming language')==('Not Matched!')"
        ],
        "import re\r\ndef string_literals(l1,s):\r\n    for x in l1:\r\n        if re.search(x,s):\r\n            return ('Matched!')\r\n        else:\r\n            return ('Not matched!')"
    ],
    [
        [
            "assert is_num_keith(14) == True",
            "assert is_num_keith(12) == False",
            "assert is_num_keith(197) == True"
        ],
        "def is_num_keith(n): \r\n    if (n < 3): \r\n        return False\r\n    arr = [0, 0, 1] \r\n    for i in range(3, n + 1): \r\n        new_num = arr[i - 1] + arr[i - 2] \r\n        if (new_num == n): \r\n            return True\r\n        arr.append(new_num) \r\n    return False"
    ],
    [
        [
            "assert distance_lat_long(23.5,67.5,25.5,69.5)==12179.372041317429",
            "assert distance_lat_long(10.5,20.5,30.5,40.5)==6069.397933300514",
            "assert distance_lat_long(10,20,30,40)==6783.751974994595"
        ],
        "import math\r\ndef distance_lat_long(lat1,long1,lat2,long2):\r\n    long1,lat1,long2,lat2 = map(math.radians, [long1,lat1,long2,lat2])\r\n    dist = math.acos(math.sin(lat1)*math.sin(lat2)+math.cos(lat1)*math.cos(lat2)*math.cos(long2-long1))\r\n    earth_radius = 6371\r\n    dist = earth_radius*dist\r\n    return dist"
    ],
    [
        [
            "assert common_prefix([\"tablets\", \"tables\", \"taxi\", \"tamarind\"], 4) == 'ta'",
            "assert common_prefix([\"apples\", \"ape\", \"april\"], 3) == 'ap'",
            "assert common_prefix([\"teens\", \"teenager\", \"teenmar\"], 3) == 'teen'"
        ],
        "def common_prefix(set, n):\r\n    result = \"\"\r\n    for i in range(0, n):\r\n        temp = \"\"\r\n        for j in range(0, n):\r\n            if i == n - 1:\r\n                break\r\n            if set[i][j] == set[i + 1][j]:\r\n                temp += set[i][j]\r\n            else:\r\n                break\r\n        if len(result) < len(temp):\r\n            result = temp\r\n    return result"
    ],
    [
        [
            "assert find_character(\"ThisIsGeeksforGeeks\") == (['T', 'I', 'G', 'G'], ['h', 'i', 's', 's', 'e', 'e', 'k', 's', 'f', 'o', 'r', 'e', 'e', 'k', 's'], [], [])",
            "assert find_character(\"Hithere2\") == (['H'], ['i', 't', 'h', 'e', 'r', 'e'], ['2'], [])",
            "assert find_character(\"HeyFolks32\") == (['H', 'F'], ['e', 'y', 'o', 'l', 'k', 's'], ['3', '2'], [])"
        ],
        "import re\r\ndef find_character(string):\r\n  lower = list(re.findall('[a-z]', string))\r\n  upper = list(re.findall('[A-Z]', string))\r\n  numeric = list(re.findall('[0-9]', string))\r\n  special = list(re.findall('[~`@#$%^&*()_+{}|:\\/\\[]', string))\r\n  return (upper, lower, special, numeric)"
    ],
    [
        [
            "assert count_pairs([1, 5, 3, 4, 2], 5, 3) == 2",
            "assert count_pairs([8, 12, 16, 4, 0, 20], 6, 4) == 5",
            "assert count_pairs([2, 4, 1, 3, 4], 5, 2) == 3"
        ],
        "def count_pairs(arr, n, k): \r\n    hash_map = {} \r\n    for i in range(n): \r\n        if (arr[i] - k in hash_map): \r\n            hash_map[(arr[i] - k)] += 1\r\n        else: \r\n            hash_map[arr[i] - k] = 1\r\n    result = 0\r\n    for i in hash_map.values(): \r\n        result = result + (i * (i - 1)) // 2\r\n    return result"
    ],
    [
        [
            "assert greater_specificnum([220, 330, 500],200)==True",
            "assert greater_specificnum([12, 17, 21],20)==False",
            "assert greater_specificnum([1,2,3,4],10)==False"
        ],
        "def greater_specificnum(nums,n):\r\n    result = [n for n in nums if n > n]\r\n    return result"
    ],
    [
        [
            "assert parabola_focus(5,3,2)==(-0.3, 1.6)",
            "assert parabola_focus(9,8,4)==(-0.4444444444444444, 2.25)",
            "assert parabola_focus(2,4,6)==(-1.0, 4.125)"
        ],
        "def parabola_focus(a,b,c):\r\n  focus_x = -b/(2*a)\r\n  focus_y = c - (a**2)\r\n  return (focus_x, focus_y)"
    ],
    [
        [
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['fox']) == 'Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['horse']) == 'Not Matched!'",
            "assert check_literals('The quick brown fox jumps over the lazy dog.',['lazy']) == 'Matched!'"
        ],
        "import re\r\ndef check_literals(string, literals):\r\n  for x in literals:\r\n    if re.search(x, string):\r\n      return ('Matched!')\r\n  else:\r\n    return ('Not matched!')"
    ],
    [
        [
            "assert longest_common_subsequence(\"AGGTAB\" , \"GXTXAYB\", 6, 7) == 4",
            "assert longest_common_subsequence(\"ABCDGH\" , \"AEDFHR\", 6, 6) == 3",
            "assert longest_common_subsequence(\"AXYT\" , \"AYZX\", 4, 4) == 2"
        ],
        "def longest_common_subsequence(X, Y, m, n): \r\n\tdp = [[0 for i in range(n+1)] for j in range(m+1)] \r\n\tfor i in range(m+1): \r\n\t\tfor j in range(n+1): \r\n\t\t\tif (i == 0 or j == 0): \r\n\t\t\t\tdp[i][j] = 0\r\n\t\t\telif (X[i-1] == Y[j-1]): \r\n\t\t\t\tdp[i][j] = dp[i-1][j-1] + 1\r\n\t\t\telse: \r\n\t\t\t\tdp[i][j] = max(dp[i-1][j], dp[i][j-1]) \r\n\treturn dp[m][n]"
    ],
    [
        [
            "assert prod_Square(25) == False",
            "assert prod_Square(30) == False",
            "assert prod_Square(16) == True"
        ],
        "def prod_Square(n) : \r\n    i = 1 \r\n    while (i * i <= n) : \r\n        temp = n / (i * i) \r\n        if (temp == int(temp)) : \r\n            return True\r\n        i = i + 1\r\n    return False"
    ],
    [
        [
            "assert first_Missing_Positive([1,2,3,-1,5],5) == 4",
            "assert first_Missing_Positive([0,-1,-2,1,5,8],6) == 2",
            "assert first_Missing_Positive([0,1,2,5,-8],5) == 3"
        ],
        "def first_Missing_Positive(nums, n): \r\n\ti = 0\r\n\twhile (i < n): \r\n\t\tj = nums[i] - 1\r\n\t\tif (nums[i] > 0 and nums[i] <= n and nums[i] != nums[j]): \r\n\t\t\tnums[i], nums[j] = nums[j], nums[i] \r\n\t\telse: \r\n\t\t\ti += 1\r\n\tfor i in range(n): \r\n\t\tif (nums[i] != i + 1): \r\n\t\t\treturn i + 1\r\n\treturn n + 1"
    ],
    [
        [
            "assert count_Intgral_Points(1,1,4,4) == 4",
            "assert count_Intgral_Points(1,2,1,2) == 1",
            "assert count_Intgral_Points(4,2,6,4) == 1"
        ],
        "def count_Intgral_Points(x1,y1,x2,y2): \r\n    cnt = 0\r\n    for i in range(x1+1,x2): \r\n        for j in range(y1+1,y2): \r\n            cnt += 1\r\n    return cnt"
    ],
    [
        [
            "assert check_monthnumber(\"February\")==False",
            "assert check_monthnumber(\"June\")==True",
            "assert check_monthnumber(\"April\")==True"
        ],
        "def check_monthnumber(monthname):\r\n  if(monthname==\"February\"):\r\n    return False\r\n  else:\r\n    return True"
    ],
    [
        [
            "assert check_String('thishasboth29') == True",
            "assert check_String('python') == False",
            "assert check_String ('string') == False"
        ],
        "def check_String(str1):\r\n  return any(i.isdigit() for i in str1) and any(j.isalpha() for j in str1)"
    ],
    [
        [
            "assert remove_tuple((1, 3, 5, 2, 3, 5, 1, 1, 3)) == (1, 2, 3, 5)",
            "assert remove_tuple((2, 3, 4, 4, 5, 6, 6, 7, 8, 8)) == (2, 3, 4, 5, 6, 7, 8)",
            "assert remove_tuple((11, 12, 13, 11, 11, 12, 14, 13)) == (11, 12, 13, 14)"
        ],
        "def remove_tuple(test_tup):\r\n  res = set(test_tup)\r\n  res = tuple(res) \r\n  return (res)"
    ],
    [
        [
            "assert octal_To_Decimal(25) == 21",
            "assert octal_To_Decimal(30) == 24",
            "assert octal_To_Decimal(40) == 32"
        ],
        "def octal_To_Decimal(n): \r\n    n = str(n) \r\n    dec = 0\r\n    i = 0\r\n    while (i < len(n)): \r\n        dig = int(n[i]) \r\n        dec = dec + dig * (8**(len(n)-1-i)) \r\n        i += 1\r\n    return dec"
    ],
    [
        [
            "assert first([1,2,3,4,5,6,6],6,6) == 5",
            "assert first([1,2,2,2,3,2,2,4,2],2,9) == 1",
            "assert first([1,2,3],1,3) == 0"
        ],
        "def first(arr,x,n):\r\n    low = 0\r\n    high = n - 1\r\n    res = -1\r\n    while (low <= high):\r\n        mid = (low + high) // 2\r\n        if arr[mid] == x:\r\n            res = mid\r\n            high = mid - 1\r\n        elif arr[mid] > x:\r\n            high = mid - 1\r\n        else:\r\n            low = mid + 1\r\n    return res"
    ],
    [
        [
            "assert remove_tuples([(4, 5), (4, ), (8, 6, 7), (1, ), (3, 4, 6, 7)] , 1) == [(4, 5), (8, 6, 7), (3, 4, 6, 7)]",
            "assert remove_tuples([(4, 5), (4,5), (6, 7), (1, 2, 3), (3, 4, 6, 7)] ,2) == [(1, 2, 3), (3, 4, 6, 7)]",
            "assert remove_tuples([(1, 4, 4), (4, 3), (8, 6, 7), (1, ), (3, 6, 7)] , 3) == [(4, 3), (1,)]"
        ],
        "def remove_tuples(test_list, K):\r\n  res = [ele for ele in test_list if not (len(ele) == K)]\r\n  return (res)"
    ],
    [
        [
            "assert find_exponentio((10, 4, 5, 6), (5, 6, 7, 5)) == (100000, 4096, 78125, 7776)",
            "assert find_exponentio((11, 5, 6, 7), (6, 7, 8, 6)) == (1771561, 78125, 1679616, 117649)",
            "assert find_exponentio((12, 6, 7, 8), (7, 8, 9, 7)) == (35831808, 1679616, 40353607, 2097152)"
        ],
        "def find_exponentio(num, dem):\r\n  result = tuple(i ** j for i, j in zip(num, dem))\r\n  return result"
    ],
    [
        [
            "assert largest_triangle(4,2)==10.392304845413264",
            "assert largest_triangle(5,7)==4.639421805988064",
            "assert largest_triangle(9,1)==105.2220865598093"
        ],
        "def largest_triangle(a,b):\r\n  amax=a\r\n  bmax=b\r\n  area=amax*bmax\r\n  return area"
    ],
    [
        [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "def highest_Power_of_2(n): \r\n    power = 1;   \r\n    while (power <= n): \r\n        power = power << 1;   \r\n    return power - 1;"
    ],
    [
        [
            "assert position_max([12,33,23,10,67,89,45,667,23,12,11,10,54])==[7]",
            "assert position_max([1,2,2,2,4,4,4,5,5,5,5])==[7,8,9,10]",
            "assert position_max([2,1,5,6,8,3,4,9,10,11,8,12])==[11]"
        ],
        "def position_max(nums):\r\n    max_val = max(nums)\r\n    return [index for index, value in enumerate(nums) if value == max_val]"
    ],
    [
        [
            "assert chkList(['one','one','one']) == True",
            "assert chkList(['one','Two','Three']) == False",
            "assert chkList(['bigdata','python','Django']) == False"
        ],
        "def chkList(list1):\r\n    return len(set(list1)) == 1"
    ],
    [
        [
            "assert remove_even(\"python\")==(\"pto\")",
            "assert remove_even(\"program\")==(\"porm\")",
            "assert remove_even(\"language\")==(\"lnug\")"
        ],
        "def remove_even(s):\r\n    return ''.join([c for c in s if int(ord(c)%2)])"
    ],
    [
        [
            "assert hamming_Distance(4,8) == 2",
            "assert hamming_Distance(2,4) == 2",
            "assert hamming_Distance(1,2) == 2"
        ],
        "def hamming_Distance(x,y): \r\n    count = 0\r\n    xor = x ^ y\r\n    while (xor != 0): \r\n        count += 1\r\n        xor = xor & (xor + 1)\r\n    return count"
    ],
    [
        [
            "assert count(\"abcc\",\"c\") == 2",
            "assert count(\"ababca\",\"a\") == 3",
            "assert count(\"mnmm0pm\",\"m\") == 4"
        ],
        "def count(string,char):\r\n    count = 0\r\n    for i in range(len(string)):\r\n        if(string[i] == char):\r\n            count = count + 1\r\n    return count"
    ],
    [
        [
            "assert inversion_elements((7, 8, 9, 1, 10, 7)) == (-8, -9, -10, -2, -11, -8)",
            "assert inversion_elements((2, 4, 5, 6, 1, 7)) == (-3, -5, -6, -7, -2, -8)",
            "assert inversion_elements((8, 9, 11, 14, 12, 13)) == (-9, -10, -12, -15, -13, -14)"
        ],
        "def inversion_elements(test_tup):\r\n  res = tuple(sorted(test_tup)[:-1])\r\n  return (res)"
    ],
    [
        [
            "assert concatenate_elements((\"DSP \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"UTS\")) == ('DSP IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL UTS')",
            "assert concatenate_elements((\"RES \", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"QESR\")) == ('RES IS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL QESR')",
            "assert concatenate_elements((\"MSAM\", \"IS \", \"BEST \", \"FOR \", \"ALL \", \"SKD\")) == ('MSAMIS ', 'IS BEST ', 'BEST FOR ', 'FOR ALL ', 'ALL SKD')"
        ],
        "def concatenate_elements(test_tup):\r\n  res = tuple(ele1 + ele2 for ele1, ele2 in test_tup)\r\n  return (res)"
    ],
    [
        [
            "assert find_longest_repeating_subseq(\"AABEBCDD\") == 3",
            "assert find_longest_repeating_subseq(\"aabb\") == 2",
            "assert find_longest_repeating_subseq(\"aab\") == 1"
        ],
        "def find_longest_repeating_subseq(str1): \r\n\tn = len(str1) \r\n\tdp = [[0 for i in range(n+1)] for j in range(n+1)] \r\n\tres = 0\r\n\tfor i in range(1, n): \r\n\t\tfor j in range(1, n): \r\n\t\t\tif (str1[i] == str1[j] and dp[i][j] != 0): \r\n\t\t\t\tdp[i + 1][j + 1] = dp[i][j] + 1\r\n\t\t\telif (str1[i] != str1[j] and dp[i][j] == 0): \r\n\t\t\t\tdp[i + 1][j + 1] = 1\r\n\t\t\telse: \r\n\t\t\t\tdp[i + 1][j + 1] = max(dp[i][j], \r\n\t\t\t\t\t\t\t\t\tdp[i + 1][j], \r\n\t\t\t\t\t\t\t\t\tdp[i][j + 1]) \r\n\t\t\t\tres = max(res, dp[i + 1][j + 1]) \r\n\treturn res"
    ],
    [
        [
            "assert is_decimal('123.11') == True",
            "assert is_decimal('0.21') == True",
            "assert is_decimal('123.1214') == False"
        ],
        "import re \r\ndef is_decimal(num): \r\n    dnumre = re.compile(r\"\"\"^[0-9]+(\\.[0-9]{1,2})?$\"\"\") \r\n    result = dnumre.search(num) \r\n    return bool(result)"
    ],
    [
        [
            "assert heap_replace( [25, 44, 68, 21, 39, 23, 89],21)==[21, 25, 23, 44, 39, 68, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],110)== [23, 25, 68, 44, 39, 110, 89]",
            "assert heap_replace([25, 44, 68, 21, 39, 23, 89],500)==[23, 25, 68, 44, 39, 500, 89]"
        ],
        "def heap_replace(heap, new_val): \r\n    import heapq \r\n    heap.remove(new_val) \r\n    heapq.heapify(heap) \r\n    heapq.heappush(heap, new_val) \r\n    return heap"
    ],
    [
        [
            "assert is_allowed_specific_char(\"ABCDEFabcdef123450\") == True",
            "assert is_allowed_specific_char(\"*&%@#!}{\") == False",
            "assert is_allowed_specific_char(\"HELLOhowareyou98765\") == True"
        ],
        "import re \r\ndef is_allowed_specific_char(string): \r\n\tregex = '[a-z0-9]'\r\n\tif(re.search(regex, string)): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    ],
    [
        [
            "assert count_Num(2) == 1",
            "assert count_Num(3) == 2",
            "assert count_Num(1) == 1"
        ],
        "def count_Num(n): \r\n    cnt = 0; \r\n    while (n != 0): \r\n        cnt += n & 1; \r\n        n = n >> 1; \r\n    return cnt;"
    ],
    [
        [
            "assert fourth_Power_Sum(2) == 17",
            "assert fourth_Power_Sum(4) == 354",
            "assert fourth_Power_Sum(6) == 2275"
        ],
        "def fourth_Power_Sum(n): \r\n    sm = 0 \r\n    for i in range(1,n+1): \r\n        sm = sm + (i*i*i*i) \r\n    return sm"
    ],
    [
        [
            "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
            "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
            "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        ],
        "def concatenate_strings(test_tup1, test_tup2):\r\n  res = tuple(ele1 + ' ' + ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"
    ],
    [
        [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
        ],
        "def degree_radian(radians):\r\n    degrees = radians * 180 / math.pi\r\n    return degrees"
    ],
    [
        [
            "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
            "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
            "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "def decode_list(l):\r\n    res = []\r\n    for sub in l:\r\n        if isinstance(sub, list):\r\n            for i in range(sub[0]):\r\n                res.append(sub[1])\r\n        else:\r\n            res.append(sub)\r\n    return (res)"
    ],
    [
        [
            "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
            "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
            "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
        ],
        "def check_subset_list(test_list1, test_list2):\r\n  res = set(test_list1).issubset(set(test_list2))\r\n  return (res)"
    ],
    [
        [
            "assert first_Repeated_Char(\"Google\") == \"o\"",
            "assert first_Repeated_Char(\"data\") == \"a\"",
            "assert first_Repeated_Char(\"python\") == '\\0'"
        ],
        "def first_Repeated_Char(str1):\r\n    for index,c in enumerate(str1):\r\n        if str1[:index+1].count(c) > 1:\r\n            return c \r\n            break\r\n            return True\r\n            break"
    ],
    [
        [
            "assert min_Operations(2,4) == 1",
            "assert min_Operations(4,10) == 4",
            "assert min_Operations(1,4) == 3"
        ],
        "def min_Operations(a,b): \r\n    return abs(a-b)"
    ],
    [
        [
            "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
            "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
            "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
        ],
        "def extract_min_max(test_tup, K):\r\n  res = sorted(test_tup)[:K] + sorted(test_tup)[-K:]\r\n  return (min(res), max(res))"
    ],
    [
        [
            "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
            "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
            "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
        ],
        "import re\r\ndef replace_max_specialchar(text,n):\r\n  return (re.sub('[ ,.]{2,}', ':', text, n))"
    ],
    [
        [
            "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
            "assert first_even([2, 3, 4]) == 2",
            "assert first_even([5, 6, 7]) == 6"
        ],
        "def first_even(nums):\r\n  first_even = next((el for el in nums if el%2==0),-1)\r\n  return first_even"
    ],
    [
        [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "def check_type(test_tup):\r\n  res = all(isinstance(el, int) for el in test_tup) \r\n  return (res)"
    ],
    [
        [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
        ],
        "def is_majority(arr, n, ele): \r\n    for i in range(n): \r\n        if (arr[i] == ele): \r\n            break\r\n    count = 1\r\n    for j in range(i + 1, n): \r\n        if (arr[j] == ele): \r\n            count += 1\r\n    if (count > n // 2): \r\n        return True\n\n### Instruction:\nWrite a function to find the nth super ugly number from a given prime list of size k using heap queue algorithm.\n\n### Test Case:\nassert nth_super_ugly_number(12,[2,7,13,19]) == 32\r\n\n### Response:\nimport heapq\r\ndef nth_super_ugly_number(n, primes):\r\n    uglies = [1]\r\n    def gen(prime):\r\n        for ugly in uglies:\r\n            yield ugly * prime\r\n    merged = heapq.merge(*map(gen, primes))\r\n    while len(uglies) < n:\r\n        ugly = next(merged)\r\n        if ugly != uglies[-1]:\r\n            uglies.append(ugly)\r\n    return uglies[-1]"
    ],
    [
        [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "def count_Set_Bits(n): \r\n    n |= n >> 1 \r\n    n |= n >> 2 \r\n    n |= n >> 4 \r\n    n |= n >> 8 \r\n    n |= n >> 16 \r\n    n |= n >> 32 \r\n    return (n == 0) << 32;"
    ],
    [
        [
            "assert find_Min([1,2,3,4,5],0,4) == 1",
            "assert find_Min([4,6,8],0,2) == 4",
            "assert find_Min([2,3,5,7,9],0,4) == 2"
        ],
        "def find_Min(arr,start,end): \r\n    if (start == end): \r\n        return arr[start] \r\n    if (end == start + 1): \r\n        return min(arr[start],arr[end]) \r\n    if (arr[start] <= arr[start + 1]): \r\n        return find_Min(arr,start,end-1) \r\n    return find_Min(arr,start+1,end)"
    ],
    [
        [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'"
        ],
        "def odd_values_string(str1):\r\n    return ''.join([str1[i] for i in range(len(str1)) if i % 2 == 0])"
    ],
    [
        [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "def min_of_three(num1,num2,num3): \r\n    if (num1 <= num2) and (num1 <= num3):\r\n       lnum = num1\r\n    elif (num2 <= num1) and (num2 <= num3):\r\n       lnum = num2\r\n    else:\r\n       lnum = num3\r\n    return lnum"
    ],
    [
        [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "def all_Bits_Set_In_The_Given_Range(n,l,r): \r\n    num = ((1 << r) - 1) ^ ((1 << (l - 1)) - 1) \r\n    new_num = n & num \r\n    if (num == new_num): \r\n        return True\r\n    return False"
    ],
    [
        [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "def re_arrange_array(arr, n): \r\n\tneg = [0 for i in range(n)] \r\n\tpos = [0 for i in range(n)] \r\n\tfor i in range(n): \r\n\t\tif (arr[i] < 0): \r\n\t\t\tneg[i] = arr[i] \r\n\t\telse: \r\n\t\t\tpos[i] = arr[i] \r\n\tfor i in range(n): \r\n\t\tif (neg[i] != 0): \r\n\t\t\tarr[i] = neg[i] \r\n\tfor i in range(n): \r\n\t\tif (pos[i] != 0): \r\n\t\t\tarr[i] = pos[i] \r\n\treturn arr"
    ],
    [
        [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "def replace_blank(string,char):\r\n  return (string.replace(\" \",'{}{}'.format(char,char)))"
    ],
    [
        [
            "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
            "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
            "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
        ],
        "def max_sum(array, n):\r\n    for i in range(1, n):\r\n        for j in range(len(array[i])):\r\n            array[i][j] += max(array[i - 1][j],\r\n                                array[i - 1][j - 1])\r\n    return array[n - 1][n - 1]"
    ],
    [
        [
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
        ],
        "def larg_nnum(nums,n):\r\n    x = sorted(nums, reverse=True)\r\n    return x[:n]"
    ],
    [
        [
            "assert lateralsuface_cylinder(10,5)==314.15000000000003",
            "assert lateralsuface_cylinder(4,5)==125.66000000000001",
            "assert lateralsuface_cylinder(4,10)==251.32000000000002"
        ],
        "import math\r\ndef lateralsuface_cylinder(r,h):\r\n  return 2*math.pi*r*h"
    ],
    [
        [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "def volume_cube(side):\r\n  volume=side*side*side\r\n  return volume"
    ],
    [
        [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "def even_bit_set_number(n):\r\n    n |= n >> 1\r\n    n |= n >> 2\r\n    n |= n >> 4\r\n    n |= n >> 8\r\n    n |= n >> 16\r\n    return (n >> 1) ^ 1"
    ],
    [
        [
            "assert No_of_Triangle(4,2) == 7",
            "assert No_of_Triangle(4,3) == 3",
            "assert No_of_Triangle(1,3) == -1"
        ],
        "def No_of_Triangle(n,s): \r\n    no = 0\r\n    no = (s * (s + 1)) // 2\r\n    current = n\r\n    while current <= s: \r\n        no += current \r\n        current += 1\r\n    return no"
    ],
    [
        [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "from collections import Counter \r\ndef check_occurences(test_list):\r\n  res = Counter(test_list) \r\n  return (res)"
    ],
    [
        [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "def number_of_substrings(s): \r\n    n = len(s) \r\n    res = n * (n + 1) //2\r\n    return res"
    ],
    [
        [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "def get_total_number_of_sequences(n, m): \r\n\tdp = [[0 for i in range(m + 1)] for j in range(n + 1)] \r\n\tdp[1][1] = 1; \r\n\tfor i in range(1, n + 1): \r\n\t\tfor j in range(1, m + 1): \r\n\t\t\tif j >= 2 * dp[i - 1][1]: \r\n\t\t\t\tdp[i][j] = dp[i - 1][j] + dp[i - 1][j - 2] \r\n\treturn dp[n][m]"
    ],
    [
        [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "def replace_list(l1,l2):\r\n  l1=l1[:-1]\r\n  l1+=l2\r\n  return (l1)"
    ],
    [
        [
            "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
            "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
            "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
        ],
        "def array_3d(m,n,o):\r\n    array_3d = [[['*' for i in range(o)] for j in range(n)] for k in range(m)]\r\n    return array_3d"
    ],
    [
        [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "def count_charac(str1):\r\n    count = 0\r\n    for i in range(len(str1)):\r\n        count = count + 1\r\n    return count"
    ],
    [
        [
            "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
            "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
            "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        ],
        "def sort_on_occurence(test_list):\r\n  res = [(x, y) for x, y in test_list]\r\n  res.sort(key=lambda x: (res.count(x), x))\r\n  return (res)"
    ],
    [
        [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "def next_Perfect_Square(n): \r\n    i = int(n ** 0.5) \r\n    while True: \r\n        i += 1\r\n        if (i * i > n): \r\n            break\r\n    return i * i"
    ],
    [
        [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
        ],
        "def max_sum(arr, n): \r\n\tsum = [0 for k in range(n)] \r\n\tsum[0] = arr[0] \r\n\tfor i in range(1, n): \r\n\t\tsum[i] = max(sum[i - 1] + arr[i], arr[i]) \r\n\treturn max(sum)"
    ],
    [
        [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
        ],
        "import math\r\ndef babylonian_squareroot(n):\r\n  if n<0:\r\n    return \"Undefined for negative numbers\"\r\n  guess=n\r\n  while True:\r\n    better_guess=(guess+n/guess)/2\r\n    if math.isclose(better_guess,guess,rel_tol=1e-9):\r\n      break\r\n    guess=better_guess\r\n  return guess"
    ],
    [
        [
            "assert lps(\"TENS FOR TENS\") == 5 ",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
        ],
        "def lps(s): \r\n    n = len(s) \r\n    dp = [[0 for i in range(n)] for j in range(n)] \r\n    for i in range(n): \r\n        dp[i][i] = 1\r\n    for cl in range(2, n+1): \r\n        for i in range(n-cl+1): \r\n            j = i+cl-1\r\n            if s[i] == s[j] and cl == 2: \r\n                dp[i][j] = 2\r\n            elif s[i] == s[j]: \r\n                dp[i][j] = dp[i+1][j-1] + 2\r\n            else: \r\n                dp[i][j] = max(dp[i][j-1], \r\n                                dp[i+1][j]) \r\n    return dp[0][n-1]"
    ],
    [
        [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
        ],
        "def harmonic_sum(n):\r\n  if n < 2:\r\n    return 1\r\n  else:\r\n    return 1 / n + (harmonic_sum(n - 1))"
    ],
    [
        [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "def intersection_array(arr1,arr2):\r\n  result = list(filter(lambda x: x in arr2, arr1)) \r\n  return result"
    ],
    [
        [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "def count_X(test_tup, K):\r\n  res = test_tup.count(K)\r\n  return (res)"
    ],
    [
        [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
        ],
        "def insert_element(list1,el):\r\n    result=[]\r\n    for ele in list1:\r\n        result.append(el)\r\r\n        result.append(ele)\r\r\n    return result"
    ],
    [
        [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "import cmath\r\ndef convert(x):\r\n  r = abs(x)\r\n  theta = cmath.phase(x) * (180/math.pi)\r\n  return (r, theta)"
    ],
    [
        [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "def count_integer(list): \r\n    int_count = 0\r\n    for i in list: \r\n        if isinstance(i, int): \r\n            int_count += 1\r\n    return int_count"
    ],
    [
        [
            "assert words_ae(\"python programe\")==['ame']",
            "assert words_ae(\"python programe language\")==['ame','anguage']",
            "assert words_ae(\"assert statement\")==['assert', 'atement']"
        ],
        "import re\r\ndef words_ae(str1):\r\n  return (re.findall(r'\\ba\\w*\\b',str1))"
    ],
    [
        [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "def combinations_colors(colors,n):\r\n    return [list(combinations(colors,i)) for i in range(1,n+1)]"
    ],
    [
        [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "def count_Primes_nums(n): \r\n    if (n < 2): \r\n        return 0; \r\n    prime = [False * n + 1 for i in range(n + 1)]; \r\n    for i in range(2, n + 1): \r\n        if (prime[i] == True): \r\n            j = i * i; \r\n            while (j <= n): \r\n                prime[j] = False; \r\n                j += i; \r\n    cnt = 0; \r\n    for i in range(2, n + 1): \r\n        if (prime[i]): \r\n            cnt += 1; \r\n    return cnt;"
    ],
    [
        [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "def swap_numbers(x,y):\r\n  temp = x\r\n  x = y\r\n  y = temp\r\n  return x,y"
    ],
    [
        [
            "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
            "assert count_odd([10,15,14,13,-18,12,-20])==2",
            "assert count_odd([1, 2, 4, 8, 9])==2"
        ],
        "def count_odd(list1):\r\n  result = len(list(filter(lambda x: (x%2!=0),list1)))\r\n  return result"
    ],
    [
        [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "def maximize_elements(test_list1, test_list2):\r\n  res = [(max(x[0], y[0]), max(x[1], y[1]))\r\n   for x, y in zip(test_list1, test_list2)]\r\n  return (res)"
    ],
    [
        [
            "assert newman_prime(3) == 7 ",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "def newman_prime(n): \r\n\tprime = [True] * 256 \r\n\tp = 2\r\n\twhile (p * p <= 255): \r\n\t\tif (prime[p] == True): \r\n\t\t\tfor i in range(p * p, 256, p): \r\n\t\t\t\tprime[i] = False\r\n\t\tp += 1\r\n\tNWSPrime[0] = 2\r\n\tNWSPrime[1] = 3\r\n\tNWSPrime[2] = 7\r\n\tfor i in range(3, n + 1): \r\n\t\tx = NWSPrime[i - 1] \r\n\t\ty = NWSPrime[i - 2] + NWSPrime[i - 3] \r\n\t\tNWSPrime[i] = x * y \r\n\treturn NWSPrime[n]"
    ],
    [
        [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "def division_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 // ele2 for ele1, ele2 in zip(test_tup1, test_tup2)) \r\n  return (res)"
    ],
    [
        [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "def split_two_parts(nums, m):\r\n    return nums[:m], nums[m:]"
    ],
    [
        [
            "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
            "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
            "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
        ],
        "def merge_dict(dict1,dict2):\r\n  result = dict1.copy()\r\n  result.update(dict2)\r\n  return result"
    ],
    [
        [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "def dog_age(human_age):\r\n  dog_age = human_age * 7\r\n  return dog_age"
    ],
    [
        [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
        ],
        "def list_split(l, n):\r\n    return [list(ele) for ele in zip(*[iter(l)] * n)]"
    ],
    [
        [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "def lateralsurface_cube(a):\r\n  lsa = 6*a*a\r\n  return lsa"
    ],
    [
        [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "def square_Sum(n): \r\n    sum = 0   \r\n    for i in range(0,n) : \r\n        sum += (2*i+1)*(2*i+1) \r\n    return sum"
    ],
    [
        [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "def find_star_num(n): \r\n    if n == 0: \r\n        return 0\r\n    if n == 1: \r\n        return 1\r\n    if n == 2: \r\n        return 5\r\n    if n == 3: \r\n        return 13\r\n    if n == 4: \r\n        return 34\r\n    if n == 5: \r\n        return 85\r\n    if n == 6: \r\n        return 247\r\n    if n == 7: \r\n        return 718\r\n    if n == 8: \r\n        return 2199\r\n    if n == 9: \r\n        return 6561\r\n    if n == 10: \r\n        return 17977\r\n    if n == 11: \r\n        return 50916\r\n    if n == 12: \r\n        return 156163\r\n    if n == 13: \r\n        return 462689\r\n    if n == 14: \r\n        return 1379057\r\n    if n == 15: \r\n        return 4363934\r\n    if n == 16: \r\n        return 14070769\r\n    if n == 17: \r\n        return 44884927\r\n    if n == 18: \r\n        return 147196891\r\n    if n == 19: \r\n        return 476151906\r\n    if n == 20: \r\n        return 1539318796\r\n    if n == 21: \r\n        return 5071629261\r\n    if n == 22: \r\n        return 15749117917\r\n    if n == 23: \r\n        return 52875363191\r\n    if n == 24: \r\n        return 163196080791\r\n    if n == 25: \r\n        return 554790929589\r\n    if n == 26: \r\n        return 1792786796619\r\n    if n == 27: \r\n        return 6027630795991\r\n    if n == 28: \r\n        return 20596092959917\r\n    if n == 29: \r\n        return 71793607959919\r\n    if n == 30: \r\n\t\t\treturn 245961909599197\r\n    if n == 31: \r\n\t\t\treturn 837936079599199\r\n    if n == 32: \r\n\t\t\treturn 2879360795991997\r\n    if n == 33: \r\n\t\t\treturn 103793607959919997\r\n    if n == 34: \r\n\t\t\treturn 357936079599199977\r\n    if n == 35: \r\n\t\t\treturn 11679360795991999977\r\n    if n == 36: \r\n\t\t\treturn 426793607959919999977\r\n    if n == 37: \r\n\t\t\treturn 13326936079599199999977\r\n    return -1"
    ],
    [
        [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "def ascii_value(ch):\r\n  return ord(ch)"
    ],
    [
        [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
        ],
        "def sum_even_and_even_index(arr,n): \r\n    temp = 0\r\n    for i in range(0,n,2) : \r\n        if (arr[i]%2==0) : \r\n            temp += arr[i] \r\n    return temp"
    ],
    [
        [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "def even_Power_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j*j*j*j); \r\n    return sum;"
    ],
    [
        [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "def rear_extract(recs): \r\n    res = [rec[2] for rec in recs] \r\n    return (res)"
    ],
    [
        [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "def substract_elements(test_tup1, test_tup2):\r\n  res = tuple(ele1 - ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"
    ],
    [
        [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "def even_binomial_Coeff_Sum(n) : \r\n    res = 0\r\n    for i in range(0, n + 1) : \r\n        c = binomial_coeff(n, i) \r\n        if (i % 2 == 0) : \r\n            res = res + c \r\n    return res"
    ],
    [
        [
            "assert get_Position([2,5,4],3,2) == 2",
            "assert get_Position([4,3],2,2) == 2",
            "assert get_Position([1,2,3,4],4,1) == 4"
        ],
        "def get_Position(arr,n,k): \r\n    for i in range(k-1, -1, -1): \r\n        if arr[i] != i + 1: \r\n            return i"
    ],
    [
        [
            "assert volume_cylinder(10,5)==1570.7500000000002",
            "assert volume_cylinder(4,5)==251.32000000000002",
            "assert volume_cylinder(4,10)==502.64000000000004"
        ],
        "import math\r\ndef volume_cylinder(r,h):\r\n  volume=math.pi*(r*r)*h\r\n  return volume"
    ],
    [
        [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "def dict_filter(dict, min_height):\r\n    new_dict = {k:v for k,v in dict.items() if v >= min_height}\r\n    return new_dict"
    ],
    [
        [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "def count_first_elements(test_tup):\r\n  res = 0\r\n  for ele in test_tup:\r\n    if isinstance(ele, int):\r\n      res = res + 1\r\n  return (res)"
    ],
    [
        [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "def is_num_decagonal(n): \r\n\tdecagonal = 0 \r\n\twhile (n > 0): \r\n\t\tdecagonal += n * (6 * n - 2) \r\n\t\tn -= 1\r\n\treturn decagonal"
    ],
    [
        [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "def sequential_search(arr,search_key):\r\n    for i, ele in enumerate(arr):\r\n        if ele == search_key:\r\n            return True, i\r\n    return False, -1"
    ],
    [
        [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "def all_unique(list1):\r\n    temp = list1[:]\r\n    for i in range(len(list1)):\r\n        if list1[i] in temp[i+1:]:\r\n            return False\r\n        else:\r\n            return True"
    ],
    [
        [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "def sub_list(li1,li2):\r\n  result = map(lambda x, y: x - y, li1, li2)\r\n  return list(result)"
    ],
    [
        [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "No code block found."
    ],
    [
        [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "def check_element(list1,string):\r\n  return (list1[0] == string)"
    ],
    [
        [
            "assert text_match_two_three(\"ac\")==('Not matched!')",
            "assert text_match_two_three(\"dc\")==('Not matched!')",
            "assert text_match_two_three(\"abbbba\")==('Found a match!')"
        ],
        "import re\r\ndef text_match_two_three(text):\r\n        patterns = 'ab{1,2,3}$'\r\n        if re.search(patterns,  text):\r\n                return ('Matched!')\r\n        else:\r\n                return ('Not matched!')"
    ],
    [
        [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "def max_sub_array_sum_repeated(arr, n, k): \r\n\tarr = [0] * (n * k) \r\n\tfor i in range(0, n): \r\n\t\tarr[i * k] = arr[i] \r\n\tfor i in range(n * 1, n * k): \r\n\t\tarr[i] = arr[i - 1] + arr[i] \r\n\tmax_so_far = arr[0] \r\n\tmax_ending_here = arr[0] \r\n\tfor i in range(1, n * k): \r\n\t\tmax_ending_here = max(arr[i], max_ending_here + arr[i]) \r\n\t\tmax_so_far = max(max_so_far, max_ending_here) \r\n\treturn max_so_far"
    ],
    [
        [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "def square_Sum(n): \r\n    sum = 0; \r\n    for i in range(1,n + 1): \r\n        j = 2*i; \r\n        sum = sum + (j*j); \r\n    return sum;"
    ],
    [
        [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
        ],
        "def modular_inverse(arr, p, n): \r\n    for i in range(n): \r\n        for j in range(p): \r\n            if (arr[i] * j) % p == 1: \r\n                return 1"
    ],
    [
        [
            "assert odd_Days(100) == 5",
            "assert odd_Days(50) ==6",
            "assert odd_Days(75) == 2"
        ],
        "def odd_Days(year):\r\n    if (year % 4 == 0 and year % 100 == 0):\r\n        return 4\r\n    elif (year % 4 == 0 and year % 100 != 0 and year % 400 == 0):\r\n        return 2\r\n    else:\r\n        return 1"
    ],
    [
        [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "def max_length(lists):\r\n    max_len = 0\r\n    result = []\r\n    for l in lists:\r\n        if len(l) > max_len:\r\n            result = l\r\n            max_len = len(l)\r\n    return max_len, result"
    ],
    [
        [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "def count_no_of_ways(n, k): \r\n\tif (n == 0): \r\n\t\treturn 0; \r\n\tif (n == 1): \r\n\t\treturn k; \r\n\treturn count_no_of_ways(n - 1, k) + count_no_of_ways(n - 2, k) + count_no_of_ways(n - 3, k);"
    ],
    [
        [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "def find(a,b):\r\n  if b == 0:\r\n    return -1\r\n  return a // b"
    ],
    [
        [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "import math\r\ndef otherside_rightangle(a,b):\r\n  c=math.sqrt(a**2+b**2)\r\n  return c"
    ],
    [
        [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "def max_val(list1):\r\n    return max(list1)"
    ],
    [
        [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "def sum_div(n):\r\n    n = abs(n)\r\n    sum = 0\r\n    for i in range(1,n+1):\r\n        if n%i == 0:\r\n            sum = sum + i\r\n    return sum"
    ],
    [
        [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
        ],
        "def get_Inv_Count(arr,n): \r\n\tinv_count = 0\r\n\tfor i in range(n): \r\n\t\tfor j in range(i + 1, n): \r\n\t\t\tif (arr[i] > arr[j]): \r\n\t\t\t\tinv_count += 1\r\n\treturn inv_count"
    ],
    [
        [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "def flatten_list(nested_list):\r\n    return [item for sublist in nested_list for item in sublist]"
    ],
    [
        [
            "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
            "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
            "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
        ],
        "def intersection_nested_lists(test_tup):\r\n  res = [list(set(l) & set(test_tup[0])) for l in test_tup[1]]\r\n  return (res)"
    ],
    [
        [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "def max_aggregate(lst):\r\n    d = {}\r\n    for ele in lst:\r\n        if ele[0] in d:\r\n            d[ele[0]] += ele[1]\r\n        else:\r\n            d[ele[0]] = ele[1]\r\n    return (max(d, key = d.get))"
    ],
    [
        [
            "assert count_binary_seq(1) == 2.0",
            "assert count_binary_seq(2) == 6.0",
            "assert count_binary_seq(3) == 20.0"
        ],
        "def count_binary_seq(n): \r\n    if (n == 0): \r\n        return 0.5\r\n    if (n == 1): \r\n        return 2.0\r\n    return (count_binary_seq(n - 1) * 2.0)"
    ],
    [
        [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "def dict_depth(d):\r\n    if not isinstance(d, dict):\r\n        return 0\r\n    max_depth = 0\r\n    for k in d:\r\n        max_depth = max(max_depth, dict_depth(d[k]))\r\n    return max_depth"
    ],
    [
        [
            "assert set_Bit_Number(6) == 4",
            "assert set_Bit_Number(10) == 8",
            "assert set_Bit_Number(18) == 16"
        ],
        "def set_Bit_Number(n): \r\n    x = n & (-n) \r\n    if (x == 0): \r\n        return 0\r\n    c = 0\r\n    while (n != c): \r\n        n = n & (n - 1)\r\n        c = c + 1\r\n    return c"
    ],
    [
        [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
        ],
        "def solve(arr,n):  \r\n    inv_type1 = [0 for i in range(n)]  \r\n    inv_type2 = [0 for i in range(n)]  \r\n    for i in range(n): \r\n        if (arr[i] == 0): \r\n            inv_type1[i] = 1 \r\n        else: \r\n            inv_type2[i] = 1\r\n    for i in range(n):  \r\n        if (inv_type1[i] != 0 and \r\n            inv_type2[n - 1 - i] != 0): \r\n            return True\r\n    return False"
    ],
    [
        [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "def find_Element(arr, queries, d, n): \r\n\tfor i in range(len(queries)): \r\n\t\tx = queries[i][0] \r\n\t\ty = queries[i][1] \r\n\t\td = (d + y) % n \r\n\t\tprint(arr[d])"
    ],
    [
        [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "import re\r\ndef start_withp(text):\r\n for s in text:\r\n    for word in s.split():\r\n        if word.startswith('p') or word.startswith('P'):\r\n            return (s)"
    ],
    [
        [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "def max_sum_increasing_subseq(arr, n, i, j): \r\n\tdp = [0 for i in range(n)] \r\n\tdp[i] = arr[i] \r\n\tfor k in range(i + 1, j): \r\n\t\tdp[k] = max(dp[k], dp[k - 1] + arr[k]) \r\n\treturn max(dp)"
    ],
    [
        [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "def colon_tuplex(tuplex1, *args):\r\n  tuplex2 = list(tuplex1)\r\n  tuplex2.extend(list(args))\r\n  return tuple(tuplex2)"
    ],
    [
        [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "def large_product(num1,num2,n):\r\n    result = [a*b for a, b in zip(num1, num2)]\r\n    result.sort(reverse=True)\r\n    return result[:n]"
    ],
    [
        [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "def maximum(x, y):\r\n    if x > y:\r\n        return x\r\n    return y"
    ],
    [
        [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "def string_to_tuple(string):\r\n  res = tuple(string)\r\n  return (res)"
    ],
    [
        [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "import math \r\ndef get_pos_of_left_most_set_bit(n): \r\n    return int(math.log2(n&-n)+1)   \r\ndef set_left_most_unset_bit(n): \r\n    if (n == 0): \r\n        return 1\r\n    if ((n & (n + 1)) == 0):     \r\n        return n \r\n    pos = get_pos_of_left_most_set_bit(~n)      \r\n    return ((1 << (pos - 1)) | n)"
    ],
    [
        [
            "assert volume_cone(5,12)==314.15926535897927",
            "assert volume_cone(10,15)==1570.7963267948965",
            "assert volume_cone(19,17)==6426.651371693521"
        ],
        "import math\r\ndef volume_cone(r,h):\r\n  volume = math.pi*(r**2)*(h/3)\r\n  return volume"
    ],
    [
        [
            "assert pos_nos([-1,-2,1,2]) == 1,2",
            "assert pos_nos([3,4,-5]) == 3,4",
            "assert pos_nos([-2,-3,1]) == 1"
        ],
        "def pos_nos(nums):\r\n    for n in nums:\r\n        if n > 0:\r\n            print(n, end=' ')"
    ],
    [
        [
            "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
            "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
            "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
        ],
        "def max_sum_rectangular_grid(A, n): \r\n\tsum = [0 for k in range(n)] \r\n\tsum[0] = A[0][0] \r\n\tfor i in range(1): \r\n\t\tsum[i] = A[0][i] + sum[i - 1] \r\n\tfor i in range(1, n): \r\n\t\tfor j in range(n): \r\n\t\t\twith_i = A[i][j] + sum[j] \r\n\t\t\twithout_i = max(sum[j - 1], A[i][j]) \r\n\t\t\tsum[j] = max(with_i, without_i) \r\n\treturn sum[n - 1]"
    ],
    [
        [
            "assert find_Max_Len_Even(\"python language\") == \"language\"",
            "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
            "assert find_Max_Len_Even(\"eve\") == \"-1\""
        ],
        "def find_Max_Len_Even(test_str):\r\n  temp = [ele for ele in test_str.split() if len(ele)%2==0]\r\n  res = max(temp, key = len)\r\n  return (res)"
    ],
    [
        [
            "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
            "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
            "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
        ],
        "def find_last_occurrence(arr, n, x): \r\n    low = 0\r\n    high = n - 1\r\n    res = -1\r\n    while (low <= high): \r\n        mid = (low + high) // 2 \r\n        if arr[mid] > x: \r\n            high = mid - 1\r\n        elif arr[mid] < x: \r\n            low = mid + 1\r\n        else: \r\n            res = mid \r\n            low = mid + 1\r\n    return res"
    ],
    [
        [
            "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
            "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
            "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "def modified_encode(l):\r\n    run_list = []\r\n    run_it = [k for k, group in groupby(l)]\r\n    run_list.append(run_it)\r\n    return run_list"
    ],
    [
        [
            "assert max_volume(8) == 18",
            "assert max_volume(4) == 2",
            "assert max_volume(1) == 0"
        ],
        "def max_volume(a):\r\n    x = a // 6\r\n    return x * (a - x) * (a - 2 * x) // 3"
    ],
    [
        [
            "assert find_long_word('Please move back to strem') == ['strem']",
            "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
            "assert find_long_word('Streaming Media Player') == ['Media']"
        ],
        "import re \r\ndef find_long_word(text): \r\n\tpattern = r'\\b\\w{5}\\b'\r\n\treturn (re.findall(pattern, text))"
    ],
    [
        [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
        ],
        "def sum_squared(n):\r\n  return (n * (n + 1) * (2 * n + 1)) // 6 \r\ndef sum_difference(n):\r\n  return sum_squared(n) - (sum(range(1, n + 1)))**2"
    ],
    [
        [
            "assert find_demlo(\"111111\") == '12345654321'",
            "assert find_demlo(\"1111\") == '1234321'",
            "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
        ],
        "def find_demlo(num):\r\n    n = len(num)\r\n    odd = 0\r\n    even = 0\r\n    for i in range(n):\r\n        if num[i] == '1':\r\n            odd += 1\r\n        else:\r\n            even += 1\r\n    demlo = even * (even - 1) * 11 + odd * (odd - 1) * 10 + even\r\n    return demlo"
    ],
    [
        [
            "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
            "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
            "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
        ],
        "def position_min(num_list):\r\n    min_val = min(num_list)\r\n    return [index for index, value in enumerate(num_list) if value == min_val]"
    ],
    [
        [
            "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
            "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
            "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
        ],
        "def re_arrange(arr, n): \r\n\tresult = [0 for i in range(n)] \r\n\tindex = 0\r\n\tfor i in range(n): \r\n\t\tif (i % 2 == 0): \r\n\t\t\tresult[index] = arr[i] \r\n\t\telse: \r\n\t\t\tresult[index] = -arr[i] \r\n\t\tindex += 1\r\n\treturn result"
    ],
    [
        [
            "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
            "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
            "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
        ],
        "def sum_of_alternates(tup):\r\n  res = [sum(tup[i] for i in [0, 2, 4]) , sum(tup[i] for i in [1, 3])]\r\n  return (res[0], res[1])"
    ],
    [
        [
            "assert get_Min_Squares(6) == 3",
            "assert get_Min_Squares(2) == 2",
            "assert get_Min_Squares(4) == 1"
        ],
        "def get_Min_Squares(n): \r\n    sqr_sum = [0 for i in range(n + 1)] \r\n    sqr_sum[0] = 0\r\n    for i in range(1, n + 1): \r\n        j = 1\r\n        while (j*j <= n): \r\n            if (sqr_sum[i - j*j] != 0 and \r\n                sqr_sum[i] == sqr_sum[i - j*j] + j*j): \r\n                sqr_sum[i] = sqr_sum[i] - j*j \r\n            else: \r\n                sqr_sum[i] = sqr_sum[i] + j*j \r\n            j = j + 1\r\n    return sqr_sum[n]"
    ],
    [
        [
            "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
            "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
            "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
        ],
        "from collections import Counter \r\ndef most_occurrences(sentences): \r\n    result = Counter(sentences).most_common(1) \r\n    return result[0][0]"
    ],
    [
        [
            "assert check_isosceles(6,8,12)==False ",
            "assert check_isosceles(6,6,12)==True",
            "assert check_isosceles(6,16,20)==False"
        ],
        "def check_isosceles(a,b,c): \r\n    if (a == b or b == c or a == c): \r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
        ],
        "def rotate_left(list1, m, n):\r\n    result = list1[n - 1 : :] + list1[:n - 1]\r\n    return result"
    ],
    [
        [
            "assert neg_count([-1,-2,3,-4,-5]) == 4",
            "assert neg_count([1,2,3]) == 0",
            "assert neg_count([1,2,-3,-10,20]) == 2"
        ],
        "def neg_count(nums):\r\n    count = 0\r\n    for x in nums:\r\n        if x < 0: count += 1\r\n    return count"
    ],
    [
        [
            "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
            "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
            "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
        ],
        "import re\r\ndef find_char(text):\r\n  return (re.findall(r'\\b\\w{3,5}\\b', text))"
    ],
    [
        [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(4) == 2",
            "assert count_unset_bits(6) == 1"
        ],
        "def count_unset_bits(n):\r\n    cnt = 0\r\n    while (n):\r\n        n &= (n - 1)\r\n        cnt += 1\r\n    return cnt"
    ],
    [
        [
            "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
            "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
            "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
        ],
        "from collections import defaultdict \r\ndef char_frequency(str1):\r\n    freq = defaultdict(int)\r\n    for i in str1:\r\n        freq[i] += 1\r\n    return freq"
    ],
    [
        [
            "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
            "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
            "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        ],
        "def sort_sublist(xs):\r\n    return sorted(xs, key = lambda x: x[1])"
    ],
    [
        [
            "assert check_Validity(1,2,3) == False",
            "assert check_Validity(2,3,5) == False",
            "assert check_Validity(7,10,5) == True"
        ],
        "def check_Validity(a,b,c): \r\n    if a + b > c and b + c > a and a + c > b: \r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert ap_sum(1,5,2)==25",
            "assert ap_sum(2,6,4)==72",
            "assert ap_sum(1,4,5)==34"
        ],
        "def ap_sum(a,l,n):\r\n    d = l - a\r\n    return n*(a + l)//2"
    ],
    [
        [
            "assert check_monthnum(\"February\")==True",
            "assert check_monthnum(\"January\")==False",
            "assert check_monthnum(\"March\")==False"
        ],
        "def check_monthnum(monthname):\r\n  if(monthname==\"February\"):\r\n    return True\r\n  else:\r\n    return False"
    ],
    [
        [
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"  lang  .\")==('Not matched!')"
        ],
        "import re\r\ndef text_match_word(text):\r\n        patterns = r'.*[\\w]+$'\r\n        if re.search(patterns, text):\r\n                return ('Found a match!')"
    ],
    [
        [
            "assert count_Substring_With_Equal_Ends('aba') == 4",
            "assert count_Substring_With_Equal_Ends('abcab') == 7",
            "assert count_Substring_With_Equal_Ends('abc') == 3"
        ],
        "def count_Substring_With_Equal_Ends(s):\r\n    c = 0\r\n    for i in range(len(s)):\r\n        c += 1\r\n    return c"
    ],
    [
        [
            "assert find_Divisor(2,2) == 2",
            "assert find_Divisor(2,5) == 2",
            "assert find_Divisor(5,10) == 2"
        ],
        "import sys \r\ndef find_Divisor(a,b): \r\n    max = -1\r\n    for i in range(a, b + 1): \r\n        for j in range(2, int(i / 2) + 1): \r\n            if (i % j == 0): \r\n                max = j \r\n    return max"
    ],
    [
        [
            "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
            "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
            "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
        ],
        "def sum_three_smallest_nums(nums):\r\n    three_smallest_nums = sorted(nums)[:3]\r\n    return sum(three_smallest_nums)"
    ],
    [
        [
            "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
            "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
            "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
        ],
        "def set_to_tuple(test_tup):\r\n  res = tuple(test_tup)\r\n  return (res)"
    ],
    [
        [
            "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
            "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
            "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
        ],
        "def find_minimum_range(arr):\r\n    temp = [ele for sub in arr for ele in sub]\r\n    temp.sort()\r\n    return temp[1], temp[2]"
    ],
    [
        [
            "assert dig_let(\"python\")==(6,0)",
            "assert dig_let(\"program\")==(7,0)",
            "assert dig_let(\"python3.0\")==(6,2)"
        ],
        "def dig_let(string):\r\n  dig = 0\r\n  let = 0\r\n  for i in range(len(string)):\r\n    if(string[i] >= '0' and string[i] <= '9'):\r\n        dig = dig + 1\r\n    elif(string[i] >= 'a' and string[i] <= 'z'):\r\n        let = let + 1\r\n  return (dig,let)"
    ],
    [
        [
            "assert count_Odd_Squares(5,100) == 8",
            "assert count_Odd_Squares(8,65) == 6",
            "assert count_Odd_Squares(2,5) == 1"
        ],
        "def count_Odd_Squares(start,end): \r\n    odd_Factors = [False for i in range(end+1)] \r\n    odd_Factors[1] = True\r\n    for i in range(start,end+1): \r\n        j = 1\r\n        while (j*j <= i): \r\n            if (i % j == 0): \r\n                odd_Factors[i] = True\r\n                if (j % 2 != 0): \r\n                    odd_Factors[i] = True\r\n            j += 1\r\n    odd_Elements = [el for el in range(start,end+1) if odd_Factors[el] == True] \r\n    return len(odd_Elements)"
    ],
    [
        [
            "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
            "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
            "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        ],
        "def diff_consecutivenums(nums):\r\n    diff_list = []\r\n    for i in range(len(nums)-1):\r\n        diff_list.append(nums[i+1]-nums[i])\r\n    return diff_list"
    ],
    [
        [
            "assert zigzag(4, 3) == 5",
            "assert zigzag(4, 2) == 4",
            "assert zigzag(3, 1) == 1"
        ],
        "def zigzag(n, k): \r\n    if (k == 0 or k == n): \r\n        return 1\r\n    return (zigzag(n - 1, k - 1) +\r\n            zigzag(n - 1, k))"
    ],
    [
        [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
        ],
        "def count_Squares(width,height):\r\n    return (width * height + width + height - 2) // 2"
    ],
    [
        [
            "assert find_ways(4) == 2",
            "assert find_ways(6) == 5",
            "assert find_ways(8) == 14"
        ],
        "def find_ways(n): \r\n\tdp = [0 for i in range(n + 1)] \r\n\tdp[0] = 1\r\n\tfor i in range(1, n): \r\n\t\tfor j in range(i): \r\n\t\t\tdp[i] += dp[j]"
    ],
    [
        [
            "assert check(\"01010101010\") == \"Yes\"",
            "assert check(\"name0\") == \"No\"",
            "assert check(\"101\") == \"Yes\""
        ],
        "def check(string): \r\n    for i in range(0, len(string)): \r\n        if string[i] != '0' and string[i] != '1': \r\n            return (\"No\") \r\n    return (\"Yes\")"
    ],
    [
        [
            "assert minimum_Length(\"mnm\") == 1",
            "assert minimum_Length(\"abcda\") == 3",
            "assert minimum_Length(\"abcb\") == 2"
        ],
        "def minimum_Length(str1):\r\n    mc = -1\r\n    for i in range(len(str1)):\r\n        if str1[i] not in str1[i + 1:]:\r\n            mc = i\r\n        else:\r\n            break\r\n    return (len(str1) - mc - 1)"
    ],
    [
        [
            "assert first_Element([0,1,2,3,4,5],6,1) == 0",
            "assert first_Element([1,2,1,3,4],5,2) == 1",
            "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
        ],
        "def first_Element(arr,n,k): \r\n    for i in range(n): \r\n        count = 0\r\n        for j in range(n): \r\n            if (arr[i] == arr[j]): \r\n                count += 1\r\n        if (count == k): \r\n            return arr[i] \r\n    return -1"
    ],
    [
        [
            "assert unique_Characters('aba') == False",
            "assert unique_Characters('abc') == True",
            "assert unique_Characters('abab') == False"
        ],
        "def unique_Characters(str1):\r\n    dict = {}\r\n    for i in range(len(str1)):\r\n        if str1[i] in dict:\r\n            return False\r\n        else:\r\n            dict[str1[i]] = 1\r\n    return True"
    ],
    [
        [
            "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
            "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
            "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
        ],
        "def remove_column(nested_list, C):\r\n    return [[row[i] for i in range(len(row)) if i != C] for row in nested_list]"
    ],
    [
        [
            "assert tn_ap(1,5,2)==9",
            "assert tn_ap(2,6,4)==22",
            "assert tn_ap(1,4,5)==16"
        ],
        "def tn_ap(a,n,d):\r\n  return a+((n-1)*d)"
    ],
    [
        [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
        ],
        "def count_Rectangles(r): \r\n    if (r <= 0): \r\n        return 0; \r\n    else: \r\n        return r * (r + 1) * (2 * r + 1) / 6"
    ],
    [
        [
            "assert find_angle(47,89)==44",
            "assert find_angle(45,95)==40",
            "assert find_angle(50,40)==90"
        ],
        "def find_angle(a,b):\r\n    return 180-a-b"
    ],
    [
        [
            "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
            "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
            "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
        ],
        "def find_max(test_list):\r\n  res = max([ele[1] for ele in test_list])\r\n  return (res)"
    ],
    [
        [
            "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
            "assert moddiv_list([3,2],[1,4])==[0, 2]",
            "assert moddiv_list([90,120],[50,70])==[40, 50]"
        ],
        "def moddiv_list(nums1,[1, 2, 3)==[0, 1, 0]\nnums1=list(map(lambda x, y: x % y, nums1, [1, 2, 3]))"
    ],
    [
        [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
        ],
        "def Check_Solution(a,b,c): \r\n    if (a == 0): \r\n        return (\"Zero equation\"); \r\n    else: \r\n        discriminant = (b**2) - (4 * a * c); \r\n        if (discriminant > 0): \r\n            root1 = (-b + discriminant**0.5); \r\n            root2 = (-b - discriminant**0.5); \r\n            if (root1 == 2 * root2 or root2 == 2 * root1): \r\n                return (\"Yes\"); \r\n            else: \r\n                return (\"No\"); \r\n        elif (discriminant == 0): \r\n            root = -b / (2 * a); \r\n            if (root == 2 * root): \r\n                return (\"Yes\"); \r\n            else: \r\n\t\t\t\treturn (\"No\"); \r\n        else: \r\n            return (\"No\");"
    ],
    [
        [
            "assert get_carol(2) == 7",
            "assert get_carol(4) == 223",
            "assert get_carol(5) == 959"
        ],
        "def get_carol(n): \r\n    if (n == 0): \r\n        return 0\r\n    if (n == 1): \r\n        return 2\r\n    sm = 2\r\n    i = 2\r\n    while (i < n): \r\n        temp = sm + 5*i \r\n        sm = temp \r\n        i = i + 1\r\n    return sm"
    ],
    [
        [
            "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
        ],
        "def remove_empty(list1):\r\n    list2 = [sub for sub in list1 if sub]\r\n    return (list2)"
    ],
    [
        [
            "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
            "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
            "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
        ],
        "def max_occurrences(list1):\r\n    max_val = 0\r\n    result = list1[0] \r\n    for i in list1:\r\n        occu = list1.count(i)\r\n        if occu > max_val:\r\n            max_val = occu\r\n            result = i \r\n    return result"
    ],
    [
        [
            "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
            "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
            "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        ],
        "def add_K_element(test_list, K):\r\n  res = [tuple(ele + K for ele in tup) for tup in test_list]\r\n  return (res)"
    ],
    [
        [
            "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
            "assert min_flip_to_make_string_alternate(\"001\") == 1",
            "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
        ],
        "def min_flip_to_make_string_alternate(binary):\r\n    cnt = 0\r\n    for i in range(1, len(binary)):\r\n        if binary[i] == binary[i - 1]:\r\n            cnt += 1\r\n    return cnt"
    ],
    [
        [
            "assert count_Digit(12345) == 5",
            "assert count_Digit(11223305) == 8",
            "assert count_Digit(4123459) == 7"
        ],
        "def count_Digit(n): \r\n    s = str(n) \r\n    return len(s)"
    ],
    [
        [
            "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
            "assert adjacent_num_product([1,2,3,4,5]) == 20",
            "assert adjacent_num_product([2,3]) == 6"
        ],
        "def adjacent_num_product(nums):\r\n    if len(nums) < 2:\r\n        return\r\n    product = nums[0] * nums[1]\r\n    for i in range(1, len(nums) - 1):\r\n        current_product = nums[i] * nums[i + 1]\r\n        if current_product > product:\r\n            product = current_product\r\n    return product"
    ],
    [
        [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
        ],
        "class Node: \r\n\tdef __init__(self, data): \r\n\t\tself.data = data \r\n\t\tself.left = None\r\n\t\tself.right = None\r\ndef is_tree_balanced(node): \r\n\tif node is None: \r\n\t\treturn True\r\n\tleft_height = is_tree_balanced(node.left) \r\n\tright_height = is_tree_balanced(node.right) \r\n\tif abs(left_height - right_height) <= 1 and left_height is not None and \\\r\n\t\tright_height is not None: \r\n\t\treturn True\r\n\treturn False"
    ],
    [
        [
            "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
            "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
            "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        ],
        "def repeat_tuples(test_tup, N):\r\n  res = test_tup * N\r\n  return (res)"
    ],
    [
        [
            "assert lateralsurface_cuboid(8,5,6)==156",
            "assert lateralsurface_cuboid(7,9,10)==320",
            "assert lateralsurface_cuboid(10,20,30)==1800"
        ],
        "def lateralsurface_cuboid(l,b,h):\r\n  return 2*(l*b+b*h+l*h)"
    ],
    [
        [
            "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
            "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
            "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
        ],
        "def float_sort(test_list):\r\n  test_list.sort(key=lambda x: float(x[1]))\r\n  return (test_list)"
    ],
    [
        [
            "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
            "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
            "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
        ],
        "def smallest_missing(arr, l, r): \r\n    if l > r: \r\n        return r + 1\r\n    if arr[l] != l: \r\n        return l \r\n    mid = (l + r) // 2\r\n    if arr[mid] == arr[mid + 1]: \r\n        return smallest_missing(arr, mid + 2, r) \r\n    return smallest_missing(arr, l, mid)"
    ],
    [
        [
            "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
            "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "def heap_assending(elements):\r\n    heapq = [elements]\r\n    for i in range(len(heapq)):\r\n        heapq[i] = min(heapq[i],)\r\n    return heapq"
    ],
    [
        [
            "assert volume_cuboid(1,2,3)==6",
            "assert volume_cuboid(5,7,9)==315",
            "assert volume_cuboid(10,15,21)==3150"
        ],
        "def volume_cuboid(l,b,h):\r\n  volume=l*b*h\r\n  return volume"
    ],
    [
        [
            "assert permute_string('ab')==['ab', 'ba']",
            "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
            "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        ],
        "def permute_string(s):\r\n    if len(s) == 1:\r\n        return [s]\r\n    res = []\r\n    for c in s:\r\n        for perm in permute_string(s.replace(c, ' ')):\r\n            res.append(c + perm)\r\n    return res"
    ],
    [
        [
            "assert round_num(4722,10)==4720",
            "assert round_num(1111,5)==1110",
            "assert round_num(219,2)==218"
        ],
        "def round_num(number, multiple):\r\n    return round(number / multiple) * multiple"
    ],
    [
        [
            "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
            "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
            "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        ],
        "def remove_replica(test_tup):\r\n  res = list(dict.fromkeys(test_tup))\r\n  for idx, ele in enumerate(res):\r\n    if res.count(ele) > 1:\r\n      res[idx] = 'MSP'\r\n  return tuple(res)"
    ],
    [
        [
            "assert remove_Char(\"aba\",'a') == \"b\"",
            "assert remove_Char(\"toggle\",'g') == \"tole\"",
            "assert remove_Char(\"aabbc\",'b') == \"aac\""
        ],
        "def remove_Char(str,char): \r\n    for i in range(str.count(char)): \r\n        str = str.replace(char,'') \r\n    return str"
    ],
    [
        [
            "assert move_first([1,2,3,4]) == [4,1,2,3]",
            "assert move_first([0,1,2,3]) == [3,0,1,2]",
            "assert move_first([9,8,7,1]) == [1,9,8,7]"
        ],
        "def move_first(num_list):\r\n    a = [num_list[-1]]\r\n    return a + num_list[:-1]"
    ],
    [
        [
            "assert surfacearea_cuboid(1,2,3)==22",
            "assert surfacearea_cuboid(5,7,9)==286",
            "assert surfacearea_cuboid(10,15,21)==1350"
        ],
        "def surfacearea_cuboid(l,b,h):\r\n  s=2*(l*b+b*h+l*h)\r\n  return s"
    ],
    [
        [
            "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
            "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
            "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
        ],
        "def multi_list(m,n):\r\n    x = [[0] * n for i in range(m)] \r\n    return x"
    ],
    [
        [
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        ],
        "def index_on_inner_list(list1, index):\r\n  list1.sort(key=lambda x: x[index])\r\n  return list1"
    ],
    [
        [
            "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
            "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
            "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
        ],
        "def find_rotation_count(arr): \r\n    n = len(arr) \r\n    for i in range (1, n): \r\n           if arr[i] < arr[i - 1]: \r\n               return i  \r\n    return 0"
    ],
    [
        [
            "assert even_bit_toggle_number(10) == 15",
            "assert even_bit_toggle_number(20) == 1",
            "assert even_bit_toggle_number(30) == 11"
        ],
        "def get_num_and_bit_position(n): \r\n    return n,((n & 1).bit_length() - 1) \r\ndef even_bit_toggle_number(n): \r\n    n,bit_position = get_num_and_bit_position(n) \r\n    for i in range(bit_position + 2): \r\n        if (i & 1): \r\n            n ^= 1\r\n    return n"
    ],
    [
        [
            "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
        ],
        "def frequency_Of_Smallest(n, arr):\r\n    x = min(arr)\r\n    return arr.count(x)"
    ],
    [
        [
            "assert get_perrin(9) == 12",
            "assert get_perrin(4) == 2",
            "assert get_perrin(6) == 5"
        ],
        "def get_perrin(n):\r\n  if n == 0 or n == 1:\r\n    return 0\r\n  if n == 2:\r\n    return 3\r\n  return get_perrin(n - 1) + 2 * get_perrin(n - 2) - get_perrin(n - 3)"
    ],
    [
        [
            "assert swap_count(\"[]][][\") == 2",
            "assert swap_count(\"[[][]]\") == 0",
            "assert swap_count(\"[[][]]][\") == 1"
        ],
        "No code block found."
    ],
    [
        [
            "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
            "assert even_or_odd(\"ABC\") == \"Even\"",
            "assert even_or_odd(\"AAD\") == \"Odd\""
        ],
        "def even_or_odd(n): \r\n    if n.endswith('A') or n.endswith('C') or n.endswith('E') or n.endswith('F'): \r\n        return (\"Even\") \r\n    else: \r\n        return (\"Odd\")"
    ],
    [
        [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "def highest_Power_of_2(n): \r\n    temp = 1; \r\n    while (temp <= n): \r\n        temp = temp << 1; \r\n    return temp - 2;"
    ],
    [
        [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "def find_lucas(n): \r\n\tdp = [0 for i in range(n + 1)] \r\n\tdp[0] = 0\r\n\tdp[1] = 1\r\n\tfor i in range(2, n+1): \r\n\t\tdp[i] = dp[i - 1] + dp[i - 2] \r\n\treturn dp[n]"
    ],
    [
        [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "def add_string(list1,str1):\r\n  result = [str1 + x for x in list1]\r\n  return result"
    ],
    [
        [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "def convert_list_dictionary(keys, values, dicts):\r\n  return [{(k): v} for k, v in zip(keys, values)]"
    ],
    [
        [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "def get_max_sum(n): \r\n    if (n < 3): \r\n        return n; \r\n    return (f(n // 2) + f(n // 3) + f(n // 4) + f(n // 5) + n);"
    ],
    [
        [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "def max_length_list(list1):\r\n  max_length_list = sorted(list1, key = len)\r\n  return (len(max_length_list[-1]), max_length_list[-1])"
    ],
    [
        [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "def check_distinct(test_tup):\r\n  res = set(test_tup)\r\n  if len(res) == len(test_tup):\r\n    return True\r\n  else:\r\n    return False"
    ],
    [
        [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "def first_non_repeating_character(s): \r\n    for i in range(len(s)): \r\n        if s.count(s[i]) == 1: \r\n            return s[i] \r\n    return None"
    ],
    [
        [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "import re \r\ndef check_char(string): \r\n\ttext = re.compile(r'([a-zA-z]).*\\1') \r\n\tif text.match(string): \r\n\t\treturn (\"Valid\") \r\n\telse: \r\n\t\treturn (\"Invalid\")"
    ],
    [
        [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "def median_numbers(num1,num2,num3):\r\n    if num1<=num2<=num3:\r\n        return num2\r\n    elif num3<=num2<=num1:\r\n        return num2\r\n    else:\r\n        return num1"
    ],
    [
        [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "def sum_of_digits(nums):\r\n    return sum([sum(map(int,str(num))) for num in nums])"
    ],
    [
        [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "def bitwise_xor(test_tup1, test_tup2):\r\n  res = tuple(tuple(a ^ b for a, b in zip(tup1, tup2)) for tup1, tup2 in zip(test_tup1, test_tup2))\r\n  return (res)"
    ],
    [
        [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "from collections import defaultdict \r\ndef extract_freq(test_list):\r\n  res = defaultdict(int)\r\n  for tup in test_list:\r\n    res[tup] += 1\r\n  return len(res)"
    ],
    [
        [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "def add_nested_tuples(test_tup1, test_tup2):\r\n  res = tuple(tuple(b + a for a, b in zip(x, y)) for x, y in zip(test_tup1, test_tup2))\r\n  return (res)"
    ],
    [
        [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
        ],
        "def ncr_modp(n,r,p): \r\n\tif (r > n - r): \r\n\t\tr = n - r \r\n\tC = [0 for i in range(r + 1)] \r\n\tC[0] = 1 \r\n\tfor i in range(1,n + 1): \r\n\t\tfor j in range(min(i, r), 0, -1): \r\n\t\t\tC[j] = (C[j] + C[j-1]) % p \r\n\treturn C[r]"
    ],
    [
        [
            "assert is_valid_URL(\"https://www.google.com\") == True",
            "assert is_valid_URL(\"https:/www.gmail.com\") == False",
            "assert is_valid_URL(\"https:// www.redit.com\") == False"
        ],
        "import re \r\nregex = '^(https?:\\/\\/)?(www\\.)?[a-z0-9]+(\\.[a-z0-9]+)+(\\/[a-z0-9]+)*$'\r\ndef is_valid_URL(url): \r\n\tif(re.search(regex, url)): \r\n\t\treturn True\r\n\telse: \r\n\t\treturn False"
    ],
    [
        [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "def minimum(x, y):\r\n    if x < y:\r\n        return x\r\n    return y"
    ],
    [
        [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "def check_tuplex(tuplex,value):\r\n  for ele in tuplex:\r\n    if ele == value:\r\n      return True\r\n  return False"
    ],
    [
        [
            "assert find_Parity(12) == \"Even Parity\"",
            "assert find_Parity(7) == \"Odd Parity\"",
            "assert find_Parity(10) == \"Even Parity\""
        ],
        "def find_Parity(n) : \r\n    parity = \"\" \r\n    if (n % 2 == 0) : \r\n        parity = \"Even Parity\" \r\n    else : \r\n        parity = \"Odd Parity\" \r\n    return parity"
    ],
    [
        [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "def rearrange_bigger(n): \r\n    n = list(str(n)) \r\n    i = len(n) - 2\r\n    while (i >= 0 and n[i] >= n[i + 1]): \r\n        i -= 1\r\n    if i == -1: \r\n        return -1\r\n    j = i + 1\r\n    while (j < len(n) and n[j] > n[i]): \r\n        j += 1\r\n    n[i], n[j] = n[j], n[i]\r\n    n[i + 1:] = reversed(n[i + 1:])\r\n    return int(''.join(n))"
    ],
    [
        [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "def k_smallest_pairs(nums1, nums2, k):\r\n\timport heapq\r\n\tres = []\r\n\tfor n1 in nums1:\r\n\t\tfor n2 in nums2:\r\n\t\t\theapq.heappush(res, n1 + n2)\r\n\tans = []\r\n\tfor _ in range(k):\r\n\t\tans.append(heapq.heappop(res))\r\n\treturn ans"
    ],
    [
        [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "def min_product_tuple(test_list):\r\n  res = min([ele[0] * ele[1] for ele in test_list])\r\n  return (res)"
    ],
    [
        [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "def min_val(list1):\r\n    return min(list1)"
    ],
    [
        [
            "assert snake_to_camel('android_tv') == 'AndroidTv'",
            "assert snake_to_camel('google_pixel') == 'GooglePixel'",
            "assert snake_to_camel('apple_watch') == 'AppleWatch'"
        ],
        "import re\r\ndef snake_to_camel(text):\r\n  str1 = re.sub('_(.)', lambda x: x.group(1).upper(), text)\r\n  return str1"
    ],
    [
        [
            "assert remove_odd([1,2,3]) == [2]",
            "assert remove_odd([2,4,6]) == [2,4,6]",
            "assert remove_odd([10,20,3]) == [10,20]"
        ],
        "def remove_odd(list1):\r\n    for i in list1:\r\n        if i % 2 == 0:\r\n            return list1[list1.index(i):]\r\n        else:\r\n            return list1[:list1.index(i)]"
    ],
    [
        [
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==['Greyson Fulton', 'Brady Kent', 'Wyatt Knott', 'Beau Turnbull']",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[99, 96, 94, 98]",
            "assert extract_nth_element([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)],1)==[98, 97, 91, 94]"
        ],
        "def extract_nth_element(test_list):\r\n  res = [sub[0] for sub in test_list]\r\n  return (res)"
    ],
    [
        [
            "assert overlapping([1,2,3,4,5],[6,7,8,9]) == False",
            "assert overlapping([1,2,3],[4,5,6]) == False",
            "assert overlapping([1,4,5],[1,4,5]) == True"
        ],
        "def overlapping(xs, ys):\r\n    result = False\r\n    for x in xs:\r\n        if x in ys:\r\n            result = True\r\n            break\r\n    return result"
    ],
    [
        [
            "assert max_Product([1,2,3,4,7,0,8,4]) == (7,8)",
            "assert max_Product([0,-1,-2,-4,5,0,-6]) == (-4,-6)",
            "assert max_Product([1,2,3]) == (2,3)"
        ],
        "def max_Product(arr): \r\n    arr_len = len(arr) \r\n    if (arr_len < 2): \r\n        return None     \r\n    x = arr[0]; y = arr[1]    \r\n    for i in range(0, arr_len): \r\n        for j in range(i + 1, arr_len): \r\n            if (arr[i] * arr[j] > x * y): \r\n                x = arr[i]; y = arr[j] \r\n    return x,y"
    ],
    [
        [
            "assert breakSum(12) == 13",
            "assert breakSum(24) == 27",
            "assert breakSum(23) == 23"
        ],
        "def break_sum(n, sum=0):\r\n    if n <= 0:\r\n        return sum\r\n    else:\r\n        return break_sum(n - 1, sum + n)"
    ],
    [
        [
            "assert group_tuples([('x', 'y'), ('x', 'z'), ('w', 't')]) == [('x', 'y', 'z'), ('w', 't')]",
            "assert group_tuples([('a', 'b'), ('a', 'c'), ('d', 'e')]) == [('a', 'b', 'c'), ('d', 'e')]",
            "assert group_tuples([('f', 'g'), ('f', 'g'), ('h', 'i')]) == [('f', 'g', 'g'), ('h', 'i')]"
        ],
        "def group_tuples(test_list):\r\n  res = [(x[0],) for x in test_list]\r\n  return (res)"
    ],
    [
        [
            "assert Find_Max([['A'],['A','B'],['A','B','C']]) == ['A','B','C']",
            "assert Find_Max([[1],[1,2],[1,2,3]]) == [1,2,3]",
            "assert Find_Max([[1,1],[1,2,3],[1,5,6,1]]) == [1,5,6,1]"
        ],
        "def Find_Max(list1):\r\n    max_list = []\r\n    for l in list1:\r\n        if len(l) > len(max_list):\r\n            max_list = l[:]\r\n    return max_list"
    ],
    [
        [
            "assert round_and_sum([22.4, 4.0, -16.22, -9.10, 11.00, -12.22, 14.20, -5.20, 17.50])==243",
            "assert round_and_sum([5,2,9,24.3,29])==345",
            "assert round_and_sum([25.0,56.7,89.2])==513"
        ],
        "def round_and_sum(numbers):\r\n    total = 0\r\n    for x in numbers:\r\n        total += round(x)\r\n    return total * len(numbers)"
    ],
    [
        [
            "assert cube_Sum(2) == 72",
            "assert cube_Sum(3) == 288",
            "assert cube_Sum(4) == 800"
        ],
        "def cube_Sum(n): \r\n    sum = 0   \r\n    for i in range(1,n + 1): \r\n        j = n - i + 1\r\n        sum = sum + (i * i * i + j * j * j) \r\n    return sum"
    ],
    [
        [
            "assert concatenate_tuple((\"ID\", \"is\", 4, \"UTS\") ) == 'ID-is-4-UTS'",
            "assert concatenate_tuple((\"QWE\", \"is\", 4, \"RTY\") ) == 'QWE-is-4-RTY'",
            "assert concatenate_tuple((\"ZEN\", \"is\", 4, \"OP\") ) == 'ZEN-is-4-OP'"
        ],
        "def concatenate_tuple(test_tup):\r\n  res = '-'.join(test_tup)\r\n  return (res)"
    ],
    [
        [
            "assert find_Average_Of_Cube(2) == 4.5",
            "assert find_Average_Of_Cube(3) == 12",
            "assert find_Average_Of_Cube(1) == 1"
        ],
        "def find_Average_Of_Cube(n): \r\n    sum = 0\r\n    for i in range(1,n + 1): \r\n        sum += (i * i * i) \r\n    return sum / n"
    ],
    [
        [
            "assert get_maxgold([[1, 3, 1, 5],[2, 2, 4, 1],[5, 0, 2, 3],[0, 6, 1, 2]],4,4)==16",
            "assert get_maxgold([[10,20],[30,40]],2,2)==70",
            "assert get_maxgold([[4,9],[3,7]],2,2)==13"
        ],
        "No code block found."
    ],
    [
        [
            "assert extract_rear(('Mers', 'for', 'Vers') ) == ['s', 'r', 's']",
            "assert extract_rear(('Avenge', 'for', 'People') ) == ['e', 'r', 'e']",
            "assert extract_rear(('Gotta', 'get', 'go') ) == ['a', 't', 'o']"
        ],
        "def extract_rear(test_tup):\r\n  res = [each[-1] for each in test_tup]\r\n  return (res)"
    ],
    [
        [
            "assert count_element_in_list([[1, 3], [5, 7], [1, 11], [1, 15, 7]],1)==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'A')==3",
            "assert count_element_in_list([['A', 'B'], ['A', 'C'], ['A', 'D', 'E'], ['B', 'C', 'D']],'E')==1"
        ],
        "def count_element_in_list(input, element): \r\n    count = 0\r\n    for l in input: \r\n        if element in l: \r\n            count += 1\r\n    return count"
    ],
    [
        [
            "assert filter_oddnumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1,3,5,7,9]",
            "assert filter_oddnumbers([10,20,45,67,84,93])==[45,67,93]",
            "assert filter_oddnumbers([5,7,9,8,6,4,3])==[5,7,9,3]"
        ],
        "def filter_oddnumbers(list1):\r\n  result = list(filter(lambda x: (x%2!=0), list1))\r\n  return result"
    ],
    [
        [
            "assert change_date_format(\"2026-01-02\") == '02-01-2026'",
            "assert change_date_format(\"2020-11-13\") == '13-11-2020'",
            "assert change_date_format(\"2021-04-26\") == '26-04-2021'"
        ],
        "import re\r\ndef change_date_format(dt):\r\n  return re.sub(r'(\\d{4})-(\\d{1,2})-(\\d{1,2})', '\\\\3-\\\\2-\\\\1', dt)"
    ],
    [
        [
            "assert shell_sort([12, 23, 4, 5, 3, 2, 12, 81, 56, 95]) == [2, 3, 4, 5, 12, 12, 23, 56, 81, 95]",
            "assert shell_sort([24, 22, 39, 34, 87, 73, 68]) == [22, 24, 34, 39, 68, 73, 87]",
            "assert shell_sort([32, 30, 16, 96, 82, 83, 74]) == [16, 30, 32, 74, 82, 83, 96]"
        ],
        "def shell_sort(arr):\r\n    n = len(arr)\r\n    gap = n // 2\r\n    while gap > 0:\r\n        for i in range(gap, n):\r\n            temp = arr[i]\r\n            j = i\r\n            while j >= gap and arr[j - gap] > temp:\r\n                arr[j] = arr[j - gap]\r\n                j -= gap\r\n            arr[j] = temp\r\n        gap //= 2\r\n    return arr"
    ],
    [
        [
            "assert and_tuples((10, 4, 6, 9), (5, 2, 3, 3)) == (0, 0, 2, 1)",
            "assert and_tuples((1, 2, 3, 4), (5, 6, 7, 8)) == (1, 2, 3, 0)",
            "assert and_tuples((8, 9, 11, 12), (7, 13, 14, 17)) == (0, 9, 10, 0)"
        ],
        "def and_tuples(test_tup1, test_tup2):\r\n  res = tuple(ele1 and ele2 for ele1, ele2 in zip(test_tup1, test_tup2))\r\n  return (res)"
    ],
    [
        [
            "assert parabola_directrix(5,3,2)==-198",
            "assert parabola_directrix(9,8,4)==-2336",
            "assert parabola_directrix(2,4,6)==-130"
        ],
        "def parabola_directrix(a,b,c):\r\n  return -4*a*c/(b**2)"
    ],
    [
        [
            "assert common_element([1,2,3,4,5], [5,6,7,8,9])==True",
            "assert common_element([1,2,3,4,5], [6,7,8,9])==None",
            "assert common_element(['a','b','c'], ['d','b','e'])==True"
        ],
        "def common_element(list1,list2):\r\n    result = False\r\n    for x in list1:\r\n        if x in list2:\r\n            result = True\r\n            break\r\n    return result"
    ],
    [
        [
            "assert median_trapezium(15,25,35)==20",
            "assert median_trapezium(10,20,30)==15",
            "assert median_trapezium(6,9,4)==7.5"
        ],
        "def median_trapezium(base1,base2,height): \r\n    area = 0.5 * (base1 + base2) * height\r\n    return area"
    ],
    [
        [
            "assert check_greater([1, 2, 3, 4, 5], 4) == 'No, entered number is less than those in the array'",
            "assert check_greater([2, 3, 4, 5, 6], 8) == 'Yes, the entered number is greater than those in the array'",
            "assert check_greater([9, 7, 4, 8, 6, 1], 11) == 'Yes, the entered number is greater than those in the array'"
        ],
        "def check_greater(test_tup, nom):\r\n  res = False\r\n  for ele in test_tup:\r\n    if nom > ele:\r\n      res = True\r\n      break\r\n  if res:\r\n    return ('Yes, entered number is greater than those in the array')\r\n  else:\r\n    return ('No, entered number is less than those in the array')"
    ],
    [
        [
            "assert text_match_one(\"ac\")==('Not matched!')",
            "assert text_match_one(\"dc\")==('Not matched!')",
            "assert text_match_one(\"abba\")==('Found a match!')"
        ],
        "import re\r\ndef text_match_one(text):\r\n        patterns = 'ab*?'\r\n        if re.search(patterns,  text):\r\n                return ('Matched!')\r\n        else:\r\n                return ('Not matched!')"
    ],
    [
        [
            "assert last_Digit(123) == 3",
            "assert last_Digit(25) == 5",
            "assert last_Digit(30) == 0"
        ],
        "def last_Digit(num): \r\n    return num % 10"
    ],
    [
        [
            "assert neg_nos([-1,4,5,-6]) == -1,-6",
            "assert neg_nos([-1,-2,3,4]) == -1,-2",
            "assert neg_nos([-7,-6,8,9]) == -7,-6"
        ],
        "def neg_nos(num): \r\n    for i in num: \r\n        if i < 0: \r\n            print(i) \r\nnum = [-1,4,5,-6] \r\nneg_nos(num)"
    ],
    [
        [
            "assert remove_odd(\"python\")==(\"yhn\")",
            "assert remove_odd(\"program\")==(\"rga\")",
            "assert remove_odd(\"language\")==(\"agae\")"
        ],
        "def remove_odd(s):\r\n  result = ''\r\n  for i in s:\r\n    if int(i)%2==0:\r\n      result+=i\r\n  return result"
    ],
    [
        [
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '3'",
            "assert count_bidirectional([(5, 6), (1, 3), (6, 5), (9, 1), (6, 5), (2, 1)] ) == '2'",
            "assert count_bidirectional([(5, 6), (1, 2), (6, 5), (9, 2), (6, 5), (2, 1)] ) == '4'"
        ],
        "def count_bidirectional(test_list):\r\n  res = 0\r\n  for sub in test_list:\r\n    if (sub[1], sub[0]) in test_list:\r\n      res += 1\r\n  return str(res)"
    ],
    [
        [
            "assert multiple_to_single([11, 33, 50])==113350",
            "assert multiple_to_single([-1,2,3,4,5,6])==-123456",
            "assert multiple_to_single([10,15,20,25])==10152025"
        ],
        "def multiple_to_single(list): \r\n    s = [str(i) for i in list] \r\n    res = int(\"\".join(s))  \r\n    return (res)"
    ],
    [
        [
            "assert find_adverb_position(\"clearly!! we can see the sky\")==(0, 7, 'clearly')",
            "assert find_adverb_position(\"seriously!! there are many roses\")==(0, 9, 'seriously')",
            "assert find_adverb_position(\"unfortunately!! sita is going to home\")==(0, 13, 'unfortunately')"
        ],
        "from textblob import TextBlob\r\ndef find_adverb_position(sentence):\r\n  adverbs = []\r\n  for idx, word, adj in enumerate(TextBlob(sentence).sentences[0].words):\r\n    if adj.pos_ == 'ADV':\r\n      adverbs.append((idx, word.text))\r\n  return adverbs"
    ],
    [
        [
            "assert surfacearea_cube(5)==150",
            "assert surfacearea_cube(3)==54",
            "assert surfacearea_cube(10)==600"
        ],
        "def surfacearea_cube(a):\r\n  return 6*(a*a)"
    ],
    [
        [
            "assert positive_count([0, 1, 2, -1, -5, 6, 0, -3, -2, 3, 4, 6, 8])==0.54",
            "assert positive_count([2, 1, 2, -1, -5, 6, 4, -3, -2, 3, 4, 6, 8])==0.69",
            "assert positive_count([2, 4, -6, -9, 11, -12, 14, -5, 17])==0.56"
        ],
        "def positive_count(arr):\r\n    positive_numbers = list(filter(lambda x: (x > 0), arr))\r\n    ratio = len(positive_numbers) / len(arr)\r\n    return ratio"
    ],
    [
        [
            "assert largest_neg([1,2,3,-4,-6]) == -6",
            "assert largest_neg([1,2,3,-8,-9]) == -9",
            "assert largest_neg([1,2,3,4,-1]) == -1"
        ],
        "def largest_neg(nums):\r\n    largest_neg = None\r\n    for x in nums:\r\n        if x < 0 and (largest_neg is None or x > largest_neg):\r\n            largest_neg = x\r\n    return largest_neg"
    ],
    [
        [
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1),(9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 2) == '[(2,), (9,), (2,), (2,)]'",
            "assert trim_tuple([(5, 3, 2, 1, 4), (3, 4, 9, 2, 1), (9, 1, 2, 3, 5), (4, 8, 2, 1, 7)], 1) == '[(3, 2, 1), (4, 9, 2), (1, 2, 3), (8, 2, 1)]'",
            "assert trim_tuple([(7, 8, 4, 9), (11, 8, 12, 4),(4, 1, 7, 8), (3, 6, 9, 7)], 1) == '[(8, 4), (8, 12), (1, 7), (6, 9)]'"
        ],
        "def trim_tuple(test_list, K):\r\n  res = [tuple(ele for ele in tup if ele >= K) for tup in test_list]\r\n  return (str(res))"
    ],
    [
        [
            "assert index_multiplication(((1, 3), (4, 5), (2, 9), (1, 10)),((6, 7), (3, 9), (1, 1), (7, 3)) ) == ((6, 21), (12, 45), (2, 9), (7, 30))",
            "assert index_multiplication(((2, 4), (5, 6), (3, 10), (2, 11)),((7, 8), (4, 10), (2, 2), (8, 4)) ) == ((14, 32), (20, 60), (6, 20), (16, 44))",
            "assert index_multiplication(((3, 5), (6, 7), (4, 11), (3, 12)),((8, 9), (5, 11), (3, 3), (9, 5)) ) == ((24, 45), (30, 77), (12, 33), (27, 60))"
        ],
        "def index_multiplication(test_list1, test_list2):\r\n  res = [(x * y) for x, y in zip(test_list1, test_list2)]\r\n  return (res)"
    ],
    [
        [
            "assert count_Occurrence(('a', 'a', 'c', 'b', 'd'),['a', 'b'] ) == 3",
            "assert count_Occurrence((1, 2, 3, 1, 4, 6, 7, 1, 4),[1, 4, 7]) == 6",
            "assert count_Occurrence((1,2,3,4,5,6),[1,2]) == 2"
        ],
        "def count_Occurrence(test_tup, small_list):\r\n  res = sum([test_tup.count(small_list[i]) for i in range(len(small_list))])\r\n  return (res)"
    ],
    [
        [
            "assert cube_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[1, 8, 27, 64, 125, 216, 343, 512, 729, 1000]",
            "assert cube_nums([10,20,30])==([1000, 8000, 27000])",
            "assert cube_nums([12,15])==([1728, 3375])"
        ],
        "def cube_nums(nums):\r\n  result = list(map(lambda x: x**3, nums))\r\n  return result"
    ],
    [
        [
            "assert cal_sum(9) == 49",
            "assert cal_sum(10) == 66",
            "assert cal_sum(11) == 88"
        ],
        "def cal_sum(n): \r\n    sum = 0; \r\n    a = 0; \r\n    b = 1; \r\n    c = 2; \r\n    while (n > 0): \r\n        sum = sum + c; \r\n        a = b; \r\n        b = c; \r\n        c = a + b; \r\n        n -= 1;     \r\n    return sum;"
    ],
    [
        [
            "assert check_Triangle(1,5,2,5,4,6) == 'Yes'",
            "assert check_Triangle(1,1,1,4,1,5) == 'No'",
            "assert check_Triangle(1,1,1,1,1,1) == 'No'"
        ],
        "def check_Triangle(x1,y1,x2,y2,x3,y3): \r\n    a = sqrt((x2-x1)**2 + (y2-y1)**2) \r\n    b = sqrt((x3-x2)**2 + (y3-y2)**2) \r\n    c = sqrt((x1-x3)**2 + (y1-y3)**2) \r\n    if (a + b > c and b + c > a and c + a > b): \r\n        return ('Yes') \r\n    else: \r\n        return ('No')"
    ],
    [
        [
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,8)==['practice', 'solution']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,6)==['Python']",
            "assert extract_string(['Python', 'list', 'exercises', 'practice', 'solution'] ,9)==['exercises']"
        ],
        "def extract_string(l1, n):\r\n    result = [s for s in l1 if len(s) == n]\r\n    return result"
    ],
    [
        [
            "assert remove_whitespaces(' Google    Flutter ') == 'GoogleFlutter'",
            "assert remove_whitespaces(' Google    Dart ') == 'GoogleDart'",
            "assert remove_whitespaces(' iOS    Swift ') == 'iOSSwift'"
        ],
        "import re\r\ndef remove_whitespaces(text1):\r\n  return (re.sub(r'\\s+', '', text1))"
    ],
    [
        [
            "assert loss_amount(1500,1200)==None",
            "assert loss_amount(100,200)==100",
            "assert loss_amount(2000,5000)==3000"
        ],
        "def loss_amount(actual_amount,sale_amount): \r\n if(actual_amount>sale_amount):\r\n    amount=actual_amount-sale_amount\r\n    return amount\r\n else:\r\n    return None"
    ],
    [
        [
            "assert sumofFactors(18) == 26",
            "assert sumofFactors(30) == 48",
            "assert sumofFactors(6) == 8"
        ],
        "def sumofFactors(n): \r\n    res = 0\r\n    for i in range(1, n + 1): \r\n        if (n % i == 0 and (i % 2 == 0)): \r\n            res = res + i \r\n    return res"
    ],
    [
        [
            "assert text_match_wordz(\"pythonz.\")==('Found a match!')",
            "assert text_match_wordz(\"xyz.\")==('Found a match!')",
            "assert text_match_wordz(\"  lang  .\")==('Not matched!')"
        ],
        "import re\r\ndef text_match_wordz(text):\r\n        patterns = 'z+'\r\n        if re.search(patterns,  text):\r\n                return 'Found a match!'\r\n        else:\r\n                return('Not a match')"
    ],
    [
        [
            "assert check_monthnumb_number(5)==True",
            "assert check_monthnumb_number(2)==False",
            "assert check_monthnumb_number(6)==False"
        ],
        "def check_monthnumb_number(monthnumb):\r\n  if monthnumb==1 or monthnumb==3 or monthnumb==5 or monthnumb==7 or monthnumb==8 or monthnumb==10 or monthnumb==12:\r\n    return True\r\n  else:\r\n    return False"
    ],
    [
        [
            "assert reverse_string_list(['Red', 'Green', 'Blue', 'White', 'Black'])==['deR', 'neerG', 'eulB', 'etihW', 'kcalB']",
            "assert reverse_string_list(['john','amal','joel','george'])==['nhoj','lama','leoj','egroeg']",
            "assert reverse_string_list(['jack','john','mary'])==['kcaj','nhoj','yram']"
        ],
        "def reverse_string_list(list1):\r\n    result = [i[::-1] for i in list1] \r\n    return result"
    ],
    [
        [
            "assert Find_Min([[1],[1,2],[1,2,3]]) == [1]",
            "assert Find_Min([[1,1],[1,1,1],[1,2,7,8]]) == [1,1]",
            "assert Find_Min([['x'],['x','y'],['x','y','z']]) == ['x']"
        ],
        "def Find_Min(list1): \r\n    min_len = 10**6\r\n    res = [] \r\n    for l in list1: \r\n        if(len(l) < min_len): \r\n            res = l[:] \r\n            min_len = len(l) \r\n    return (res)"
    ],
    [
        [
            "assert rectangle_area(10,20)==200",
            "assert rectangle_area(10,5)==50",
            "assert rectangle_area(4,2)==8"
        ],
        "def rectangle_area(l,b):\r\n  area=(l*b)\r\n  return area"
    ],
    [
        [
            "assert remove_uppercase('cAstyoUrFavoRitETVshoWs') == 'cstyoravoitshos'",
            "assert remove_uppercase('wAtchTheinTernEtrAdIo') == 'wtchheinerntrdo'",
            "assert remove_uppercase('VoicESeaRchAndreComMendaTionS') == 'oiceachndreomendaion'"
        ],
        "import re\r\ndef remove_uppercase(text):\r\n  return (re.sub(r'[A-Z][^A-Z]*', lambda x: ''.join(re.findall(r'[a-z]', x.group())), text))"
    ],
    [
        [
            "assert Extract([[1, 2], [3, 4, 5], [6, 7, 8, 9]]) == [1, 3, 6]",
            "assert Extract([[1,2,3],[4, 5]]) == [1,4]",
            "assert Extract([[9,8,1],[1,2]]) == [9,1]"
        ],
        "def Extract(nums):\r\n    result = [sublist[0] for sublist in nums]\r\n    return result"
    ],
    [
        [
            "assert upper_ctr('PYthon') == 1",
            "assert upper_ctr('BigData') == 1",
            "assert upper_ctr('program') == 0"
        ],
        "def upper_ctr(str):\r\n    upper_ctr= 0\r\n    for i in range(len(str)):\r\n        if str[i].isupper():\r\n            upper_ctr = upper_ctr + 1\r\n    return upper_ctr"
    ],
    [
        [
            "assert combinations_list(['orange', 'red', 'green', 'blue'])==[[], ['orange'], ['red'], ['red', 'orange'], ['green'], ['green', 'orange'], ['green', 'red'], ['green', 'red', 'orange'], ['blue'], ['blue', 'orange'], ['blue', 'red'], ['blue', 'red', 'orange'], ['blue', 'green'], ['blue', 'green', 'orange'], ['blue', 'green', 'red'], ['blue', 'green', 'red', 'orange']]",
            "assert combinations_list(['red', 'green', 'blue', 'white', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['blue'], ['blue', 'red'], ['blue', 'green'], ['blue', 'green', 'red'], ['white'], ['white', 'red'], ['white', 'green'], ['white', 'green', 'red'], ['white', 'blue'], ['white', 'blue', 'red'], ['white', 'blue', 'green'], ['white', 'blue', 'green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['black', 'blue'], ['black', 'blue', 'red'], ['black', 'blue', 'green'], ['black', 'blue', 'green', 'red'], ['black', 'white'], ['black', 'white', 'red'], ['black', 'white', 'green'], ['black', 'white', 'green', 'red'], ['black', 'white', 'blue'], ['black', 'white', 'blue', 'red'], ['black', 'white', 'blue', 'green'], ['black', 'white', 'blue', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'blue'], ['orange', 'blue', 'red'], ['orange', 'blue', 'green'], ['orange', 'blue', 'green', 'red'], ['orange', 'white'], ['orange', 'white', 'red'], ['orange', 'white', 'green'], ['orange', 'white', 'green', 'red'], ['orange', 'white', 'blue'], ['orange', 'white', 'blue', 'red'], ['orange', 'white', 'blue', 'green'], ['orange', 'white', 'blue', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red'], ['orange', 'black', 'blue'], ['orange', 'black', 'blue', 'red'], ['orange', 'black', 'blue', 'green'], ['orange', 'black', 'blue', 'green', 'red'], ['orange', 'black', 'white'], ['orange', 'black', 'white', 'red'], ['orange', 'black', 'white', 'green'], ['orange', 'black', 'white', 'green', 'red'], ['orange', 'black', 'white', 'blue'], ['orange', 'black', 'white', 'blue', 'red'], ['orange', 'black', 'white', 'blue', 'green'], ['orange', 'black', 'white', 'blue', 'green', 'red']]",
            "assert combinations_list(['red', 'green', 'black', 'orange'])==[[], ['red'], ['green'], ['green', 'red'], ['black'], ['black', 'red'], ['black', 'green'], ['black', 'green', 'red'], ['orange'], ['orange', 'red'], ['orange', 'green'], ['orange', 'green', 'red'], ['orange', 'black'], ['orange', 'black', 'red'], ['orange', 'black', 'green'], ['orange', 'black', 'green', 'red']]"
        ],
        "from itertools import combinations \r\ndef combinations_list(list1):\r\n    return list(combinations(list1, 1)) + list(combinations(list1, 2)) + list(combinations(list1, 3))"
    ],
    [
        [
            "assert max_subarray_product([1, -2, -3, 0, 7, -8, -2]) == 112",
            "assert max_subarray_product([6, -3, -10, 0, 2]) == 180 ",
            "assert max_subarray_product([-2, -40, 0, -2, -3]) == 80"
        ],
        "def max_subarray_product(nums):\r\n    if not nums:\r\n        return 0\r\n    max_prod = nums[0]\r\n    min_prod = nums[0]\r\n    res = nums[0]\r\n    for i in range(1, len(nums)):\r\n        temp = max_prod\r\n        max_prod = max(nums[i], nums[i] * max_prod, nums[i] * min_prod)\r\n        min_prod = min(nums[i], nums[i] * temp, nums[i] * min_prod)\r\n        res = max(res, max_prod)\r\n    return res"
    ],
    [
        [
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},10)==False",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},12)==True",
            "assert check_value({'Cierra Vega': 12, 'Alden Cantrell': 12, 'Kierra Gentry': 12, 'Pierre Cox': 12},5)==False"
        ],
        "def check_value(dict,n):\r\n  val = list(dict.values())\r\n  if len(set(val)) == 1:\r\n    return True\r\n  else:\r\n    return False"
    ],
    [
        [
            "assert drop_empty({'c1': 'Red', 'c2': 'Green', 'c3':None})=={'c1': 'Red', 'c2': 'Green'}",
            "assert drop_empty({'c1': 'Red', 'c2': None, 'c3':None})=={'c1': 'Red'}",
            "assert drop_empty({'c1': None, 'c2': 'Green', 'c3':None})=={ 'c2': 'Green'}"
        ],
        "def drop_empty(dict):\r\n  result = {k: v for k, v in dict.items() if v is not None}\r\n  return result"
    ],
    [
        [
            "assert find_peak([1, 3, 20, 4, 1, 0], 6) == 2",
            "assert find_peak([2, 3, 4, 5, 6], 5) == 4",
            "assert find_peak([8, 9, 11, 12, 14, 15], 6) == 5 "
        ],
        "def find_peak(arr, n): \r\n\ti = 0\r\n\twhile (i < n): \r\n\t\tv = arr[i] \r\n\t\tif (i == 0 and v > arr[i + 1]): \r\n\t\t\treturn i \r\n\t\tif (i == n - 1 and v > arr[i - 1]): \r\n\t\t\treturn i \r\n\t\tif (v > arr[i - 1] and v > arr[i + 1]): \r\n\t\t\treturn i \r\n\t\ti += 1\r\n\treturn -1"
    ],
    [
        [
            "assert decimal_to_Octal(10) == 12",
            "assert decimal_to_Octal(2) == 2",
            "assert decimal_to_Octal(33) == 41"
        ],
        "def decimal_to_Octal(n): \r\n    if (n == 0): \r\n        return 0\r\n    octal = ''\r\n    while (n >= 1): \r\n        octal = str(n % 8) + octal\r\n        n = n // 8\r\n    return int(octal)"
    ],
    [
        [
            "assert max_product([3, 100, 4, 5, 150, 6], 6) == 45000 ",
            "assert max_product([4, 42, 55, 68, 80], 5) == 50265600",
            "assert max_product([10, 22, 9, 33, 21, 50, 41, 60], 8) == 21780000 "
        ],
        "def max_product(arr, n): \r\n\tmax_prod = arr[0] \r\n\tmax_prod1 = arr[0] \r\n\tfor i in range(1, n): \r\n\t\tif arr[i] < arr[i - 1]: \r\n\t\t\tmax_prod1 = max_prod \r\n\t\t\tmax_prod = arr[i] \r\n\t\telse: \r\n\t\t\tmax_prod = max_prod * arr[i] \r\n\treturn max_prod1"
    ],
    [
        [
            "assert max_profit([1, 5, 2, 3, 7, 6, 4, 5], 3) == 10",
            "assert max_profit([2, 4, 7, 5, 4, 3, 5], 2) == 7",
            "assert max_profit([10, 6, 8, 4, 2], 2) == 2"
        ],
        "def max_profit(price, k):\r\n    n = len(price)\r\n    if (n < 2 or k > n // 2):\r\n        return max(price[i] - price[i - 1] for i in range(1, n))\r\n    profits = [0 for i in range(n)]\r\n    for i in range(1, n):\r\n        for j in range(i):\r\n            profits[i] = max(profits[i], price[i] - price[j])\r\n    return profits[k - 1]"
    ],
    [
        [
            "assert add_pairwise((1, 5, 7, 8, 10)) == (6, 12, 15, 18)",
            "assert add_pairwise((2, 6, 8, 9, 11)) == (8, 14, 17, 20)",
            "assert add_pairwise((3, 7, 9, 10, 12)) == (10, 16, 19, 22)"
        ],
        "def add_pairwise(test_tup):\r\n  res = tuple(tuple(a + b for a, b in zip(test_tup[i], test_tup[i + 1])) for i in range(len(test_tup) - 1))\r\n  return (res)"
    ],
    [
        [
            "assert find_remainder([ 100, 10, 5, 25, 35, 14 ],6,11) ==9",
            "assert find_remainder([1,1,1],3,1) == 0",
            "assert find_remainder([1,2,1],3,2) == 0"
        ],
        "def find_remainder(arr,n,k):\r\n    ans = 1\r\n    for i in range(k):\r\n        ans = (ans * arr[i]) % n\r\n    return (ans)"
    ],
    [
        [
            "assert check_Consecutive([1,2,3,4,5]) == True",
            "assert check_Consecutive([1,2,3,5,6]) == False",
            "assert check_Consecutive([1,2,1]) == False"
        ],
        "def check_Consecutive(nums):\r\n    if (len(nums) < 2):\r\n        return True\r\n    for i in range(len(nums)-1):\r\n        if (nums[i+1] - nums[i] != 1):\r\n            return False\r\n    return True"
    ],
    [
        [
            "assert tuple_intersection([(3, 4), (5, 6), (9, 10), (4, 5)] , [(5, 4), (3, 4), (6, 5), (9, 11)]) == {(4, 5), (3, 4), (5, 6)}",
            "assert tuple_intersection([(4, 1), (7, 4), (11, 13), (17, 14)] , [(1, 4), (7, 4), (16, 12), (10, 13)]) == {(4, 7), (1, 4)}",
            "assert tuple_intersection([(2, 1), (3, 2), (1, 3), (1, 4)] , [(11, 2), (2, 3), (6, 2), (1, 3)]) == {(1, 3), (2, 3)}"
        ],
        "def tuple_intersection(test_list1, test_list2):\r\n  res = tuple(set(tuple(ele) for ele in test_list1) & set(tuple(ele) for ele in test_list2))\r\n  return (res)"
    ],
    [
        [
            "assert replace_char(\"polygon\",'y','l')==(\"pollgon\")",
            "assert replace_char(\"character\",'c','a')==(\"aharaater\")",
            "assert replace_char(\"python\",'l','a')==(\"python\")"
        ],
        "def replace_char(string,x,y):\r\n  rep_string = string.replace(x,y)\r\n  return (rep_string)"
    ],
    [
        [
            "assert sort_counter({'Math':81, 'Physics':83, 'Chemistry':87})==[('Chemistry', 87), ('Physics', 83), ('Math', 81)]",
            "assert sort_counter({'Math':400, 'Physics':300, 'Chemistry':250})==[('Math', 400), ('Physics', 300), ('Chemistry', 250)]",
            "assert sort_counter({'Math':900, 'Physics':1000, 'Chemistry':1250})==[('Chemistry', 1250), ('Physics', 1000), ('Math', 900)]"
        ],
        "def sort_counter(ctr):\r\n  sorted_ctr = sorted(ctr.items(), key = lambda kvp: kvp[1], reverse=True)\r\n  return sorted_ctr"
    ],
    [
        [
            "assert big_sum([1,2,3]) == 4",
            "assert big_sum([-1,2,3,4]) == 3",
            "assert big_sum([2,3,6]) == 8"
        ],
        "def big_sum(array):\r\n    x = sorted(array)\r\n    return x[0] + x[len(x) - 1]"
    ],
    [
        [
            "assert is_lower(\"InValid\") == \"invalid\"",
            "assert is_lower(\"TruE\") == \"true\"",
            "assert is_lower(\"SenTenCE\") == \"sentence\""
        ],
        "def is_lower(string):\r\n  return string.lower()"
    ],
    [
        [
            "assert remove_lowercase(\"PYTHon\")==('PYTH')",
            "assert remove_lowercase(\"FInD\")==('FID')",
            "assert remove_lowercase(\"STRinG\")==('STRG')"
        ],
        "def remove_lowercase(string):\r\n  final = ''.join([char for char in string if char.isupper()])\r\n  return (final)"
    ],
    [
        [
            "assert first_Digit(123) == 1",
            "assert first_Digit(456) == 4",
            "assert first_Digit(12) == 1"
        ],
        "def first_Digit(num):\r\n    while (num >= 10):\r\n        num = num // 10\r\n    return num"
    ],
    [
        [
            "assert get_max_occuring_char(\"data\") == \"a\"",
            "assert get_max_occuring_char(\"create\") == \"e\"",
            "assert get_max_occuring_char(\"brilliant girl\") == \"i\""
        ],
        "def get_max_occuring_char(str1):\r\n    max_char = ''\r\n    max_count = 0\r\n    for i in str1:\r\n        count = str1.count(i)\r\n        if count > max_count:\r\n            max_count = count\r\n            max_char = i\r\n    return max_char"
    ],
    [
        [
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 9) == True",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 30) == False",
            "assert is_subset_sum([3, 34, 4, 12, 5, 2], 6, 15) == True"
        ],
        "def is_subset_sum(set, n, sum): \r\n\tsubset_sum = [False for i in range(sum + 1)] \r\n\tsubset_sum[0] = True\r\n\tfor i in range(0, n): \r\n\t\tfor j in range(sum - set[i], 0, -1): \r\n\t\t\tif subset_sum[j]: \r\n\t\t\t\tsubset_sum[j + set[i]] = True\r\n\treturn subset_sum[sum]"
    ],
    [
        [
            "assert match(\"Geeks\") == 'Yes'",
            "assert match(\"geeksforGeeks\") == 'Yes'",
            "assert match(\"geeks\") == 'No'"
        ],
        "import re \r\ndef match(string): \r\n  text = re.compile(r'[A-Z]+[a-z]+') \r\n  if text.search(string): \r\n     return (\"Yes\") \r\n  else: \r\n     return (\"No\")"
    ],
    [
        [
            "assert first_Factorial_Divisible_Number(10) == 5",
            "assert first_Factorial_Divisible_Number(15) == 5",
            "assert first_Factorial_Divisible_Number(5) == 4"
        ],
        "import math \r\ndef first_Factorial_Divisible_Number(n): \r\n    for x in range(1, n + 1): \r\n        if (math.factorial(x) % n == 0): \r\n            return x"
    ],
    [
        [
            "assert remove_matching_tuple([('Hello', 'dude'), ('How', 'are'), ('you', '?')], [('Hello', 'dude'), ('How', 'are')]) == [('you', '?')]",
            "assert remove_matching_tuple([('Part', 'of'), ('the', 'journey'), ('is ', 'end')], [('Journey', 'the'), ('is', 'end')]) == [('Part', 'of'), ('the', 'journey'), ('is ', 'end')]",
            "assert remove_matching_tuple([('Its', 'been'), ('a', 'long'), ('day', 'without')], [('a', 'long'), ('my', 'friend')]) == [('Its', 'been'), ('day', 'without')]"
        ],
        "def remove_matching_tuple(test_list1, test_list2):\r\n  res = [ele for ele in test_list1 if ele not in test_list2]\r\n  return (res)"
    ],
    [
        [
            "assert largest_palindrome([1, 232, 54545, 999991], 4) == 54545",
            "assert largest_palindrome([1, 2, 3, 4, 5, 50], 6) == 5",
            "assert largest_palindrome([1, 3, 7, 9, 45], 5)  == 9"
        ],
        "def largest_palindrome(nums, n):\r\n  res = max(nums, key=lambda x: str(x)[::-1])\r\n  return (res)"
    ],
    [
        [
            "assert binomial_probability(10, 5, 1.0/3) == 0.13656454808718185",
            "assert binomial_probability(11, 6, 2.0/4) == 0.2255859375",
            "assert binomial_probability(12, 7, 3.0/5) == 0.227030335488"
        ],
        "def binomial_probability(n, x, p): \r\n    if (n == 0 or x == 0): \r\n        return 1.0\r\n    if (x > n): \r\n        return 0.0\r\n    return (p**x) * (1-p)**(n-x) * binomial_probability(n-1, x-1, p)"
    ],
    [
        [
            "assert sort_tuple([(1, 3), (3, 2), (2, 1)] ) == [(2, 1), (3, 2), (1, 3)]",
            "assert sort_tuple([(2, 4), (3, 3), (1, 1)] ) == [(1, 1), (3, 3), (2, 4)]",
            "assert sort_tuple([(3, 9), (6, 7), (4, 3)] ) == [(4, 3), (6, 7), (3, 9)]"
        ],
        "def sort_tuple(tup): \r\n\tn = len(tup) \r\n\tfor i in range(n): \r\n\t\tfor j in range(n-i-1): \r\n\t\t\tif tup[j][1] > tup[j + 1][1]: \r\n\t\t\t\ttup[j], tup[j + 1] = tup[j + 1], tup[j] \r\n\treturn tup"
    ],
    [
        [
            "assert area_pentagon(5)==43.01193501472417",
            "assert area_pentagon(10)==172.0477400588967",
            "assert area_pentagon(15)==387.10741513251753"
        ],
        "def area_pentagon(s): \r\n    a = s * (s + 2) \r\n    return a / 2"
    ],
    [
        [
            "assert frequency_Of_Largest(5,[1,2,3,4,4]) == 2",
            "assert frequency_Of_Largest(3,[5,6,5]) == 1",
            "assert frequency_Of_Largest(4,[2,7,7,7]) == 3"
        ],
        "def frequency_Of_Largest(n, arr):\r\n    max_val = max(arr)\r\n    return arr.count(max_val)"
    ],
    [
        [
            "assert extract_symmetric([(6, 7), (2, 3), (7, 6), (9, 8), (10, 2), (8, 9)] ) == {(8, 9), (6, 7)}",
            "assert extract_symmetric([(7, 8), (3, 4), (8, 7), (10, 9), (11, 3), (9, 10)] ) == {(9, 10), (7, 8)}",
            "assert extract_symmetric([(8, 9), (4, 5), (9, 8), (11, 10), (12, 4), (10, 11)] ) == {(8, 9), (10, 11)}"
        ],
        "def extract_symmetric(test_list):\r\n  res = set()\r\n  for sub in test_list:\r\n    if (sub[1], sub[0]) in test_list:\r\n      res.add(sub)\r\n  return (res)"
    ],
    [
        [
            "assert sum_gp(1,5,2)==31",
            "assert sum_gp(1,5,4)==341",
            "assert sum_gp(2,6,3)==728"
        ],
        "def sum_gp(a,l,n): \r\n    f = float(n) \r\n    return a * (abs(pow(l / a, f) - 1))"
    ],
    [
        [
            "assert binary_search([1,2,3,5,8], 6) == False",
            "assert binary_search([7, 8, 9, 10, 13], 10) == True",
            "assert binary_search([11, 13, 14, 19, 22, 36], 23) == False"
        ],
        "def binary_search(arr, x): \r\n    low = 0\r\n    high = len(arr) - 1\r\n    while low <= high: \r\n        mid = (low + high) // 2 \r\n        if arr[mid] < x: \r\n            low = mid + 1\r\n        elif arr[mid] > x: \r\n            high = mid - 1\r\n        else: \r\n            return mid \r\n    return -1"
    ],
    [
        [
            "assert calculate_polygons(1,1, 4, 4, 3)==[[(-5.0, -4.196152422706632), (-5.0, -0.7320508075688767), (-2.0, 1.0), (1.0, -0.7320508075688767), (1.0, -4.196152422706632), (-2.0, -5.928203230275509), (-5.0, -4.196152422706632)], [(1.0, -4.196152422706632), (1.0, -0.7320508075688767), (4.0, 1.0), (7.0, -0.7320508075688767), (7.0, -4.196152422706632), (4.0, -5.928203230275509), (1.0, -4.196152422706632)], [(7.0, -4.196152422706632), (7.0, -0.7320508075688767), (10.0, 1.0), (13.0, -0.7320508075688767), (13.0, -4.196152422706632), (10.0, -5.928203230275509), (7.0, -4.196152422706632)], [(-2.0, 1.0000000000000004), (-2.0, 4.464101615137755), (1.0, 6.196152422706632), (4.0, 4.464101615137755), (4.0, 1.0000000000000004), (1.0, -0.7320508075688767), (-2.0, 1.0000000000000004)], [(4.0, 1.0000000000000004), (4.0, 4.464101615137755), (7.0, 6.196152422706632), (10.0, 4.464101615137755), (10.0, 1.0000000000000004), (7.0, -0.7320508075688767), (4.0, 1.0000000000000004)], [(-5.0, 6.196152422706632), (-5.0, 9.660254037844387), (-2.0, 11.392304845413264), (1.0, 9.660254037844387), (1.0, 6.196152422706632), (-2.0, 4.464101615137755), (-5.0, 6.196152422706632)], [(1.0, 6.196152422706632), (1.0, 9.660254037844387), (4.0, 11.392304845413264), (7.0, 9.660254037844387), (7.0, 6.196152422706632), (4.0, 4.464101615137755), (1.0, 6.196152422706632)], [(7.0, 6.196152422706632), (7.0, 9.660254037844387), (10.0, 11.392304845413264), (13.0, 9.660254037844387), (13.0, 6.196152422706632), (10.0, 4.464101615137755), (7.0, 6.196152422706632)], [(-2.0, 11.392304845413264), (-2.0, 14.85640646055102), (1.0, 16.588457268119896), (4.0, 14.85640646055102), (4.0, 11.392304845413264), (1.0, 9.660254037844387), (-2.0, 11.392304845413264)], [(4.0, 11.392304845413264), (4.0, 14.85640646055102), (7.0, 16.588457268119896), (10.0, 14.85640646055102), (10.0, 11.392304845413264), (7.0, 9.660254037844387), (4.0, 11.392304845413264)]]",
            "assert calculate_polygons(5,4,7,9,8)==[[(-11.0, -9.856406460551018), (-11.0, -0.6188021535170058), (-3.0, 4.0), (5.0, -0.6188021535170058), (5.0, -9.856406460551018), (-3.0, -14.475208614068023), (-11.0, -9.856406460551018)], [(5.0, -9.856406460551018), (5.0, -0.6188021535170058), (13.0, 4.0), (21.0, -0.6188021535170058), (21.0, -9.856406460551018), (13.0, -14.475208614068023), (5.0, -9.856406460551018)], [(21.0, -9.856406460551018), (21.0, -0.6188021535170058), (29.0, 4.0), (37.0, -0.6188021535170058), (37.0, -9.856406460551018), (29.0, -14.475208614068023), (21.0, -9.856406460551018)], [(-3.0, 4.0), (-3.0, 13.237604307034012), (5.0, 17.856406460551018), (13.0, 13.237604307034012), (13.0, 4.0), (5.0, -0.6188021535170058), (-3.0, 4.0)], [(13.0, 4.0), (13.0, 13.237604307034012), (21.0, 17.856406460551018), (29.0, 13.237604307034012), (29.0, 4.0), (21.0, -0.6188021535170058), (13.0, 4.0)], [(-11.0, 17.856406460551018), (-11.0, 27.09401076758503), (-3.0, 31.712812921102035), (5.0, 27.09401076758503), (5.0, 17.856406460551018), (-3.0, 13.237604307034012), (-11.0, 17.856406460551018)], [(5.0, 17.856406460551018), (5.0, 27.09401076758503), (13.0, 31.712812921102035), (21.0, 27.09401076758503), (21.0, 17.856406460551018), (13.0, 13.237604307034012), (5.0, 17.856406460551018)], [(21.0, 17.856406460551018), (21.0, 27.09401076758503), (29.0, 31.712812921102035), (37.0, 27.09401076758503), (37.0, 17.856406460551018), (29.0, 13.237604307034012), (21.0, 17.856406460551018)], [(-3.0, 31.712812921102035), (-3.0, 40.95041722813605), (5.0, 45.569219381653056), (13.0, 40.95041722813605), (13.0, 31.712812921102035), (5.0, 27.09401076758503), (-3.0, 31.712812921102035)], [(13.0, 31.712812921102035), (13.0, 40.95041722813605), (21.0, 45.569219381653056), (29.0, 40.95041722813605), (29.0, 31.712812921102035), (21.0, 27.09401076758503), (13.0, 31.712812921102035)]]",
            "assert calculate_polygons(9,6,4,3,2)==[[(5.0, 2.5358983848622456), (5.0, 4.8452994616207485), (7.0, 6.0), (9.0, 4.8452994616207485), (9.0, 2.5358983848622456), (7.0, 1.3811978464829942), (5.0, 2.5358983848622456)], [(7.0, 6.0), (7.0, 8.309401076758503), (9.0, 9.464101615137753), (11.0, 8.309401076758503), (11.0, 6.0), (9.0, 4.8452994616207485), (7.0, 6.0)]]"
        ],
        "def calculate_polygons(x1, y1, x2, y2, x3, y3, x4, y4): \r\n\treturn [[(x1, y1), (x1, y2), (x2, y2), (x2, y1), (x1, y1)]]"
    ],
    [
        [
            "assert binary_to_integer((1, 1, 0, 1, 0, 0, 1)) == '105'",
            "assert binary_to_integer((0, 1, 1, 0, 0, 1, 0, 1)) == '101'",
            "assert binary_to_integer((1, 1, 0, 1, 0, 1)) == '53'"
        ],
        "def binary_to_integer(binary):\r\n  n = 0\r\n  power = len(binary) - 1\r\n  for bit in binary:\r\n    n += int(bit) * (2 ** power)\r\n    power -= 1\r\n  return str(n)"
    ],
    [
        [
            "assert remove_lowercase('KDeoALOklOOHserfLoAJSIskdsf') == 'KDALOOOHLAJSI'",
            "assert remove_lowercase('ProducTnamEstreAmIngMediAplAYer') == 'PTEAIMAAY'",
            "assert remove_lowercase('maNufacTuredbYSheZenTechNolOGIes') == 'NTYSZTNOGI'"
        ],
        "import re\r\ndef remove_lowercase(text):\r\n  pattern = '[a-z]+'\r\n  return (re.sub(pattern, '', text))"
    ],
    [
        [
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],3)==[14, 22, 25] ",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 25, 58],2)==[14, 22]",
            "assert heap_queue_smallest( [25, 35, 22, 85, 14, 65, 75, 22, 58],5)==[14, 22, 22, 25, 35]"
        ],
        "import heapq\r\ndef heap_queue_smallest(nums, k):\r\n  return heapq.nsmallest(k, nums)"
    ],
    [
        [
            "assert surfacearea_cone(5,12)==282.7433388230814",
            "assert surfacearea_cone(10,15)==880.5179353159282",
            "assert surfacearea_cone(19,17)==2655.923961165254"
        ],
        "import math\r\ndef surfacearea_cone(r,h):\r\n  sl = r * math.sqrt(h ** 2 + r ** 2)\r\n  sp = 2 * math.pi * r\r\n  surfacearea = sp + sl\r\n  return surfacearea"
    ],
    [
        [
            "assert gcd(12, 17) == 1",
            "assert gcd(4,6) == 2",
            "assert gcd(2,9) == 1"
        ],
        "def gcd(a, b):\r\n    if a == 0:\r\n        return b\r\n    return gcd(b % a, a)"
    ],
    [
        [
            "assert diameter_circle(10)==20",
            "assert diameter_circle(40)==80",
            "assert diameter_circle(15)==30"
        ],
        "import math\r\ndef diameter_circle(r):\r\n  diameter = math.pi*2*r\r\n  return diameter"
    ],
    [
        [
            "assert concatenate_elements(['hello','there','have','a','rocky','day'] ) == '  hello there have a rocky day'",
            "assert concatenate_elements([ 'Hi', 'there', 'How','are', 'you'] ) == '  Hi there How are you'",
            "assert concatenate_elements([ 'Part', 'of', 'the','journey', 'is', 'end'] ) == '  Part of the journey is end'"
        ],
        "def concatenate_elements(list1):\r\n  result = ' '.join(list1)\r\n  return result"
    ],
    [
        [
            "assert num_comm_div(2,4) == 2",
            "assert num_comm_div(2,8) == 2",
            "assert num_comm_div(12,24) == 6"
        ],
        "def num_comm_div(x,y): \r\n    while y != 0: \r\n        x, y = y, x % y \r\n    return x"
    ],
    [
        [
            "assert find(3,3) == 0",
            "assert find(10,3) == 1",
            "assert find(16,5) == 1"
        ],
        "def find(a,b):\r\n  if b == 0:\r\n    return 1\r\n  else:\r\n    return (a % b) == 0"
    ],
    [
        [
            "assert add_consecutive_nums([1, 1, 3, 4, 4, 5, 6, 7])==[2, 4, 7, 8, 9, 11, 13]",
            "assert add_consecutive_nums([4, 5, 8, 9, 6, 10])==[9, 13, 17, 15, 16]",
            "assert add_consecutive_nums([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[3, 5, 7, 9, 11, 13, 15, 17, 19]"
        ],
        "def add_consecutive_nums(nums):\r\n    result = []\r\n    for index, num in enumerate(nums):\r\n        if index == 0:\r\n            result.append(num)\r\n        else:\r\n            result.append(nums[index] + result[index - 1])\r\n    return result"
    ],
    [
        [
            "assert sum_Of_Series(5) == 225",
            "assert sum_Of_Series(2) == 9",
            "assert sum_Of_Series(3) == 36"
        ],
        "def sum_Of_Series(n): \r\n    sum = 0; \r\n    sum = sum + (n * (n + 1) * (2 * n + 1)); \r\n    return sum;"
    ],
    [
        [
            "assert re_order([6, 0, 8, 2, 3, 0, 4, 0, 1]) == [6, 8, 2, 3, 4, 1, 0, 0, 0]",
            "assert re_order([4, 0, 2, 7, 0, 9, 0, 12, 0]) == [4, 2, 7, 9, 12, 0, 0, 0, 0]",
            "assert re_order([3, 11, 0, 74, 14, 0, 1, 0, 2]) == [3, 11, 74, 14, 1, 2, 0, 0, 0]"
        ],
        "def re_order(arr):\r\n    a = [0 for i in range(arr.count(0))]\r\n    x = [ i for i in arr if i != 0]\r\n    x.extend(a)\r\n    return (x)"
    ],
    [
        [
            "assert permutation_coefficient(10, 2) == 90",
            "assert permutation_coefficient(10, 3) == 720",
            "assert permutation_coefficient(10, 1) == 10"
        ],
        "def factorial(n): \r\n    if (n == 0): \r\n        return 1\r\n    res = n \r\n    while (n > 1): \r\n        n -= 1\r\n        res *= n \r\n    return res \r\ndef permutation_coefficient(n, k): \r\n    return factorial(n - k) / factorial(n)"
    ],
    [
        [
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['white', 'orange'])==['red', 'green', 'blue', 'black']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['black', 'orange'])==['red', 'green', 'blue', 'white']",
            "assert remove_words(['red', 'green', 'blue', 'white', 'black', 'orange'],['blue', 'white'])==['red', 'green', 'black', 'orange']"
        ],
        "def remove_words(test_list, test_words):\r\n  for item in test_words:\r\n    if item in test_list:\r\n      test_list.remove(item)\r\n  return (test_list)"
    ],
    [
        [
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True",
            "assert same_order([\"red\",\"pink\",\"green\",\"white\",\"black\"],[\"white\",\"orange\",\"pink\",\"black\"])==False",
            "assert same_order([\"red\",\"green\",\"black\",\"orange\"],[\"red\",\"pink\",\"green\",\"white\",\"black\"])==True"
        ],
        "def same_order(list1,list2):\r\n    temp = list(list1) \r\n    temp.sort() \r\n    if temp == list2:\r\n        return True\r\n    else:\r\n        return False"
    ],
    [
        [
            "assert average_Odd(9) == 5",
            "assert average_Odd(5) == 3",
            "assert average_Odd(11) == 6"
        ],
        "def average_Odd(n): \r\n    if (n%2==0): \r\n        return (\"Not an odd number\") \r\n    else: \r\n        return (((n^.5)+1)//2)"
    ],
    [
        [
            "assert no_of_subsequences([1,2,3,4], 10) == 11",
            "assert no_of_subsequences([4,8,7,2], 50) == 9",
            "assert no_of_subsequences([5,6,7,8], 15) == 4"
        ],
        "def no_of_subsequences(arr, k): \r\n    n = len(arr) \r\n    dp = [0 for i in range(k + 1)] \r\n    dp[0] = 1; \r\n    for i in range(0, n): \r\n        for j in range(k - 1, arr[i] - 1, -1): \r\n            dp[j] += dp[j - arr[i]] \r\n    return dp[k]"
    ]
]