[
    {
        "task_id": 311,
        "code": [
            "def set_left_most_unset_bit(n):\n    bin_n = bin(n)[2:]  # convert integer to binary string\n    unset_bits = [i for i, bit in enumerate(reversed(bin_n)) if bit == '0']\n    if unset_bits:\n        left_most_unset_bit = len(bin_n) - unset_bits[0]\n        n |= 1 << left_most_unset_bit\n    return n"
        ],
        "test_list": [
            "assert set_left_most_unset_bit(10) == 14",
            "assert set_left_most_unset_bit(12) == 14",
            "assert set_left_most_unset_bit(15) == 15"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 312,
        "code": [
            "import math\n\ndef volume_cone(radius, height):\n    return (1/3) * math.pi * radius**2 * height"
        ],
        "test_list": [
            "assert volume_cone(5,12)==314.15926535897927",
            "assert volume_cone(10,15)==1570.7963267948965",
            "assert volume_cone(19,17)==6426.651371693521"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 313,
        "code": [
            "def pos_nos(lst):\n    return tuple(i for i in lst if i > 0)"
        ],
        "test_list": [
            "assert pos_nos([-1,-2,1,2]) == 1,2",
            "assert pos_nos([3,4,-5]) == 3,4",
            "assert pos_nos([-2,-3,1]) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 314,
        "code": [
            "def max_sum_rectangular_grid(grid, n):\n    incl = 0\n    excl = 0\n    \n    for i in range(n):\n        new_excl = max(incl, excl)\n        \n        incl = excl + max(grid[0][i], grid[1][i])\n        excl = new_excl\n        \n    return max(incl, excl)"
        ],
        "test_list": [
            "assert max_sum_rectangular_grid([ [1, 4, 5], [2, 0, 0 ] ], 3) == 7",
            "assert max_sum_rectangular_grid([ [ 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10] ], 5) == 24",
            "assert max_sum_rectangular_grid([ [7, 9, 11, 15, 19], [21, 25, 28, 31, 32] ], 5) == 81"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 315,
        "code": [
            "def find_Max_Len_Even(s):\n    words = s.split()\n    max_len = 0\n    max_word = \"\"\n    for word in words:\n        if len(word) % 2 == 0 and len(word) > max_len:\n            max_len = len(word)\n            max_word = word\n    return max_word"
        ],
        "test_list": [
            "assert find_Max_Len_Even(\"python language\") == \"language\"",
            "assert find_Max_Len_Even(\"maximum even length\") == \"length\"",
            "assert find_Max_Len_Even(\"eve\") == \"-1\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 316,
        "code": [
            "def find_last_occurrence(arr, num):\n    indices = [i for i, x in enumerate(arr) if x == num]\n    if indices:\n        return indices[-1]\n    else:\n        return -1"
        ],
        "test_list": [
            "assert find_last_occurrence([2, 5, 5, 5, 6, 6, 8, 9, 9, 9], 5) == 3",
            "assert find_last_occurrence([2, 3, 5, 8, 6, 6, 8, 9, 9, 9], 9) == 9",
            "assert find_last_occurrence([2, 2, 1, 5, 6, 6, 6, 9, 9, 9], 6) == 6"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 317,
        "code": [
            "def modified_encode(lst):\n    if not lst:\n        return []\n    result = []\n    count = 1\n    for i in range(1, len(lst)):\n        if lst[i] == lst[i-1]:\n            count += 1\n        else:\n            if count > 1:\n                result.append([count, lst[i-1]])\n            else:\n                result.append(lst[i-1])\n            count = 1\n    if count > 1:\n        result.append([count, lst[-1]])\n    else:\n        result.append(lst[-1])\n    return result"
        ],
        "test_list": [
            "assert modified_encode([1,1,2,3,4,4,5,1])==[[2, 1], 2, 3, [2, 4], 5, 1]",
            "assert modified_encode('automatically')==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y']",
            "assert modified_encode('python')==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 318,
        "code": [
            "def max_volume(n):\n    max_vol = 0\n    for a in range(1, n):\n        for b in range(a, n - a):\n            c = n - a - b\n            if c >= b:\n                vol = a * b * c\n                max_vol = max(max_vol, vol)\n    return max_vol"
        ],
        "test_list": [
            "assert max_volume(8) == 18",
            "assert max_volume(4) == 2",
            "assert max_volume(1) == 0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 319,
        "code": [
            "import re\n\ndef find_long_word(s):\n    return re.findall(r'\\b\\w{5}\\b', s)"
        ],
        "test_list": [
            "assert find_long_word('Please move back to strem') == ['strem']",
            "assert find_long_word('4K Ultra HD streaming player') == ['Ultra']",
            "assert find_long_word('Streaming Media Player') == ['Media']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 320,
        "code": [
            "def sum_difference(n):\n    sum_of_numbers = n*(n+1)//2\n    sum_of_squares = n*(n+1)*(2*n+1)//6\n    return sum_of_numbers**2 - sum_of_squares"
        ],
        "test_list": [
            "assert sum_difference(12)==5434",
            "assert sum_difference(20)==41230",
            "assert sum_difference(54)==2151270"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 321,
        "code": [
            "def find_demlo(n):\n    n = str(n)\n    n = n[::-1]  # reverse the string\n    result = ''\n    for i in range(len(n)):\n        result += str(int(n[i]) + 1)\n    return result"
        ],
        "test_list": [
            "assert find_demlo(\"111111\") == '12345654321'",
            "assert find_demlo(\"1111\") == '1234321'",
            "assert find_demlo(\"13333122222\") == '123456789101110987654321'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 322,
        "code": [
            "def position_min(lst):\n    min_val = min(lst)\n    return [i for i, x in enumerate(lst) if x == min_val]"
        ],
        "test_list": [
            "assert position_min([12,33,23,10,67,89,45,667,23,12,11,10,54])==[3,11]",
            "assert position_min([1,2,2,2,4,4,4,5,5,5,5])==[0]",
            "assert position_min([2,1,5,6,8,3,4,9,10,11,8,12])==[1]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 323,
        "code": [
            "def re_arrange(arr, n):\n    pos = [x for x in arr if x > 0]\n    neg = [x for x in arr if x < 0]\n    result = []\n    while pos and neg:\n        result.append(neg.pop(0))\n        result.append(pos.pop(0))\n    result.extend(pos)\n    result.extend(neg)\n    return result"
        ],
        "test_list": [
            "assert re_arrange([-5, -2, 5, 2, 4,\t7, 1, 8, 0, -8], 10) == [-5, 5, -2, 2, -8, 4, 7, 1, 8, 0]",
            "assert re_arrange([1, 2, 3, -4, -1, 4], 6) == [-4, 1, -1, 2, 3, 4]",
            "assert re_arrange([4, 7, 9, 77, -4, 5, -3, -9], 8) == [-4, 4, -3, 7, -9, 9, 77, 5]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 324,
        "code": [
            "def sum_of_alternates(t):\n    sum1 = sum(t[i] for i in range(0, len(t), 2))\n    sum2 = sum(t[i] for i in range(1, len(t), 2))\n    return sum1, sum2"
        ],
        "test_list": [
            "assert sum_of_alternates((5, 6, 3, 6, 10, 34)) == (46, 18)",
            "assert sum_of_alternates((1, 2, 3, 4, 5)) == (6, 9)",
            "assert sum_of_alternates((6, 7, 8, 9, 4, 5)) == (21, 18)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 325,
        "code": [
            "def get_Min_Squares(n):\n    dp = [float('inf')] * (n + 1)\n    dp[0] = 0\n    for i in range(1, n + 1):\n        j = 1\n        while j * j <= i:\n            dp[i] = min(dp[i], dp[i - j * j] + 1)\n            j += 1\n    return dp[n]"
        ],
        "test_list": [
            "assert get_Min_Squares(6) == 3",
            "assert get_Min_Squares(2) == 2",
            "assert get_Min_Squares(4) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 326,
        "code": [
            "def most_occurrences(strings):\n    word_freq = {}\n    for string in strings:\n        words = string.split()\n        for word in words:\n            if word not in word_freq:\n                word_freq[word] = 0\n            word_freq[word] += 1\n    return max(word_freq, key=word_freq.get)"
        ],
        "test_list": [
            "assert most_occurrences([\"UTS is best for RTF\", \"RTF love UTS\", \"UTS is best\"] ) == 'UTS'",
            "assert most_occurrences([\"Its been a great year\", \"this year is so worse\", \"this year is okay\"] ) == 'year'",
            "assert most_occurrences([\"Families can be reunited\", \"people can be reunited\", \"Tasks can be achieved \"] ) == 'can'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 327,
        "code": [
            "def check_isosceles(a, b, c):\n    if a == b or b == c or a == c:\n        return True\n    else:\n        return False"
        ],
        "test_list": [
            "assert check_isosceles(6,8,12)==False ",
            "assert check_isosceles(6,6,12)==True",
            "assert check_isosceles(6,16,20)==False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 328,
        "code": [
            "def rotate_left(lst, n, slice_index):\n    return lst[slice_index-n: slice_index] + lst[:slice_index-n] + lst[slice_index:]"
        ],
        "test_list": [
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],3,4)==[4, 5, 6, 7, 8, 9, 10, 1, 2, 3, 4]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],2,2)==[3, 4, 5, 6, 7, 8, 9, 10, 1, 2]",
            "assert rotate_left([1, 2, 3, 4, 5, 6, 7, 8, 9, 10],5,2)==[6, 7, 8, 9, 10, 1, 2]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 329,
        "code": [
            "def neg_count(lst):\n    return sum(1 for num in lst if num < 0)"
        ],
        "test_list": [
            "assert neg_count([-1,-2,3,-4,-5]) == 4",
            "assert neg_count([1,2,3]) == 0",
            "assert neg_count([1,2,-3,-10,20]) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 330,
        "code": [
            "import re\n\ndef find_char(s):\n    return re.findall(r'\\b\\w{3,5}\\b', s)"
        ],
        "test_list": [
            "assert find_char('For the four consumer complaints contact manager AKR reddy') == ['For', 'the', 'four', 'AKR', 'reddy']",
            "assert find_char('Certain service are subject to change MSR') == ['are', 'MSR']",
            "assert find_char('Third party legal desclaimers') == ['Third', 'party', 'legal']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 331,
        "code": [
            "def count_unset_bits(n):\n    binary = bin(n)[2:]\n    return 32 - binary.count('1')"
        ],
        "test_list": [
            "assert count_unset_bits(2) == 1",
            "assert count_unset_bits(4) == 2",
            "assert count_unset_bits(6) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 332,
        "code": [
            "def char_frequency(s):\n    freq = {}\n    for char in s:\n        if char in freq:\n            freq[char] += 1\n        else:\n            freq[char] = 1\n    return freq"
        ],
        "test_list": [
            "assert char_frequency('python')=={'p': 1, 'y': 1, 't': 1, 'h': 1, 'o': 1, 'n': 1}",
            "assert char_frequency('program')=={'p': 1, 'r': 2, 'o': 1, 'g': 1, 'a': 1, 'm': 1}",
            "assert char_frequency('language')=={'l': 1, 'a': 2, 'n': 1, 'g': 2, 'u': 1, 'e': 1}"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 333,
        "code": [
            "def Sort(lst):\n    return sorted(lst, key=lambda x: x[1])"
        ],
        "test_list": [
            "assert Sort([['a', 10], ['b', 5], ['c', 20], ['d', 15]]) == [['b', 5], ['a', 10], ['d', 15], ['c', 20]]",
            "assert Sort([['452', 10], ['256', 5], ['100', 20], ['135', 15]]) == [['256', 5], ['452', 10], ['135', 15], ['100', 20]]",
            "assert Sort([['rishi', 10], ['akhil', 5], ['ramya', 20], ['gaur', 15]]) == [['akhil', 5], ['rishi', 10], ['gaur', 15], ['ramya', 20]]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 334,
        "code": [
            "def check_Validity(a, b, c):\n    if a + b > c and a + c > b and b + c > a:\n        return True\n    else:\n        return False"
        ],
        "test_list": [
            "assert check_Validity(1,2,3) == False",
            "assert check_Validity(2,3,5) == False",
            "assert check_Validity(7,10,5) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 335,
        "code": [
            "def ap_sum(a, l, d):\n    n = (l - a) // d + 1\n    return (n * (a + l)) // 2"
        ],
        "test_list": [
            "assert ap_sum(1,5,2)==25",
            "assert ap_sum(2,6,4)==72",
            "assert ap_sum(1,4,5)==34"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 336,
        "code": [
            "def check_monthnum(month_name):\n    month_days = {\n        \"January\": 31, \"February\": 28, \"March\": 31, \"April\": 30, \n        \"May\": 31, \"June\": 30, \"July\": 31, \"August\": 31, \n        \"September\": 30, \"October\": 31, \"November\": 30, \"December\": 31\n    }\n    return month_days.get(month_name, 0) >= 28"
        ],
        "test_list": [
            "assert check_monthnum(\"February\")==True",
            "assert check_monthnum(\"January\")==False",
            "assert check_monthnum(\"March\")==False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 337,
        "code": [
            "import re\n\ndef text_match_word(text):\n    word = \"python\"\n    pattern = rf\"{word}[.!,?:;]*$\"\n    if re.search(pattern, text, re.IGNORECASE):\n        return 'Found a match!'\n    else:\n        return 'No match found!'"
        ],
        "test_list": [
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"python.\")==('Found a match!')",
            "assert text_match_word(\"  lang  .\")==('Not matched!')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 338,
        "code": [
            "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i + length]\n            if substring[0] == substring[-1]:\n                count += 1\n    return count"
        ],
        "test_list": [
            "assert count_Substring_With_Equal_Ends('aba') == 4",
            "assert count_Substring_With_Equal_Ends('abcab') == 7",
            "assert count_Substring_With_Equal_Ends('abc') == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 339,
        "code": [
            "def find_Divisor(start, end):\n    max_count = 0\n    max_divisor = None\n    for i in range(start, end + 1):\n        for j in range(1, i + 1):\n            if i % j == 0:\n                count = sum(1 for k in range(start, end + 1) if k % j == 0)\n                if count > max_count:\n                    max_count = count\n                    max_divisor = j\n    return max_divisor"
        ],
        "test_list": [
            "assert find_Divisor(2,2) == 2",
            "assert find_Divisor(2,5) == 2",
            "assert find_Divisor(5,10) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 340,
        "code": [
            "def sum_three_smallest_nums(nums):\n    positives = [num for num in nums if num > 0]\n    positives.sort()\n    return sum(positives[:3])"
        ],
        "test_list": [
            "assert sum_three_smallest_nums([10,20,30,40,50,60,7]) == 37",
            "assert sum_three_smallest_nums([1,2,3,4,5]) == 6",
            "assert sum_three_smallest_nums([0,1,2,3,4,5]) == 6"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 341,
        "code": [
            "def set_to_tuple(s):\n    return tuple(sorted(s))"
        ],
        "test_list": [
            "assert set_to_tuple({1, 2, 3, 4, 5}) == (1, 2, 3, 4, 5)",
            "assert set_to_tuple({6, 7, 8, 9, 10, 11}) == (6, 7, 8, 9, 10, 11)",
            "assert set_to_tuple({12, 13, 14, 15, 16}) == (12, 13, 14, 15, 16)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 342,
        "code": [
            "import heapq\n\ndef find_minimum_range(arrays):\n    pq = []\n    min_range = float('inf')\n    max_val, min_val = float('-inf'), float('inf')\n    for array in arrays:\n        if array:\n            min_val = min(min_val, array[0])\n            max_val = max(max_val, array[0])\n            heapq.heappush(pq, (array[0], array, 0))\n    \n    while len(pq) == len(arrays):\n        val, array, idx = heapq.heappop(pq)\n        if idx + 1 < len(array):\n            heapq.heappush(pq, (array[idx + 1], array, idx + 1))\n        if max_val - min_val < min_range:\n            min_range = max_val - min_val\n            result = (min_val, max_val)\n    \n    return result"
        ],
        "test_list": [
            "assert find_minimum_range([[3, 6, 8, 10, 15], [1, 5, 12], [4, 8, 15, 16], [2, 6]]) == (4, 6)",
            "assert find_minimum_range([[ 2, 3, 4, 8, 10, 15 ], [1, 5, 12], [7, 8, 15, 16], [3, 6]]) == (4, 7)",
            "assert find_minimum_range([[4, 7, 9, 11, 16], [2, 6, 13], [5, 9, 16, 17], [3, 7]]) == (5, 7)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 343,
        "code": [
            "def dig_let(s):\n    digits = sum(c.isdigit() for c in s)\n    letters = sum(c.isalpha() for c in s)\n    return digits, letters"
        ],
        "test_list": [
            "assert dig_let(\"python\")==(6,0)",
            "assert dig_let(\"program\")==(7,0)",
            "assert dig_let(\"python3.0\")==(6,2)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 344,
        "code": [
            "def count_Odd_Squares(start, end):\n    count = 0\n    for num in range(start, end + 1):\n        factors = [i for i in range(1, num + 1) if num % i == 0]\n        for factor in factors:\n            if factor % 2 != 0:\n                count += 1\n                break\n    return count"
        ],
        "test_list": [
            "assert count_Odd_Squares(5,100) == 8",
            "assert count_Odd_Squares(8,65) == 6",
            "assert count_Odd_Squares(2,5) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 345,
        "code": [
            "def diff_consecutivenums(lst):\n    return [j - i for i, j in zip(lst, lst[1:])]"
        ],
        "test_list": [
            "assert diff_consecutivenums([1, 1, 3, 4, 4, 5, 6, 7])==[0, 2, 1, 0, 1, 1, 1]",
            "assert diff_consecutivenums([4, 5, 8, 9, 6, 10])==[1, 3, 1, -3, 4]",
            "assert diff_consecutivenums([0, 1, 2, 3, 4, 4, 4, 4, 5, 7])==[1, 1, 1, 1, 0, 0, 0, 1, 2]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 346,
        "code": [
            "def zigzag(n, k):\n    if k == 1 or k == n:\n        return 1\n    else:\n        return zigzag(n-1, k-1) + zigzag(n-1, k)"
        ],
        "test_list": [
            "assert zigzag(4, 3) == 5",
            "assert zigzag(4, 2) == 4",
            "assert zigzag(3, 1) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 347,
        "code": [
            "def count_Squares(m, n):\n    return m * n * (m * n + 1) // 2"
        ],
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(1,2) == 2",
            "assert count_Squares(2,2) == 5"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 348,
        "code": [
            "def find_ways(n):\n    MOD = 1000000007\n    dp = [0] * (n + 1)\n    dp[0] = 1\n    for i in range(1, n + 1):\n        dp[i] += dp[i - 1]\n        if i >= 1:\n            dp[i] += dp[i - 1]\n        dp[i] %= MOD\n    return dp[n]"
        ],
        "test_list": [
            "assert find_ways(4) == 2",
            "assert find_ways(6) == 5",
            "assert find_ways(8) == 14"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 349,
        "code": [
            "def check(s):\n    for char in s:\n        if char not in \"01\":\n            return \"No\"\n    return \"Yes\""
        ],
        "test_list": [
            "assert check(\"01010101010\") == \"Yes\"",
            "assert check(\"name0\") == \"No\"",
            "assert check(\"101\") == \"Yes\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 350,
        "code": [
            "def minimum_Length(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    max_count = max(char_count.values())\n    return len(s) - max_count"
        ],
        "test_list": [
            "assert minimum_Length(\"mnm\") == 1",
            "assert minimum_Length(\"abcda\") == 3",
            "assert minimum_Length(\"abcb\") == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 351,
        "code": [
            "def first_Element(arr, n, k):\n    count_dict = {}\n    for i in range(n):\n        if arr[i] not in count_dict:\n            count_dict[arr[i]] = 0\n        count_dict[arr[i]] += 1\n        if count_dict[arr[i]] == k:\n            return arr[i]\n    return None"
        ],
        "test_list": [
            "assert first_Element([0,1,2,3,4,5],6,1) == 0",
            "assert first_Element([1,2,1,3,4],5,2) == 1",
            "assert first_Element([2,3,4,3,5,7,1,2,3,5],10,2) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 352,
        "code": [
            "def unique_Characters(s):\n    return len(s) == len(set(s))"
        ],
        "test_list": [
            "assert unique_Characters('aba') == False",
            "assert unique_Characters('abc') == True",
            "assert unique_Characters('abab') == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 353,
        "code": [
            "def remove_column(lst, col_idx):\n    return [row[:col_idx] + row[col_idx+1:] for row in lst]"
        ],
        "test_list": [
            "assert remove_column([[1, 2, 3], [2, 4, 5], [1, 1, 1]],0)==[[2, 3], [4, 5], [1, 1]]",
            "assert remove_column([[1, 2, 3], [-2, 4, -5], [1, -1, 1]],2)==[[1, 2], [-2, 4], [1, -1]]",
            "assert remove_column([[1, 3], [5, 7], [1, 3], [13, 15, 17], [5, 7], [9, 11]],0)==[[3], [7], [3], [15, 17], [7], [11]]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 354,
        "code": [
            "def tn_ap(a, d, n):\n    return a + (n-1)*d"
        ],
        "test_list": [
            "assert tn_ap(1,5,2)==9",
            "assert tn_ap(2,6,4)==22",
            "assert tn_ap(1,4,5)==16"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 355,
        "code": [
            "import math\n\ndef count_Rectangles(r):\n    radius_squared = r * r\n    count = 0\n    for x in range(-r, r + 1):\n        for y in range(-r, r + 1):\n            if x * x + y * y <= radius_squared:\n                count += 1\n    return count"
        ],
        "test_list": [
            "assert count_Rectangles(2) == 8",
            "assert count_Rectangles(1) == 1",
            "assert count_Rectangles(0) == 0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 356,
        "code": [
            "def find_angle(angle1, angle2):\n    return 180 - angle1 - angle2"
        ],
        "test_list": [
            "assert find_angle(47,89)==44",
            "assert find_angle(45,95)==40",
            "assert find_angle(50,40)==90"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 357,
        "code": [
            "def find_max(tuple_list):\n    return max(max(t) for t in tuple_list)"
        ],
        "test_list": [
            "assert find_max([(2, 4), (6, 7), (5, 1), (6, 10), (8, 7)]) == 10",
            "assert find_max([(3, 5), (7, 8), (6, 2), (7, 11), (9, 8)]) == 11",
            "assert find_max([(4, 6), (8, 9), (7, 3), (8, 12), (10, 9)]) == 12"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 358,
        "code": [
            "def moddiv_list(list1, list2):\n    return list(map(lambda x, y: x % y, list1, list2))"
        ],
        "test_list": [
            "assert moddiv_list([4,5,6],[1, 2, 3])==[0, 1, 0]",
            "assert moddiv_list([3,2],[1,4])==[0, 2]",
            "assert moddiv_list([90,120],[50,70])==[40, 50]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 359,
        "code": [
            "def Check_Solution(a, b, c):\n    D = b**2 - 4*a*c\n    if D < 0:\n        return \"No real roots exist\"\n    elif D == 0:\n        root = -b / (2*a)\n        if 2*root == root:\n            return \"Yes\"\n        else:\n            return \"No\"\n    else:\n        root1 = (-b + D**0.5) / (2*a)\n        root2 = (-b - D**0.5) / (2*a)\n        if root1 == 2*root2 or root2 == 2*root1:\n            return \"Yes\"\n        else:\n            return \"No\""
        ],
        "test_list": [
            "assert Check_Solution(1,3,2) == \"Yes\"",
            "assert Check_Solution(1,2,3) == \"No\"",
            "assert Check_Solution(1,-5,6) == \"No\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 360,
        "code": [
            "def get_carol(n):\n    if n <= 0:\n        return \"Input should be a positive integer\"\n    else:\n        carol_num = 1\n        for _ in range(n - 1):\n            carol_num = carol_num * 2 + 1\n        return carol_num"
        ],
        "test_list": [
            "assert get_carol(2) == 7",
            "assert get_carol(4) == 223",
            "assert get_carol(5) == 959"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 361,
        "code": [
            "def remove_empty(lst):\n    return [i for i in lst if i != []]"
        ],
        "test_list": [
            "assert remove_empty([[], [], [], 'Red', 'Green', [1,2], 'Blue', [], []])==['Red', 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [],[],[], 'Green', [1,2], 'Blue', [], []])==[ 'Green', [1, 2], 'Blue']",
            "assert remove_empty([[], [], [], 'Python',[],[], 'programming', 'language',[],[],[], [], []])==['Python', 'programming', 'language']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 362,
        "code": [
            "def max_occurrences(lst):\n    from collections import Counter\n    count = Counter(lst)\n    max_count = max(count.values())\n    max_items = [item for item, freq in count.items() if freq == max_count]\n    return max_items[0]"
        ],
        "test_list": [
            "assert max_occurrences([1,2,3,1,2,3,12,4,2]) ==  2",
            "assert max_occurrences([1,2,6,7,0,1,0,1,0]) == 1,0",
            "assert max_occurrences([1,2,3,1,2,4,1]) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 363,
        "code": [
            "def add_K_element(input_list, k):\n    return [tuple(i + k for i in t) for t in input_list]"
        ],
        "test_list": [
            "assert add_K_element([(1, 3, 4), (2, 4, 6), (3, 8, 1)], 4) == [(5, 7, 8), (6, 8, 10), (7, 12, 5)]",
            "assert add_K_element([(1, 2, 3), (4, 5, 6), (7, 8, 9)], 8) == [(9, 10, 11), (12, 13, 14), (15, 16, 17)]",
            "assert add_K_element([(11, 12, 13), (14, 15, 16), (17, 18, 19)], 9) == [(20, 21, 22), (23, 24, 25), (26, 27, 28)]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 364,
        "code": [
            "def min_flip_to_make_string_alternate(s):\n    return min(s.count(\"01\" if i % 2 == 0 else \"10\") for i in range(2))"
        ],
        "test_list": [
            "assert min_flip_to_make_string_alternate(\"0001010111\") == 2",
            "assert min_flip_to_make_string_alternate(\"001\") == 1",
            "assert min_flip_to_make_string_alternate(\"010111011\") == 2 "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 365,
        "code": [
            "def count_Digit(n):\n    return len(str(abs(n)))"
        ],
        "test_list": [
            "assert count_Digit(12345) == 5",
            "assert count_Digit(11223305) == 8",
            "assert count_Digit(4123459) == 7"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 366,
        "code": [
            "def adjacent_num_product(nums):\n    if len(nums) < 2:\n        return None\n    max_product = float('-inf')\n    for i in range(len(nums) - 1):\n        product = nums[i] * nums[i + 1]\n        if product > max_product:\n            max_product = product\n    return max_product"
        ],
        "test_list": [
            "assert adjacent_num_product([1,2,3,4,5,6]) == 30",
            "assert adjacent_num_product([1,2,3,4,5]) == 20",
            "assert adjacent_num_product([2,3]) == 6"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 367,
        "code": [
            "class Node:\n    def __init__(self, value):\n        self.value = value\n        self.left = None\n        self.right = None\n\ndef get_height(node):\n    if node is None:\n        return 0\n    return 1 + max(get_height(node.left), get_height(node.right))\n\ndef is_tree_balanced(root):\n    if root is None:\n        return True\n\n    left_height = get_height(root.left)\n    right_height = get_height(root.right)\n\n    if abs(left_height - right_height) > 1:\n        return False\n\n    return is_tree_balanced(root.left) and is_tree_balanced(root.right)"
        ],
        "test_list": [
            "assert is_tree_balanced(root) == False",
            "assert is_tree_balanced(root1) == True",
            "assert is_tree_balanced(root2) == False "
        ],
        "test_setup_code": "root = Node(1) \r\nroot.left = Node(2) \r\nroot.right = Node(3) \r\nroot.left.left = Node(4) \r\nroot.left.right = Node(5) \r\nroot.left.left.left = Node(8) \r\nroot1 = Node(1) \r\nroot1.left = Node(2) \r\nroot1.right = Node(3) \r\nroot1.left.left = Node(4) \r\nroot1.left.right = Node(5) \r\nroot1.right.left = Node(6) \r\nroot1.left.left.left = Node(7)\r\nroot2 = Node(1) \r\nroot2.left = Node(2) \r\nroot2.right = Node(3) \r\nroot2.left.left = Node(4) \r\nroot2.left.right = Node(5)\r\nroot2.left.left.left = Node(7)"
    },
    {
        "task_id": 368,
        "code": [
            "def repeat_tuples(t, n):\n    return tuple([t] * n)"
        ],
        "test_list": [
            "assert repeat_tuples((1, 3), 4) == ((1, 3), (1, 3), (1, 3), (1, 3))",
            "assert repeat_tuples((1, 2), 3) == ((1, 2), (1, 2), (1, 2))",
            "assert repeat_tuples((3, 4), 5) == ((3, 4), (3, 4), (3, 4), (3, 4), (3, 4))"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 369,
        "code": [
            "def lateralsurface_cuboid(l, w, h):\n    return 2*h*(l + w)"
        ],
        "test_list": [
            "assert lateralsurface_cuboid(8,5,6)==156",
            "assert lateralsurface_cuboid(7,9,10)==320",
            "assert lateralsurface_cuboid(10,20,30)==1800"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 370,
        "code": [
            "def float_sort(input_list):\n    return sorted(input_list, key=lambda x: float(x[1]), reverse=True)"
        ],
        "test_list": [
            "assert float_sort([('item1', '12.20'), ('item2', '15.10'), ('item3', '24.5')])==[('item3', '24.5'), ('item2', '15.10'), ('item1', '12.20')] ",
            "assert float_sort([('item1', '15'), ('item2', '10'), ('item3', '20')])==[('item3', '20'), ('item1', '15'), ('item2', '10')] ",
            "assert float_sort([('item1', '5'), ('item2', '10'), ('item3', '14')])==[('item3', '14'), ('item2', '10'), ('item1', '5')] "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 371,
        "code": [
            "def smallest_missing(arr, start, end):\n    for i in range(start, end + 1):\n        if i not in arr:\n            return i\n    return end + 1"
        ],
        "test_list": [
            "assert smallest_missing([0, 1, 2, 3, 4, 5, 6], 0, 6) == 7",
            "assert smallest_missing([0, 1, 2, 6, 9, 11, 15], 0, 6) == 3",
            "assert smallest_missing([1, 2, 3, 4, 6, 9, 11, 15], 0, 7) == 0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 372,
        "code": [
            "import heapq\n\ndef heap_ascending(lst):\n    heapq.heapify(lst)\n    return [heapq.heappop(lst) for _ in range(len(lst))]"
        ],
        "test_list": [
            "assert heap_assending([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1])==[1, 2, 3, 4, 7, 8, 9, 9, 10, 14, 18]",
            "assert heap_assending([25, 35, 22, 85, 14, 65, 75, 25, 58])==[14, 22, 25, 25, 35, 58, 65, 75, 85]",
            "assert heap_assending([1, 3, 5, 7, 9, 2, 4, 6, 8, 0])==[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 373,
        "code": [
            "def volume_cuboid(length, width, height):\n    return length * width * height"
        ],
        "test_list": [
            "assert volume_cuboid(1,2,3)==6",
            "assert volume_cuboid(5,7,9)==315",
            "assert volume_cuboid(10,15,21)==3150"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 374,
        "code": [
            "def permute_string(s):\n    if len(s) == 1:\n        return [s]\n    permutations = []\n    for i, char in enumerate(s):\n        remaining_str = s[:i] + s[i+1:]\n        for p in permute_string(remaining_str):\n            permutations.append(char + p)\n    return permutations"
        ],
        "test_list": [
            "assert permute_string('ab')==['ab', 'ba']",
            "assert permute_string('abc')==['abc', 'bac', 'bca', 'acb', 'cab', 'cba']",
            "assert permute_string('abcd')==['abcd', 'bacd', 'bcad', 'bcda', 'acbd', 'cabd', 'cbad', 'cbda', 'acdb', 'cadb', 'cdab', 'cdba', 'abdc', 'badc', 'bdac', 'bdca', 'adbc', 'dabc', 'dbac', 'dbca', 'adcb', 'dacb', 'dcab', 'dcba']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 375,
        "code": [
            "def round_num(num, multiple):\n    return num - (num % multiple) + (multiple if num % multiple >= multiple / 2 else 0)"
        ],
        "test_list": [
            "assert round_num(4722,10)==4720",
            "assert round_num(1111,5)==1110",
            "assert round_num(219,2)==218"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 376,
        "code": [
            "def remove_replica(t):\n    seen = set()\n    return tuple('MSP' if x in seen else seen.add(x) or x for x in t)"
        ],
        "test_list": [
            "assert remove_replica((1, 1, 4, 4, 4, 5, 5, 6, 7, 7)) == (1, 'MSP', 4, 'MSP', 'MSP', 5, 'MSP', 6, 7, 'MSP')",
            "assert remove_replica((2, 3, 4, 4, 5, 6, 6, 7, 8, 9, 9)) == (2, 3, 4, 'MSP', 5, 6, 'MSP', 7, 8, 9, 'MSP')",
            "assert remove_replica((2, 2, 5, 4, 5, 7, 5, 6, 7, 7)) == (2, 'MSP', 5, 4, 'MSP', 7, 'MSP', 6, 'MSP', 'MSP')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 377,
        "code": [
            "def remove_Char(s, c):\n    return s.replace(c, '')"
        ],
        "test_list": [
            "assert remove_Char(\"aba\",'a') == \"b\"",
            "assert remove_Char(\"toggle\",'g') == \"tole\"",
            "assert remove_Char(\"aabbc\",'b') == \"aac\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 378,
        "code": [
            "def move_first(lst):\n    return [lst[-1]] + lst[:-1]"
        ],
        "test_list": [
            "assert move_first([1,2,3,4]) == [4,1,2,3]",
            "assert move_first([0,1,2,3]) == [3,0,1,2]",
            "assert move_first([9,8,7,1]) == [1,9,8,7]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 379,
        "code": [
            "def surfacearea_cuboid(l, w, h):\n    return 2*l*w + 2*l*h + 2*w*h"
        ],
        "test_list": [
            "assert surfacearea_cuboid(1,2,3)==22",
            "assert surfacearea_cuboid(5,7,9)==286",
            "assert surfacearea_cuboid(10,15,21)==1350"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 380,
        "code": [
            "def multi_list(rows, cols):\n    return [[i*j for j in range(cols)] for i in range(rows)]"
        ],
        "test_list": [
            "assert multi_list(3,4)==[[0, 0, 0, 0], [0, 1, 2, 3], [0, 2, 4, 6]] ",
            "assert multi_list(5,7)==[[0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6], [0, 2, 4, 6, 8, 10, 12], [0, 3, 6, 9, 12, 15, 18], [0, 4, 8, 12, 16, 20, 24]]",
            "assert multi_list(10,15)==[[0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0], [0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14], [0, 2, 4, 6, 8, 10, 12, 14, 16, 18, 20, 22, 24, 26, 28], [0, 3, 6, 9, 12, 15, 18, 21, 24, 27, 30, 33, 36, 39, 42], [0, 4, 8, 12, 16, 20, 24, 28, 32, 36, 40, 44, 48, 52, 56], [0, 5, 10, 15, 20, 25, 30, 35, 40, 45, 50, 55, 60, 65, 70], [0, 6, 12, 18, 24, 30, 36, 42, 48, 54, 60, 66, 72, 78, 84], [0, 7, 14, 21, 28, 35, 42, 49, 56, 63, 70, 77, 84, 91, 98], [0, 8, 16, 24, 32, 40, 48, 56, 64, 72, 80, 88, 96, 104, 112], [0, 9, 18, 27, 36, 45, 54, 63, 72, 81, 90, 99, 108, 117, 126]]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 381,
        "code": [
            "def index_on_inner_list(list_of_lists, index):\n    return sorted(list_of_lists, key=lambda x: x[index])"
        ],
        "test_list": [
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,0)==[('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99), ('Wyatt Knott', 91, 94)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,1)==[('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98), ('Brady Kent', 97, 96), ('Greyson Fulton', 98, 99)]",
            "assert index_on_inner_list([('Greyson Fulton', 98, 99), ('Brady Kent', 97, 96), ('Wyatt Knott', 91, 94), ('Beau Turnbull', 94, 98)] ,2)==[('Wyatt Knott', 91, 94), ('Brady Kent', 97, 96), ('Beau Turnbull', 94, 98), ('Greyson Fulton', 98, 99)]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 382,
        "code": [
            "def find_rotation_count(arr):\n    for i in range(len(arr) - 1):\n        if arr[i] > arr[i + 1]:\n            return i + 1\n    return 0"
        ],
        "test_list": [
            "assert find_rotation_count([8, 9, 10, 1, 2, 3, 4, 5, 6, 7]) == 3",
            "assert find_rotation_count([8, 9, 10,2, 5, 6]) == 3",
            "assert find_rotation_count([2, 5, 6, 8, 9, 10]) == 0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 383,
        "code": [
            "def even_bit_toggle_number(n):\n    return n ^ 0xAAAAAAAA"
        ],
        "test_list": [
            "assert even_bit_toggle_number(10) == 15",
            "assert even_bit_toggle_number(20) == 1",
            "assert even_bit_toggle_number(30) == 11"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 384,
        "code": [
            "def frequency_Of_Smallest(n, lst):\n    return lst.count(min(lst))"
        ],
        "test_list": [
            "assert frequency_Of_Smallest(5,[1,2,3,4,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,1,2,5,6,2,3]) == 1",
            "assert frequency_Of_Smallest(7,[3,3,6,3,7,4,9]) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 385,
        "code": [
            "def get_perrin(n):\n    if n == 1:\n        return 3\n    elif n == 2:\n        return 0\n    elif n == 3:\n        return 2\n    else:\n        return get_perrin(n-2) + get_perrin(n-3)"
        ],
        "test_list": [
            "assert get_perrin(9) == 12",
            "assert get_perrin(4) == 2",
            "assert get_perrin(6) == 5"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 386,
        "code": [
            "def swap_count(s):\n    stack = []\n    swap = 0\n    for char in s:\n        if char == '[':\n            stack.append(char)\n        else:\n            if stack:\n                stack.pop()\n            else:\n                swap += 1\n    return swap + len(stack)"
        ],
        "test_list": [
            "assert swap_count(\"[]][][\") == 2",
            "assert swap_count(\"[[][]]\") == 0",
            "assert swap_count(\"[[][]]][\") == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 387,
        "code": [
            "def even_or_odd(hex_num):\n    decimal_num = int(hex_num, 16)\n    if decimal_num % 2 == 0:\n        return \"Even\"\n    else:\n        return \"Odd\""
        ],
        "test_list": [
            "assert even_or_odd(\"AB3454D\") ==\"Odd\"",
            "assert even_or_odd(\"ABC\") == \"Even\"",
            "assert even_or_odd(\"AAD\") == \"Odd\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 388,
        "code": [
            "def highest_Power_of_2(n):\n    power = 1\n    while power * 2 <= n:\n        power *= 2\n    return power"
        ],
        "test_list": [
            "assert highest_Power_of_2(10) == 8",
            "assert highest_Power_of_2(19) == 16",
            "assert highest_Power_of_2(32) == 32"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 389,
        "code": [
            "def find_lucas(n):\n    if n == 1:\n        return 2\n    elif n == 2:\n        return 1\n    else:\n        a, b = 2, 1\n        for _ in range(2, n):\n            a, b = b, a + b\n        return b"
        ],
        "test_list": [
            "assert find_lucas(9) == 76",
            "assert find_lucas(4) == 7",
            "assert find_lucas(3) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 390,
        "code": [
            "def add_string(lst, str_format):\n    return [str_format.format(i) for i in lst]"
        ],
        "test_list": [
            "assert add_string([1,2,3,4],'temp{0}')==['temp1', 'temp2', 'temp3', 'temp4']",
            "assert add_string(['a','b','c','d'], 'python{0}')==[ 'pythona', 'pythonb', 'pythonc', 'pythond']",
            "assert add_string([5,6,7,8],'string{0}')==['string5', 'string6', 'string7', 'string8']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 391,
        "code": [
            "def convert_list_dictionary(*lists):\n    result = []\n    for i in range(len(lists[0])):\n        dictionary = {}\n        dictionary[lists[0][i]] = {lists[1][i]: lists[2][i]}\n        result.append(dictionary)\n    return result"
        ],
        "test_list": [
            "assert convert_list_dictionary([\"S001\", \"S002\", \"S003\", \"S004\"],[\"Adina Park\", \"Leyton Marsh\", \"Duncan Boyle\", \"Saim Richards\"] ,[85, 98, 89, 92])==[{'S001': {'Adina Park': 85}}, {'S002': {'Leyton Marsh': 98}}, {'S003': {'Duncan Boyle': 89}}, {'S004': {'Saim Richards': 92}}]",
            "assert convert_list_dictionary([\"abc\",\"def\",\"ghi\",\"jkl\"],[\"python\",\"program\",\"language\",\"programs\"],[100,200,300,400])==[{'abc':{'python':100}},{'def':{'program':200}},{'ghi':{'language':300}},{'jkl':{'programs':400}}]",
            "assert convert_list_dictionary([\"A1\",\"A2\",\"A3\",\"A4\"],[\"java\",\"C\",\"C++\",\"DBMS\"],[10,20,30,40])==[{'A1':{'java':10}},{'A2':{'C':20}},{'A3':{'C++':30}},{'A4':{'DBMS':40}}]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 392,
        "code": [
            "def get_max_sum(n, memo={}):\n    if n in memo:\n        return memo[n]\n    if n < 2:\n        return n\n    max_sum = max(get_max_sum(n//2, memo) + get_max_sum(n//3, memo) + get_max_sum(n//4, memo) + get_max_sum(n//5, memo), n)\n    memo[n] = max_sum\n    return max_sum"
        ],
        "test_list": [
            "assert get_max_sum(60) == 106",
            "assert get_max_sum(10) == 12",
            "assert get_max_sum(2) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 393,
        "code": [
            "max_length_list = lambda lists: max(((len(sublist), sublist) for sublist in lists))"
        ],
        "test_list": [
            "assert max_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(5,[1,2,3,4,5])",
            "assert max_length_list([[3,4,5],[6,7,8,9],[10,11,12]])==(4,[6,7,8,9])"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 394,
        "code": [
            "def check_distinct(t):\n    return len(t) == len(set(t))"
        ],
        "test_list": [
            "assert check_distinct((1, 4, 5, 6, 1, 4)) == False",
            "assert check_distinct((1, 4, 5, 6)) == True",
            "assert check_distinct((2, 3, 4, 5, 6)) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 395,
        "code": [
            "def first_non_repeating_character(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n    for char in s:\n        if char_count[char] == 1:\n            return char\n    return None"
        ],
        "test_list": [
            "assert first_non_repeating_character(\"abcabc\") == None",
            "assert first_non_repeating_character(\"abc\") == \"a\"",
            "assert first_non_repeating_character(\"ababc\") == \"c\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 396,
        "code": [
            "import re\n\ndef check_char(s):\n    if re.match(r\"^([^a-zA-Z]?)(\\1)$\", s):\n        return \"Valid\"\n    else:\n        return \"Invalid\""
        ],
        "test_list": [
            "assert check_char(\"abba\") == \"Valid\"",
            "assert check_char(\"a\") == \"Valid\"",
            "assert check_char(\"abcd\") == \"Invalid\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 397,
        "code": [
            "def median_numbers(a, b, c):\n    if a >= b:\n        if b >= c:\n            return b\n        elif a >= c:\n            return c\n        else:\n            return a\n    else:\n        if a >= c:\n            return a\n        elif b >= c:\n            return c\n        else:\n            return b"
        ],
        "test_list": [
            "assert median_numbers(25,55,65)==55.0",
            "assert median_numbers(20,10,30)==20.0",
            "assert median_numbers(15,45,75)==45.0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 398,
        "code": [
            "def sum_of_digits(numbers):\n    total_sum = 0\n    for num in numbers:\n        total_sum += sum(int(digit) for digit in str(num))\n    return total_sum"
        ],
        "test_list": [
            "assert sum_of_digits([10,2,56])==14",
            "assert sum_of_digits([[10,20,4,5,'b',70,'a']])==19",
            "assert sum_of_digits([10,20,-4,5,-70])==19"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 399,
        "code": [
            "def bitwise_xor(t1, t2):\n    return tuple(a ^ b for a, b in zip(t1, t2))"
        ],
        "test_list": [
            "assert bitwise_xor((10, 4, 6, 9), (5, 2, 3, 3)) == (15, 6, 5, 10)",
            "assert bitwise_xor((11, 5, 7, 10), (6, 3, 4, 4)) == (13, 6, 3, 14)",
            "assert bitwise_xor((12, 6, 8, 11), (7, 4, 5, 6)) == (11, 2, 13, 13)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 400,
        "code": [
            "def extract_freq(tuples):\n    unique_tuples = set(tuple(sorted(t)) for t in tuples)\n    return len(unique_tuples)"
        ],
        "test_list": [
            "assert extract_freq([(3, 4), (1, 2), (4, 3), (5, 6)] ) == 3",
            "assert extract_freq([(4, 15), (2, 3), (5, 4), (6, 7)] ) == 4",
            "assert extract_freq([(5, 16), (2, 3), (6, 5), (6, 9)] ) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 401,
        "code": [
            "def add_nested_tuples(t1, t2):\n    return tuple(tuple(a + b for a, b in zip(t1_i, t2_i)) for t1_i, t2_i in zip(t1, t2))"
        ],
        "test_list": [
            "assert add_nested_tuples(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((7, 10), (7, 14), (3, 10), (8, 13))",
            "assert add_nested_tuples(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((9, 12), (9, 16), (5, 12), (10, 15))",
            "assert add_nested_tuples(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((11, 14), (11, 18), (7, 14), (12, 17))"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 402,
        "code": [
            "def power(x, y, p):\n    res = 1\n    x = x % p\n    while y > 0:\n        if y & 1:\n            res = (res * x) % p\n        y = y >> 1\n        x = (x * x) % p\n    return res\n\ndef ncr_modp(n, r, p):\n    num = 1\n    den = 1\n    for i in range(1, r + 1):\n        num = (num * (n - i + 1)) % p\n        den = (den * i) % p\n    return (num * power(den, p - 2, p)) % p"
        ],
        "test_list": [
            "assert ncr_modp(10,2,13)==6",
            "assert ncr_modp(15,12,43)==25",
            "assert ncr_modp(17,9,18)==10"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 403,
        "code": [
            "import re\n\ndef is_valid_URL(url):\n    pattern = re.compile(\n        r'^(?:http|ftp)s?://' # http:// or https://\n        r'(?:(?:[A-Z0-9](?:[A-Z0-9-]{0,61}[A-Z0-9])?\\.)+(?:[A-Z]{2,6}\\.?|[A-Z0-9-]{2,}(?:(?:[xX]-[A-Fa-f0-9]{1,8})|[0-9]+)?))' #domain...\n        r'(?:/?|[/?]\\S+)$', re.IGNORECASE)\n    return bool(pattern.match(url))"
        ],
        "test_list": [
            "assert is_valid_URL(\"https://www.google.com\") == True",
            "assert is_valid_URL(\"https:/www.gmail.com\") == False",
            "assert is_valid_URL(\"https:// www.redit.com\") == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 404,
        "code": [
            "def minimum(a, b):\n    return a if a < b else b"
        ],
        "test_list": [
            "assert minimum(1,2) == 1",
            "assert minimum(-5,-4) == -5",
            "assert minimum(0,0) == 0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 405,
        "code": [
            "def check_tuplex(tup, elem):\n    return elem in tup"
        ],
        "test_list": [
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'r')==True",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\", \"e\"),'5')==False",
            "assert check_tuplex((\"w\", 3, \"r\", \"e\", \"s\", \"o\", \"u\", \"r\", \"c\",\"e\"),3)==True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 406,
        "code": [
            "def find_Parity(n):\n    bin_n = bin(n)[2:]\n    count = sum(c == '1' for c in bin_n)\n    if count % 2 == 0:\n        return \"Even Parity\"\n    else:\n        return \"Odd Parity\""
        ],
        "test_list": [
            "assert find_Parity(12) == \"Even Parity\"",
            "assert find_Parity(7) == \"Odd Parity\"",
            "assert find_Parity(10) == \"Even Parity\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 407,
        "code": [
            "def rearrange_bigger(n):\n    digits = [int(x) for x in str(n)]\n    digits.sort(reverse=True)\n    for i in range(len(digits) - 1, 0, -1):\n        if digits[i - 1] < digits[i]:\n            break\n    else:\n        return -1\n    for j in range(len(digits) - 1, i - 1, -1):\n        if digits[i - 1] < digits[j]:\n            digits[i - 1], digits[j] = digits[j], digits[i - 1]\n            break\n    digits[i:] = digits[i:][::-1]\n    return int(''.join(map(str, digits)))"
        ],
        "test_list": [
            "assert rearrange_bigger(12)==21",
            "assert rearrange_bigger(10)==False",
            "assert rearrange_bigger(102)==120"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 408,
        "code": [
            "def k_smallest_pairs(nums1, nums2, k):\n    import heapq\n    if not nums1 or not nums2:\n        return []\n    heap = []\n    for i in range(min(k, len(nums1))):\n        heapq.heappush(heap, (nums1[i] + nums2[0], i, 0))\n    res = []\n    while heap and len(res) < k:\n        _, i, j = heapq.heappop(heap)\n        res.append([nums1[i], nums2[j]])\n        if j + 1 < len(nums2):\n            heapq.heappush(heap, (nums1[i] + nums2[j + 1], i, j + 1))\n    return res"
        ],
        "test_list": [
            "assert k_smallest_pairs([1,3,7],[2,4,6],2)==[[1, 2], [1, 4]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],1)==[[1, 2]]",
            "assert k_smallest_pairs([1,3,7],[2,4,6],7)==[[1, 2], [1, 4], [3, 2], [1, 6], [3, 4], [3, 6], [7, 2]]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 409,
        "code": [
            "def min_product_tuple(lst):\n    products = [a * b for a, b in lst]\n    return min(products)"
        ],
        "test_list": [
            "assert min_product_tuple([(2, 7), (2, 6), (1, 8), (4, 9)] )==8",
            "assert min_product_tuple([(10,20), (15,2), (5,10)] )==30",
            "assert min_product_tuple([(11,44), (10,15), (20,5), (12, 9)] )==100"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 410,
        "code": [
            "def min_val(lst):\n    nums = [x for x in lst if isinstance(x, (int, float))]\n    return min(nums) if nums else None"
        ],
        "test_list": [
            "assert min_val(['Python', 3, 2, 4, 5, 'version'])==2",
            "assert min_val(['Python', 15, 20, 25])==15",
            "assert min_val(['Python', 30, 20, 40, 50, 'version'])==20"
        ],
        "test_setup_code": ""
    }
]