[
    {
        "task_id": 211,
        "code": [
            "def count_Num(n):\n    count = 0\n    for i in range(n + 1):\n        bin_str = bin(i)[2:]  # convert to binary and remove '0b' prefix\n        oth_bit_set = (i & (1 << (n - 1))) != 0\n        nth_bit_set = (i & (1 << (n - (n - 1)))) != 0\n        if oth_bit_set and nth_bit_set:\n            count += 1\n    return count"
        ],
        "test_list": [
            "assert count_Num(2) == 1",
            "assert count_Num(3) == 2",
            "assert count_Num(1) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 212,
        "code": [
            "def fourth_Power_Sum(n):\n    return sum(i**4 for i in range(1, n + 1))"
        ],
        "test_list": [
            "assert fourth_Power_Sum(2) == 17",
            "assert fourth_Power_Sum(4) == 354",
            "assert fourth_Power_Sum(6) == 2275"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 213,
        "code": [
            "def concatenate_strings(tuple1, tuple2):\n    return tuple(a + b for a, b in zip(tuple1, tuple2))"
        ],
        "test_list": [
            "assert concatenate_strings((\"Manjeet\", \"Nikhil\", \"Akshat\"), (\" Singh\", \" Meherwal\", \" Garg\")) == ('Manjeet Singh', 'Nikhil Meherwal', 'Akshat Garg')",
            "assert concatenate_strings((\"Shaik\", \"Ayesha\", \"Sanya\"), (\" Dawood\", \" Begum\", \" Singh\")) == ('Shaik Dawood', 'Ayesha Begum', 'Sanya Singh')",
            "assert concatenate_strings((\"Harpreet\", \"Priyanka\", \"Muskan\"), (\"Kour\", \" Agarwal\", \"Sethi\")) == ('HarpreetKour', 'Priyanka Agarwal', 'MuskanSethi')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 214,
        "code": [
            "def degree_radian(rad):\n    return rad * 57.29577951308232  # or return rad * 5156.620156177409 / 90"
        ],
        "test_list": [
            "assert degree_radian(90)==5156.620156177409",
            "assert degree_radian(60)==3437.746770784939",
            "assert degree_radian(120)==6875.493541569878"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 215,
        "code": [
            "def decode_list(rl_encode):\n    result = []\n    for elem in rl_encode:\n        if isinstance(elem, list):\n            count, value = elem\n            result.extend([value] * count)\n        else:\n            result.append(elem)\n    return result"
        ],
        "test_list": [
            "assert decode_list([[2, 1], 2, 3, [2, 4], 5,1])==[1,1,2,3,4,4,5,1]",
            "assert decode_list(['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', [2, 'l'], 'y'])==['a', 'u', 't', 'o', 'm', 'a', 't', 'i', 'c', 'a', 'l', 'l', 'y']",
            "assert decode_list(['p', 'y', 't', 'h', 'o', 'n'])==['p', 'y', 't', 'h', 'o', 'n']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 216,
        "code": [
            "def check_subset_list(list1, list2):\n    flat_list2 = [item for sublist in list2 for item in sublist]\n    for sublist in list1:\n        for item in sublist:\n            if item not in flat_list2:\n                return False\n    return True"
        ],
        "test_list": [
            "assert check_subset_list([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==False",
            "assert check_subset_list([[2, 3, 1], [4, 5], [6, 8]],[[4, 5], [6, 8]])==True",
            "assert check_subset_list([['a', 'b'], ['e'], ['c', 'd']],[['g']])==False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 217,
        "code": [
            "def first_Repeated_Char(s):\n    char_count = {}\n    for char in s:\n        if char in char_count:\n            char_count[char] += 1\n        else:\n            char_count[char] = 1\n        if char_count[char] > 1:\n            return char\n    return None"
        ],
        "test_list": [
            "assert first_Repeated_Char(\"Google\") == \"o\"",
            "assert first_Repeated_Char(\"data\") == \"a\"",
            "assert first_Repeated_Char(\"python\") == '\\0'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 218,
        "code": [
            "def min_Operations(a, b):\n    operations = 0\n    while a != b:\n        if a < b:\n            a, b = b, a\n        a //= 2\n        operations += 1\n    return operations"
        ],
        "test_list": [
            "assert min_Operations(2,4) == 1",
            "assert min_Operations(4,10) == 4",
            "assert min_Operations(1,4) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 219,
        "code": [
            "def extract_min_max(t, k):\n    sorted_t = sorted(t)\n    return tuple(sorted_t[:k] + sorted_t[-k:])"
        ],
        "test_list": [
            "assert extract_min_max((5, 20, 3, 7, 6, 8), 2) == (3, 5, 8, 20)",
            "assert extract_min_max((4, 5, 6, 1, 2, 7), 3) == (1, 2, 4, 5, 6, 7)",
            "assert extract_min_max((2, 3, 4, 8, 9, 11, 7), 4) == (2, 3, 4, 7, 8, 9, 11)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 220,
        "code": [
            "def replace_max_specialchar(s, n):\n    chars = [' ', ',', '.']\n    for char in chars:\n        s = s.replace(char, ':', n)\n    return s"
        ],
        "test_list": [
            "assert replace_max_specialchar('Python language, Programming language.',2)==('Python:language: Programming language.')",
            "assert replace_max_specialchar('a b c,d e f',3)==('a:b:c:d e f')",
            "assert replace_max_specialchar('ram reshma,ram rahim',1)==('ram:reshma,ram rahim')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 221,
        "code": [
            "def first_even(numbers):\n    for num in numbers:\n        if num % 2 == 0:\n            return num\n    return None  # Return None if no even number is found"
        ],
        "test_list": [
            "assert first_even ([1, 3, 5, 7, 4, 1, 6, 8]) == 4",
            "assert first_even([2, 3, 4]) == 2",
            "assert first_even([5, 6, 7]) == 6"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 222,
        "code": [
            "def check_type(t):\n    return len(set(type(i) for i in t)) == 1"
        ],
        "test_list": [
            "assert check_type((5, 6, 7, 3, 5, 6) ) == True",
            "assert check_type((1, 2, \"4\") ) == False",
            "assert check_type((3, 2, 1, 4, 5) ) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 223,
        "code": [
            "def is_majority(arr, size, elem):\n    count = 0\n    for i in range(size):\n        if arr[i] == elem:\n            count += 1\n    return count > size / 2"
        ],
        "test_list": [
            "assert is_majority([1, 2, 3, 3, 3, 3, 10], 7, 3) == True",
            "assert is_majority([1, 1, 2, 4, 4, 4, 6, 6], 8, 4) == False",
            "assert is_majority([1, 1, 1, 2, 2], 5, 1) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 224,
        "code": [
            "def count_Set_Bits(n):\n    return bin(n).count('1')"
        ],
        "test_list": [
            "assert count_Set_Bits(2) == 1",
            "assert count_Set_Bits(4) == 1",
            "assert count_Set_Bits(6) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 225,
        "code": [
            "def find_Min(arr, low, high):\n    if high < low:\n        return \"Invalid input\"\n    if high == low:\n        return arr[low]\n    mid = (low + high) // 2\n    if mid < high and arr[mid+1] < arr[mid]:\n        return arr[mid+1]\n    if mid > low and arr[mid] < arr[mid - 1]:\n        return arr[mid]\n    if arr[low] >= arr[mid]:\n        return find_Min(arr, low, mid-1)\n    else:\n        return find_Min(arr, mid+1, high)"
        ],
        "test_list": [
            "assert find_Min([1,2,3,4,5],0,4) == 1",
            "assert find_Min([4,6,8],0,2) == 4",
            "assert find_Min([2,3,5,7,9],0,4) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 226,
        "code": [
            "def odd_values_string(s):\n    return s[::2]"
        ],
        "test_list": [
            "assert odd_values_string('abcdef') == 'ace'",
            "assert odd_values_string('python') == 'pto'",
            "assert odd_values_string('data') == 'dt'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 227,
        "code": [
            "def min_of_three(a, b, c):\n    return min(a, b, c)"
        ],
        "test_list": [
            "assert min_of_three(10,20,0)==0",
            "assert min_of_three(19,15,18)==15",
            "assert min_of_three(-10,-20,-30)==-30"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 228,
        "code": [
            "def all_Bits_Unset_In_The_Given_Range(n, start, end):\n    mask = ((1 << (end - start + 1)) - 1) << start\n    return (n & mask) == 0"
        ],
        "test_list": [
            "assert all_Bits_Set_In_The_Given_Range(4,1,2) == True",
            "assert all_Bits_Set_In_The_Given_Range(17,2,4) == True",
            "assert all_Bits_Set_In_The_Given_Range(39,4,6) == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 229,
        "code": [
            "def re_arrange_array(arr, n):\n    neg = [x for x in arr if x < 0]\n    pos = [x for x in arr if x >= 0]\n    return neg + pos"
        ],
        "test_list": [
            "assert re_arrange_array([-1, 2, -3, 4, 5, 6, -7, 8, 9], 9) == [-1, -3, -7, 4, 5, 6, 2, 8, 9]",
            "assert re_arrange_array([12, -14, -26, 13, 15], 5) == [-14, -26, 12, 13, 15]",
            "assert re_arrange_array([10, 24, 36, -42, -39, -78, 85], 7) == [-42, -39, -78, 10, 24, 36, 85]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 230,
        "code": [
            "def replace_blank(s, char):\n    return s.replace(' ', char)"
        ],
        "test_list": [
            "assert replace_blank(\"hello people\",'@')==(\"hello@people\")",
            "assert replace_blank(\"python program language\",'$')==(\"python$program$language\")",
            "assert replace_blank(\"blank space\",\"-\")==(\"blank-space\")"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 231,
        "code": [
            "def max_sum(triangle, n):\n    for i in range(n-2, -1, -1):\n        for j in range(i+1):\n            triangle[i][j] += max(triangle[i+1][j], triangle[i+1][j+1])\n    return triangle[0][0]"
        ],
        "test_list": [
            "assert max_sum([[1], [2,1], [3,3,2]], 3) == 6",
            "assert max_sum([[1], [1, 2], [4, 1, 12]], 3) == 15 ",
            "assert max_sum([[2], [3,2], [13,23,12]], 3) == 28"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 232,
        "code": [
            "def larg_nnum(dataset, n):\n    return sorted(dataset, reverse=True)[:n]"
        ],
        "test_list": [
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],2)==[100,90]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],5)==[100,90,80,70,60]",
            "assert larg_nnum([10, 20, 50, 70, 90, 20, 50, 40, 60, 80, 100],3)==[100,90,80]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 233,
        "code": [
            "import math\n\ndef lateralsurface_cylinder(radius, height):\n    return 2 * math.pi * radius * height"
        ],
        "test_list": [
            "assert lateralsuface_cylinder(10,5)==314.15000000000003",
            "assert lateralsuface_cylinder(4,5)==125.66000000000001",
            "assert lateralsuface_cylinder(4,10)==251.32000000000002"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 234,
        "code": [
            "def volume_cube(side):\n    return side**3"
        ],
        "test_list": [
            "assert volume_cube(3)==27",
            "assert volume_cube(2)==8",
            "assert volume_cube(5)==125"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 235,
        "code": [
            "def even_bit_set_number(n):\n    mask = 0b10101010\n    return n | mask"
        ],
        "test_list": [
            "assert even_bit_set_number(10) == 10",
            "assert even_bit_set_number(20) == 30",
            "assert even_bit_set_number(30) == 30"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 236,
        "code": [
            "def No_of_Triangle(tiers, subdivisions):\n    total = 1\n    for i in range(tiers):\n        total += i * (subdivisions ** 2)\n    return total"
        ],
        "test_list": [
            "assert No_of_Triangle(4,2) == 7",
            "assert No_of_Triangle(4,3) == 3",
            "assert No_of_Triangle(1,3) == -1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 237,
        "code": [
            "def check_occurences(tuples):\n    tuples_sorted = [' '.join(sorted(map(str, t))) for t in tuples]\n    from collections import Counter\n    return dict(Counter(tuples_sorted))"
        ],
        "test_list": [
            "assert check_occurences([(3, 1), (1, 3), (2, 5), (5, 2), (6, 3)] ) == {(1, 3): 2, (2, 5): 2, (3, 6): 1}",
            "assert check_occurences([(4, 2), (2, 4), (3, 6), (6, 3), (7, 4)] ) == {(2, 4): 2, (3, 6): 2, (4, 7): 1}",
            "assert check_occurences([(13, 2), (11, 23), (12, 25), (25, 12), (16, 23)] ) == {(2, 13): 1, (11, 23): 1, (12, 25): 2, (16, 23): 1}"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 238,
        "code": [
            "def number_of_substrings(s):\n    n = len(s)\n    return n * (n + 1) // 2"
        ],
        "test_list": [
            "assert number_of_substrings(\"abc\") == 6",
            "assert number_of_substrings(\"abcd\") == 10",
            "assert number_of_substrings(\"abcde\") == 15"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 239,
        "code": [
            "def get_total_number_of_sequences(n, m):\n    dp = [0]*(m+1)\n    dp[0] = 1\n    for _ in range(n):\n        for i in range(m, 0, -1):\n            for j in range(i//2, 0, -1):\n                dp[i] += dp[j]\n    return sum(dp)"
        ],
        "test_list": [
            "assert get_total_number_of_sequences(10, 4) == 4",
            "assert get_total_number_of_sequences(5, 2) == 6",
            "assert get_total_number_of_sequences(16, 3) == 84"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 240,
        "code": [
            "def replace_list(lst, new_lst):\n    lst = lst[:-1]\n    lst.extend(new_lst)\n    return lst"
        ],
        "test_list": [
            "assert replace_list([1, 3, 5, 7, 9, 10],[2, 4, 6, 8])==[1, 3, 5, 7, 9, 2, 4, 6, 8]",
            "assert replace_list([1,2,3,4,5],[5,6,7,8])==[1,2,3,4,5,6,7,8]",
            "assert replace_list([\"red\",\"blue\",\"green\"],[\"yellow\"])==[\"red\",\"blue\",\"yellow\"]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 241,
        "code": [
            "def array_3d(x, y, z):\n    return [[[ '*' for _ in range(x)] for _ in range(y)] for _ in range(z)]"
        ],
        "test_list": [
            "assert array_3d(6,4,3)==[[['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*', '*']]]",
            "assert array_3d(5,3,4)==[[['*', '*', '*', '*', '*'], ['*', '*', '*', '*','*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'],['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']], [['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*'], ['*', '*', '*', '*', '*']]]",
            "assert array_3d(1,2,3)==[[['*'],['*']],[['*'],['*']],[['*'],['*']]]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 242,
        "code": [
            "def count_charac(s):\n    return len(s)"
        ],
        "test_list": [
            "assert count_charac(\"python programming\")==18",
            "assert count_charac(\"language\")==8",
            "assert count_charac(\"words\")==5"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 243,
        "code": [
            "def sort_on_occurence(lst):\n    from collections import defaultdict\n    count_dict = defaultdict(list)\n    count = {}\n    for elem, name in lst:\n        count_dict[elem].append(name)\n        count[elem] = count.get(elem, 0) + 1\n    sorted_list = [(key, *values, count[key]) for key, values in sorted(count_dict.items(), key=lambda x: count[x[0]], reverse=True)]\n    return sorted_list"
        ],
        "test_list": [
            "assert sort_on_occurence([(1, 'Jake'), (2, 'Bob'), (1, 'Cara')]) == [(1, 'Jake', 'Cara', 2), (2, 'Bob', 1)]",
            "assert sort_on_occurence([('b', 'ball'), ('a', 'arm'), ('b', 'b'), ('a', 'ant')]) == [('b', 'ball', 'b', 2), ('a', 'arm', 'ant', 2)]",
            "assert sort_on_occurence([(2, 'Mark'), (3, 'Maze'), (2, 'Sara')]) == [(2, 'Mark', 'Sara', 2), (3, 'Maze', 1)]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 244,
        "code": [
            "def next_Perfect_Square(n):\n    root = int(n**0.5) + 1\n    return root ** 2",
            "print(next_Perfect_Square(35))  # Output: 36"
        ],
        "test_list": [
            "assert next_Perfect_Square(35) == 36",
            "assert next_Perfect_Square(6) == 9",
            "assert next_Perfect_Square(9) == 16"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 245,
        "code": [
            "def max_sum(arr, n):\n    incr = [1] * n\n    decr = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if arr[i] > arr[j] and incr[i] < incr[j] + 1:\n                incr[i] = incr[j] + 1\n    for i in range(n - 2, -1, -1):\n        for j in range(n - 1, i, -1):\n            if arr[i] > arr[j] and decr[i] < decr[j] + 1:\n                decr[i] = decr[j] + 1\n    max_sum = 0\n    for i in range(n):\n        max_sum = max(max_sum, incr[i] + decr[i] - 1)\n    return max_sum"
        ],
        "test_list": [
            "assert max_sum([1, 15, 51, 45, 33, 100, 12, 18, 9], 9) == 194",
            "assert max_sum([80, 60, 30, 40, 20, 10], 6) == 210",
            "assert max_sum([2, 3 ,14, 16, 21, 23, 29, 30], 8) == 138"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 246,
        "code": [
            "def babylonian_squareroot(n, precision=0.00001):\n    if n < 0:\n        raise ValueError(\"Input must be a non-negative number.\")\n    if n == 0 or n == 1:\n        return n\n    x = n\n    y = 1\n    while x - y > precision:\n        x = (x + y) / 2\n        y = n / x\n    return x"
        ],
        "test_list": [
            "assert babylonian_squareroot(10)==3.162277660168379",
            "assert babylonian_squareroot(2)==1.414213562373095",
            "assert babylonian_squareroot(9)==3.0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 247,
        "code": [
            "def lps(s):\n    n = len(s)\n    L = [[0 for x in range(n)]for x in range(n)]\n    for i in range(n):\n        L[i][i] = 1\n    for cl in range(2, n+1):\n        for i in range(n-cl+1):\n            j = i+cl-1\n            if s[i] == s[j] and cl == 2:\n                L[i][j] = 2\n            elif s[i] == s[j]:\n                L[i][j] = L[i+1][j-1] + 2\n            else:\n                L[i][j] = max(L[i][j-1], L[i+1][j])\n    return L[0][n-1]"
        ],
        "test_list": [
            "assert lps(\"TENS FOR TENS\") == 5 ",
            "assert lps(\"CARDIO FOR CARDS\") == 7",
            "assert lps(\"PART OF THE JOURNEY IS PART\") == 9 "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 248,
        "code": [
            "def harmonic_sum(n):\n    harmonicsum = 0\n    for i in range(1, n):\n        harmonicsum += 1 / i\n    return harmonicsum"
        ],
        "test_list": [
            "assert harmonic_sum(7) == 2.5928571428571425",
            "assert harmonic_sum(4) == 2.083333333333333",
            "assert harmonic_sum(19) == 3.547739657143682"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 249,
        "code": [
            "intersection_array = lambda a, b: filter(lambda x: x in b, a)"
        ],
        "test_list": [
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[1, 2, 4, 8, 9])==[1, 2, 8, 9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[3,5,7,9])==[3,5,7,9]",
            "assert intersection_array([1, 2, 3, 5, 7, 8, 9, 10],[10,20,30,40])==[10]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 250,
        "code": [
            "def count_X(t, elem):\n    return t.count(elem)"
        ],
        "test_list": [
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),4) == 0",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),10) == 3",
            "assert count_X((10, 8, 5, 2, 10, 15, 10, 8, 5, 8, 8, 2),8) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 251,
        "code": [
            "def insert_element(input_list, element):\n    result = []\n    for item in input_list:\n        result.append(element)\n        result.append(item)\n    return result"
        ],
        "test_list": [
            "assert insert_element(['Red', 'Green', 'Black'] ,'c')==['c', 'Red', 'c', 'Green', 'c', 'Black'] ",
            "assert insert_element(['python', 'java'] ,'program')==['program', 'python', 'program', 'java'] ",
            "assert insert_element(['happy', 'sad'] ,'laugh')==['laugh', 'happy', 'laugh', 'sad'] "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 252,
        "code": [
            "import cmath\ndef convert(z):\n    return (abs(z), cmath.phase(z))"
        ],
        "test_list": [
            "assert convert(1) == (1.0, 0.0)",
            "assert convert(4) == (4.0,0.0)",
            "assert convert(5) == (5.0,0.0)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 253,
        "code": [
            "def count_integer(lst):\n    return sum(1 for x in lst if isinstance(x, int))"
        ],
        "test_list": [
            "assert count_integer([1,2,'abc',1.2]) == 2",
            "assert count_integer([1,2,3]) == 3",
            "assert count_integer([1,1.2,4,5.1]) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 254,
        "code": [
            "def words_ae(s):\n    words = s.split()\n    return [word for word in words if word[0].lower() in 'ae']"
        ],
        "test_list": [
            "assert words_ae(\"python programe\")==['ame']",
            "assert words_ae(\"python programe language\")==['ame','anguage']",
            "assert words_ae(\"assert statement\")==['assert', 'atement']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 255,
        "code": [
            "import itertools\n\ndef combinations_colors(colors, r):\n    return list(itertools.product(colors, repeat=r))"
        ],
        "test_list": [
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],1)==[('Red',), ('Green',), ('Blue',)]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],2)==[('Red', 'Red'), ('Red', 'Green'), ('Red', 'Blue'), ('Green', 'Green'), ('Green', 'Blue'), ('Blue', 'Blue')]",
            "assert combinations_colors( [\"Red\",\"Green\",\"Blue\"],3)==[('Red', 'Red', 'Red'), ('Red', 'Red', 'Green'), ('Red', 'Red', 'Blue'), ('Red', 'Green', 'Green'), ('Red', 'Green', 'Blue'), ('Red', 'Blue', 'Blue'), ('Green', 'Green', 'Green'), ('Green', 'Green', 'Blue'), ('Green', 'Blue', 'Blue'), ('Blue', 'Blue', 'Blue')]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 256,
        "code": [
            "def count_Primes_nums(n):\n    if n < 2:\n        return 0\n    primes = [True] * (n)\n    primes[0] = primes[1] = False\n    p = 2\n    while p ** 2 < n:\n        if primes[p]:\n            for i in range(p ** 2, n, p):\n                primes[i] = False\n        p += 1\n    return sum(primes)"
        ],
        "test_list": [
            "assert count_Primes_nums(5) == 2",
            "assert count_Primes_nums(10) == 4",
            "assert count_Primes_nums(100) == 25"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 257,
        "code": [
            "def swap_numbers(a, b):\n    return b, a"
        ],
        "test_list": [
            "assert swap_numbers(10,20)==(20,10)",
            "assert swap_numbers(15,17)==(17,15)",
            "assert swap_numbers(100,200)==(200,100)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 258,
        "code": [
            "count_odd = lambda x: len(list(filter(lambda x: x % 2 != 0, x)))"
        ],
        "test_list": [
            "assert count_odd([1, 2, 3, 5, 7, 8, 10])==4",
            "assert count_odd([10,15,14,13,-18,12,-20])==2",
            "assert count_odd([1, 2, 4, 8, 9])==2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 259,
        "code": [
            "def maximize_elements(t1, t2):\n    return tuple(max(x, y) for x, y in zip(t1, t2))"
        ],
        "test_list": [
            "assert maximize_elements(((1, 3), (4, 5), (2, 9), (1, 10)), ((6, 7), (3, 9), (1, 1), (7, 3))) == ((6, 7), (4, 9), (2, 9), (7, 10))",
            "assert maximize_elements(((2, 4), (5, 6), (3, 10), (2, 11)), ((7, 8), (4, 10), (2, 2), (8, 4))) == ((7, 8), (5, 10), (3, 10), (8, 11))",
            "assert maximize_elements(((3, 5), (6, 7), (4, 11), (3, 12)), ((8, 9), (5, 11), (3, 3), (9, 5))) == ((8, 9), (6, 11), (4, 11), (9, 12))"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 260,
        "code": [
            "def newman_prime(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    count = 0\n    num = 1\n    while True:\n        if is_prime(2**num - 1) or is_prime(2**num + 1):\n            count += 1\n            if count == n:\n                if is_prime(2**num - 1):\n                    return 2**num - 1\n                else:\n                    return 2**num + 1\n        num += 1"
        ],
        "test_list": [
            "assert newman_prime(3) == 7 ",
            "assert newman_prime(4) == 17",
            "assert newman_prime(5) == 41"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 261,
        "code": [
            "def division_elements(tuple1, tuple2):\n    return tuple(x / y for x, y in zip(tuple1, tuple2))"
        ],
        "test_list": [
            "assert division_elements((10, 4, 6, 9),(5, 2, 3, 3)) == (2, 2, 2, 3)",
            "assert division_elements((12, 6, 8, 16),(6, 3, 4, 4)) == (2, 2, 2, 4)",
            "assert division_elements((20, 14, 36, 18),(5, 7, 6, 9)) == (4, 2, 6, 2)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 262,
        "code": [
            "def split_two_parts(lst, n):\n    return lst[:n], lst[n:]"
        ],
        "test_list": [
            "assert split_two_parts([1,1,2,3,4,4,5,1],3)==([1, 1, 2], [3, 4, 4, 5, 1])",
            "assert split_two_parts(['a', 'b', 'c', 'd'],2)==(['a', 'b'], ['c', 'd'])",
            "assert split_two_parts(['p', 'y', 't', 'h', 'o', 'n'],4)==(['p', 'y', 't', 'h'], ['o', 'n'])"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 263,
        "code": [
            "def merge_dict(dict1, dict2):\n    merged_dict = dict1.copy()\n    merged_dict.update(dict2)\n    return merged_dict"
        ],
        "test_list": [
            "assert merge_dict({'a': 100, 'b': 200},{'x': 300, 'y': 200})=={'x': 300, 'y': 200, 'a': 100, 'b': 200}",
            "assert merge_dict({'a':900,'b':900,'d':900},{'a':900,'b':900,'d':900})=={'a':900,'b':900,'d':900,'a':900,'b':900,'d':900}",
            "assert merge_dict({'a':10,'b':20},{'x':30,'y':40})=={'x':30,'y':40,'a':10,'b':20}"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 264,
        "code": [
            "def dog_age(human_age):\n    return human_age * 5"
        ],
        "test_list": [
            "assert dog_age(12)==61",
            "assert dog_age(15)==73",
            "assert dog_age(24)==109"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 265,
        "code": [
            "def list_split(lst, n):\n    return [lst[i::n] for i in range(n)]"
        ],
        "test_list": [
            "assert list_split(['a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n'],3)==[['a', 'd', 'g', 'j', 'm'], ['b', 'e', 'h', 'k', 'n'], ['c', 'f', 'i', 'l']] ",
            "assert list_split([1,2,3,4,5,6,7,8,9,10,11,12,13,14],3)==[[1,4,7,10,13], [2,5,8,11,14], [3,6,9,12]] ",
            "assert list_split(['python','java','C','C++','DBMS','SQL'],2)==[['python', 'C', 'DBMS'], ['java', 'C++', 'SQL']] "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 266,
        "code": [
            "def lateralsurface_cube(s):\n    return 4 * s**2"
        ],
        "test_list": [
            "assert lateralsurface_cube(5)==100",
            "assert lateralsurface_cube(9)==324",
            "assert lateralsurface_cube(10)==400"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 267,
        "code": [
            "def square_Sum(n):\n    sum_of_squares = 0\n    num = 1\n    count = 0\n    while count < n:\n        if num % 2 != 0:\n            sum_of_squares += num ** 2\n            count += 1\n        num += 1\n    return sum_of_squares"
        ],
        "test_list": [
            "assert square_Sum(2) == 10",
            "assert square_Sum(3) == 35",
            "assert square_Sum(4) == 84"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 268,
        "code": [
            "def find_star_num(n):\n    return n * (3 * n - 1) + 1"
        ],
        "test_list": [
            "assert find_star_num(3) == 37",
            "assert find_star_num(4) == 73",
            "assert find_star_num(5) == 121"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 269,
        "code": [
            "def ascii_value(char):\n    return ord(char)"
        ],
        "test_list": [
            "assert ascii_value('A')==65",
            "assert ascii_value('R')==82",
            "assert ascii_value('S')==83"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 270,
        "code": [
            "def sum_even_and_even_index(numbers, max_num):\n    return sum(num for i, num in enumerate(numbers) if i % 2 == 0 and num % 2 == 0)"
        ],
        "test_list": [
            "assert sum_even_and_even_index([5, 6, 12, 1, 18, 8],6) == 30",
            "assert sum_even_and_even_index([3, 20, 17, 9, 2, 10, 18, 13, 6, 18],10) == 26",
            "assert sum_even_and_even_index([5, 6, 12, 1],4) == 12"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 271,
        "code": [
            "def even_Power_Sum(n):\n    return sum(i**5 for i in range(2, n*2 + 1, 2))"
        ],
        "test_list": [
            "assert even_Power_Sum(2) == 1056",
            "assert even_Power_Sum(3) == 8832",
            "assert even_Power_Sum(1) == 32"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 272,
        "code": [
            "def rear_extract(records):\n    return [record[-1] for record in records]"
        ],
        "test_list": [
            "assert rear_extract([(1, 'Rash', 21), (2, 'Varsha', 20), (3, 'Kil', 19)]) == [21, 20, 19]",
            "assert rear_extract([(1, 'Sai', 36), (2, 'Ayesha', 25), (3, 'Salman', 45)]) == [36, 25, 45]",
            "assert rear_extract([(1, 'Sudeep', 14), (2, 'Vandana', 36), (3, 'Dawood', 56)]) == [14, 36, 56]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 273,
        "code": [
            "def substract_elements(t1, t2):\n    return tuple(t1[i] - t2[i] for i in range(len(t1)))"
        ],
        "test_list": [
            "assert substract_elements((10, 4, 5), (2, 5, 18)) == (8, -1, -13)",
            "assert substract_elements((11, 2, 3), (24, 45 ,16)) == (-13, -43, -13)",
            "assert substract_elements((7, 18, 9), (10, 11, 12)) == (-3, 7, -3)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 274,
        "code": [
            "import math\n\ndef even_binomial_Coeff_Sum(n):\n    total = 0\n    for i in range(n//2 + 1):\n        total += math.comb(n, 2*i)\n    return total"
        ],
        "test_list": [
            "assert even_binomial_Coeff_Sum(4) == 8",
            "assert even_binomial_Coeff_Sum(6) == 32",
            "assert even_binomial_Coeff_Sum(2) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 275,
        "code": [
            "def get_Position(arr, removed, num):\n    if num not in arr:\n        return -1\n    return len(arr) - arr[::-1].index(num) - 1"
        ],
        "test_list": [
            "assert get_Position([2,5,4],3,2) == 2",
            "assert get_Position([4,3],2,2) == 2",
            "assert get_Position([1,2,3,4],4,1) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 276,
        "code": [
            "import math\n\ndef volume_cylinder(radius, height):\n    return math.pi * (radius ** 2) * height"
        ],
        "test_list": [
            "assert volume_cylinder(10,5)==1570.7500000000002",
            "assert volume_cylinder(4,5)==251.32000000000002",
            "assert volume_cylinder(4,10)==502.64000000000004"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 277,
        "code": [
            "def dict_filter(d, threshold):\n    return {k: v for k, v in d.items() if v >= threshold}",
            "result = dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190}, 170)\nprint(result)  # Output: {'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}"
        ],
        "test_list": [
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},170)=={'Cierra Vega': 175, 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},180)=={ 'Alden Cantrell': 180, 'Pierre Cox': 190}",
            "assert dict_filter({'Cierra Vega': 175, 'Alden Cantrell': 180, 'Kierra Gentry': 165, 'Pierre Cox': 190},190)=={ 'Pierre Cox': 190}"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 278,
        "code": [
            "def count_first_elements(t):\n    for i, elem in enumerate(t):\n        if isinstance(elem, tuple):\n            return i\n    return len(t)"
        ],
        "test_list": [
            "assert count_first_elements((1, 5, 7, (4, 6), 10) ) == 3",
            "assert count_first_elements((2, 9, (5, 7), 11) ) == 2",
            "assert count_first_elements((11, 15, 5, 8, (2, 3), 8) ) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 279,
        "code": [
            "def nth_decagonal_number(n):\n    return n * (3 * n - 1)"
        ],
        "test_list": [
            "assert is_num_decagonal(3) == 27",
            "assert is_num_decagonal(7) == 175",
            "assert is_num_decagonal(10) == 370"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 280,
        "code": [
            "def sequential_search(arr, target):\n    for i, num in enumerate(arr):\n        if num == target:\n            return True, i\n    return False, -1"
        ],
        "test_list": [
            "assert sequential_search([11,23,58,31,56,77,43,12,65,19],31) == (True, 3)",
            "assert sequential_search([12, 32, 45, 62, 35, 47, 44, 61],61) == (True, 7)",
            "assert sequential_search([9, 10, 17, 19, 22, 39, 48, 56],48) == (True, 6)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 281,
        "code": [
            "def all_unique(lst):\n    return len(lst) == len(set(lst))"
        ],
        "test_list": [
            "assert all_unique([1,2,3]) == True",
            "assert all_unique([1,2,1,2]) == False",
            "assert all_unique([1,2,3,4,5]) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 282,
        "code": [
            "def sub_list(list1, list2):\n    return list(map(lambda x, y: x - y, list1, list2))"
        ],
        "test_list": [
            "assert sub_list([1, 2, 3],[4,5,6])==[-3,-3,-3]",
            "assert sub_list([1,2],[3,4])==[-2,-2]",
            "assert sub_list([90,120],[50,70])==[40,50]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 283,
        "code": [
            "def validate(n):\n    str_n = str(n)\n    for digit in set(str_n):\n        if str_n.count(digit) > int(digit):\n            return False\n    return True"
        ],
        "test_list": [
            "assert validate(1234) == True",
            "assert validate(51241) == False",
            "assert validate(321) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 284,
        "code": [
            "def check_element(lst, string):\n    return all(element == string for element in lst)"
        ],
        "test_list": [
            "assert check_element([\"green\", \"orange\", \"black\", \"white\"],'blue')==False",
            "assert check_element([1,2,3,4],7)==False",
            "assert check_element([\"green\", \"green\", \"green\", \"green\"],'green')==True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 285,
        "code": [
            "def text_match_two_three(text):\n    pattern = r'a(b{2,3})'\n    if re.fullmatch(pattern, text):\n        return 'Found a match!'\n    else:\n        return 'Not matched!'"
        ],
        "test_list": [
            "assert text_match_two_three(\"ac\")==('Not matched!')",
            "assert text_match_two_three(\"dc\")==('Not matched!')",
            "assert text_match_two_three(\"abbbba\")==('Found a match!')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 286,
        "code": [
            "def max_sub_array_sum_repeated(arr, n, k):\n    def max_sub_array_sum(nums):\n        max_sum = float('-inf')\n        curr_sum = 0\n        for num in nums:\n            curr_sum = max(num, curr_sum + num)\n            max_sum = max(max_sum, curr_sum)\n        return max_sum\n\n    arr_repeated = arr * k\n    max_sum = max_sub_array_sum(arr_repeated)\n    return max_sum"
        ],
        "test_list": [
            "assert max_sub_array_sum_repeated([10, 20, -30, -1], 4, 3) == 30",
            "assert max_sub_array_sum_repeated([-1, 10, 20], 3, 2) == 59",
            "assert max_sub_array_sum_repeated([-1, -2, -3], 3, 3) == -1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 287,
        "code": [
            "def square_Sum(n):\n    sum = 0\n    for i in range(1, n + 1):\n        sum += (2 * i) ** 2\n    return sum"
        ],
        "test_list": [
            "assert square_Sum(2) == 20",
            "assert square_Sum(3) == 56",
            "assert square_Sum(4) == 120"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 288,
        "code": [
            "def modular_inverse(arr, p, mod):\n    count = 0\n    for num in arr:\n        if pow(num, -1, mod) == num:\n            count += 1\n    return count"
        ],
        "test_list": [
            "assert modular_inverse([ 1, 6, 4, 5 ], 4, 7) == 2",
            "assert modular_inverse([1, 3, 8, 12, 12], 5, 13) == 3",
            "assert modular_inverse([2, 3, 4, 5], 4, 6) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 289,
        "code": [
            "def odd_Days(year):\n    count = 0\n    for month in range(1, 13):\n        if month == 2:\n            if (year % 4 == 0 and year % 100 != 0) or year % 400 == 0:\n                days_in_month = 29\n            else:\n                days_in_month = 28\n        elif month in [1, 3, 5, 7, 8, 10, 12]:\n            days_in_month = 31\n        else:\n            days_in_month = 30\n        for day in range(1, days_in_month + 1):\n            if (day + (sum(range(month)) + year) % 7) % 7 != 0:\n                count += 1\n    return count"
        ],
        "test_list": [
            "assert odd_Days(100) == 5",
            "assert odd_Days(50) ==6",
            "assert odd_Days(75) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 290,
        "code": [
            "def max_length(lists):\n    max_len = max(len(sublist) for sublist in lists)\n    max_lists = [sublist for sublist in lists if len(sublist) == max_len]\n    return max_len, max_lists[0]"
        ],
        "test_list": [
            "assert max_length([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(3, [13, 15, 17])",
            "assert max_length([[1], [5, 7], [10, 12, 14,15]])==(4, [10, 12, 14,15])",
            "assert max_length([[5], [15,20,25]])==(3, [15,20,25])"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 291,
        "code": [
            "def count_no_of_ways(n, k):\n    if n == 1:\n        return k\n    if n == 2:\n        return k*k\n    dp = [0] * (n + 1)\n    dp[1] = k\n    dp[2] = k*k - k\n    for i in range(3, n + 1):\n        dp[i] = dp[i-1] * (k-1) + dp[i-2] * (k-1)\n    return dp[n]"
        ],
        "test_list": [
            "assert count_no_of_ways(2, 4) == 16",
            "assert count_no_of_ways(3, 2) == 6",
            "assert count_no_of_ways(4, 4) == 228"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 292,
        "code": [
            "def find(a, b):\n    if b == 0:\n        return \"Error: Division by zero is not allowed\"\n    return a // b"
        ],
        "test_list": [
            "assert find(10,3) == 3",
            "assert find(4,2) == 2",
            "assert find(20,5) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 293,
        "code": [
            "import math\n\ndef otherside_rightangle(a, b):\n    return math.sqrt(a**2 + b**2)"
        ],
        "test_list": [
            "assert otherside_rightangle(7,8)==10.63014581273465",
            "assert otherside_rightangle(3,4)==5",
            "assert otherside_rightangle(7,15)==16.55294535724685"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 294,
        "code": [
            "def max_val(het_list):\n    max_num = float('-inf')\n    for item in het_list:\n        if isinstance(item, (int, float)):\n            if item > max_num:\n                max_num = item\n    return max_num if max_num != float('-inf') else None"
        ],
        "test_list": [
            "assert max_val(['Python', 3, 2, 4, 5, 'version'])==5",
            "assert max_val(['Python', 15, 20, 25])==25",
            "assert max_val(['Python', 30, 20, 40, 50, 'version'])==50"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 295,
        "code": [
            "def sum_div(n):\n    sum = 0\n    for i in range(1, n):\n        if n % i == 0:\n            sum += i\n    return sum"
        ],
        "test_list": [
            "assert sum_div(8)==7",
            "assert sum_div(12)==16",
            "assert sum_div(7)==1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 296,
        "code": [
            "def get_Inv_Count(arr, n):\n    if n == 1:\n        return 0\n    mid = n // 2\n    left = arr[:mid]\n    right = arr[mid:]\n    left_inv = get_Inv_Count(left, len(left))\n    right_inv = get_Inv_Count(right, len(right))\n    merged_inv = merge_and_count(left, right)\n    return left_inv + right_inv + merged_inv\n\ndef merge_and_count(left, right):\n    merged = []\n    inv = 0\n    i = j = 0\n    while i < len(left) and j < len(right):\n        if left[i] <= right[j]:\n            merged.append(left[i])\n            i += 1\n        else:\n            merged.append(right[j])\n            inv += len(left) - i\n            j += 1\n    merged.extend(left[i:])\n    merged.extend(right[j:])\n    return inv"
        ],
        "test_list": [
            "assert get_Inv_Count([1,20,6,4,5],5) == 5",
            "assert get_Inv_Count([1,2,1],3) == 1",
            "assert get_Inv_Count([1,2,5,6,1],5) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 297,
        "code": [
            "def flatten_list(nested_list):\n    flat_list = []\n    for element in nested_list:\n        if isinstance(element, list):\n            flat_list.extend(flatten_list(element))\n        else:\n            flat_list.append(element)\n    return flat_list"
        ],
        "test_list": [
            "assert flatten_list([0, 10, [20, 30], 40, 50, [60, 70, 80], [90, 100, 110, 120]])==[0, 10, 20, 30, 40, 50, 60, 70, 80, 90, 100, 110, 120]",
            "assert flatten_list([[10, 20], [40], [30, 56, 25], [10, 20], [33], [40]])==[10, 20, 40, 30, 56, 25, 10, 20, 33, 40]",
            "assert flatten_list([[1,2,3], [4,5,6], [10,11,12], [7,8,9]])==[1, 2, 3, 4, 5, 6, 10, 11, 12, 7, 8, 9]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 298,
        "code": [
            "def intersection_nested_lists(list1, nested_list2):\n    result = []\n    for sublist in nested_list2:\n        result.append([element for element in sublist if element in list1])\n    return result"
        ],
        "test_list": [
            "assert intersection_nested_lists( [1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14],[[12, 18, 23, 25, 45], [7, 11, 19, 24, 28], [1, 5, 8, 18, 15, 16]])==[[12], [7, 11], [1, 5, 8]]",
            "assert intersection_nested_lists([[2, 3, 1], [4, 5], [6, 8]], [[4, 5], [6, 8]])==[[], []]",
            "assert intersection_nested_lists(['john','amal','joel','george'],[['john'],['jack','john','mary'],['howard','john'],['jude']])==[['john'], ['john'], ['john'], []]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 299,
        "code": [
            "def max_aggregate(grades):\n    aggregates = {}\n    for name, grade in grades:\n        if name in aggregates:\n            aggregates[name] += grade\n        else:\n            aggregates[name] = grade\n    return max(aggregates.items(), key=lambda x: x[1])"
        ],
        "test_list": [
            "assert max_aggregate([('Juan Whelan',90),('Sabah Colley',88),('Peter Nichols',7),('Juan Whelan',122),('Sabah Colley',84)])==('Juan Whelan', 212)",
            "assert max_aggregate([('Juan Whelan',50),('Sabah Colley',48),('Peter Nichols',37),('Juan Whelan',22),('Sabah Colley',14)])==('Juan Whelan', 72)",
            "assert max_aggregate([('Juan Whelan',10),('Sabah Colley',20),('Peter Nichols',30),('Juan Whelan',40),('Sabah Colley',50)])==('Sabah Colley', 70)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 300,
        "code": [
            "def count_binary_seq(n):\n    from math import comb\n    return comb(2*n, n) / 4**n"
        ],
        "test_list": [
            "assert count_binary_seq(1) == 2.0",
            "assert count_binary_seq(2) == 6.0",
            "assert count_binary_seq(3) == 20.0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 301,
        "code": [
            "def dict_depth(d, level=1):\n    if not d:\n        return level\n    if not isinstance(d, dict):\n        return level\n    max_level = level\n    for k, v in d.items():\n        if isinstance(v, dict):\n            max_level = max(max_level, dict_depth(v, level + 1))\n    return max_level"
        ],
        "test_list": [
            "assert dict_depth({'a':1, 'b': {'c': {'d': {}}}})==4",
            "assert dict_depth({'a':1, 'b': {'c':'python'}})==2",
            "assert dict_depth({1: 'Sun', 2: {3: {4:'Mon'}}})==3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 302,
        "code": [
            "def set_Bit_Number(n):\n    i = 0\n    while n > 0:\n        i += 1\n        n = n >> 1\n    return 2 ** (i - 1)"
        ],
        "test_list": [
            "assert set_Bit_Number(6) == 4",
            "assert set_Bit_Number(10) == 8",
            "assert set_Bit_Number(18) == 16"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 303,
        "code": [
            "def solve(lst, n):\n    count = {}\n    for i in lst:\n        if i in count:\n            count[i] += 1\n        else:\n            count[i] = 1\n    values = list(count.values())\n    values.sort()\n    return len(set(values)) != len(values)"
        ],
        "test_list": [
            "assert solve([1,0,2],3) == True",
            "assert solve([1,2,0],3) == False",
            "assert solve([1,2,1],3) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 304,
        "code": [
            "def find_Element(nums, operations, idx):\n    for op in operations:\n        start, num = op\n        nums[start:start+num] = nums[start:start+num][num-1::-1]\n    return nums[idx]"
        ],
        "test_list": [
            "assert find_Element([1,2,3,4,5],[[0,2],[0,3]],2,1) == 3",
            "assert find_Element([1,2,3,4],[[0,1],[0,2]],1,2) == 3",
            "assert find_Element([1,2,3,4,5,6],[[0,1],[0,2]],1,1) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 305,
        "code": [
            "def start_withp(lst):\n    for item in lst:\n        words = item.split()\n        for word in words:\n            if word[0].lower() == 'p':\n                if 'result' in locals():\n                    result = (result, word)\n                else:\n                    result = word\n    return result"
        ],
        "test_list": [
            "assert start_withp([\"Python PHP\", \"Java JavaScript\", \"c c++\"])==('Python', 'PHP')",
            "assert start_withp([\"Python Programming\",\"Java Programming\"])==('Python','Programming')",
            "assert start_withp([\"Pqrst Pqr\",\"qrstuv\"])==('Pqrst','Pqr')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 306,
        "code": [
            "def max_sum_increasing_subseq(arr, n, i, k):\n    dp = [0] * n\n    dp[0] = arr[0]\n    max_sum = arr[0]\n    \n    for j in range(1, n):\n        dp[j] = arr[j]\n        for prev in range(j):\n            if arr[j] > arr[prev]:\n                dp[j] = max(dp[j], dp[prev] + arr[j])\n        max_sum = max(max_sum, dp[j])\n    \n    incl_k = dp[k]\n    excl_k = max_sum\n    \n    for j in range(i+1, n):\n        new_excl_k = max(excl_k, incl_k)\n        incl_k = excl_k\n        excl_k = new_excl_k\n    \n    return excl_k\n\narr = [1, 101, 2, 3, 100, 4, 5]\nn = len(arr)\ni, k = 4, 6\nprint(max_sum_increasing_subseq(arr, n, i, k))  # Output: 11"
        ],
        "test_list": [
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 4, 6) == 11",
            "assert max_sum_increasing_subseq([1, 101, 2, 3, 100, 4, 5 ], 7, 2, 5) == 7",
            "assert max_sum_increasing_subseq([11, 15, 19, 21, 26, 28, 31], 7, 2, 4) == 71"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 307,
        "code": [
            "def colon_tuplex(t, index, value):\n    lst = list(t)\n    lst[index] = [value]\n    return tuple(lst)"
        ],
        "test_list": [
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,50)==(\"HELLO\", 5, [50], True) ",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,100)==((\"HELLO\", 5, [100],True))",
            "assert colon_tuplex((\"HELLO\", 5, [], True) ,2,500)==(\"HELLO\", 5, [500], True)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 308,
        "code": [
            "import heapq\nfrom itertools import product\n\ndef large_product(list1, list2, n):\n    products = [a * b for a, b in product(list1, list2)]\n    return heapq.nlargest(n, products)"
        ],
        "test_list": [
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],3)==[60, 54, 50]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],4)==[60, 54, 50, 48]",
            "assert large_product([1, 2, 3, 4, 5, 6],[3, 6, 8, 9, 10, 6],5)==[60, 54, 50, 48, 45]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 309,
        "code": [
            "def maximum(a, b):\n    if a >= b:\n        return a\n    else:\n        return b"
        ],
        "test_list": [
            "assert maximum(5,10) == 10",
            "assert maximum(-1,-2) == -1",
            "assert maximum(9,7) == 9"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 310,
        "code": [
            "def string_to_tuple(s):\n    return tuple(s.replace(\" \", \"\"))"
        ],
        "test_list": [
            "assert string_to_tuple(\"python 3.0\")==('p', 'y', 't', 'h', 'o', 'n', '3', '.', '0')",
            "assert string_to_tuple(\"item1\")==('i', 't', 'e', 'm', '1')",
            "assert string_to_tuple(\"15.10\")==('1', '5', '.', '1', '0')"
        ],
        "test_setup_code": ""
    }
]