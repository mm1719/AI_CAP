[
    {
        "task_id": 11,
        "code": [
            "def remove_Occ(s, c):\n    return s.replace(c, '')"
        ],
        "test_list": [
            "assert remove_Occ(\"hello\",\"l\") == \"heo\"",
            "assert remove_Occ(\"abcda\",\"a\") == \"bcd\"",
            "assert remove_Occ(\"PHP\",\"P\") == \"H\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 12,
        "code": [
            "def sort_matrix(matrix):\n    return sorted(matrix, key=sum)"
        ],
        "test_list": [
            "assert sort_matrix([[1, 2, 3], [2, 4, 5], [1, 1, 1]])==[[1, 1, 1], [1, 2, 3], [2, 4, 5]]",
            "assert sort_matrix([[1, 2, 3], [-2, 4, -5], [1, -1, 1]])==[[-2, 4, -5], [1, -1, 1], [1, 2, 3]]",
            "assert sort_matrix([[5,8,9],[6,4,3],[2,1,4]])==[[2, 1, 4], [6, 4, 3], [5, 8, 9]]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 13,
        "code": [
            "def count_common(words):\n    freq = {}\n    for word in words:\n        if word in freq:\n            freq[word] += 1\n        else:\n            freq[word] = 1\n    freq = sorted(freq.items(), key=lambda x: x[1], reverse=True)\n    return freq"
        ],
        "test_list": [
            "assert count_common(['red','green','black','pink','black','white','black','eyes','white','black','orange','pink','pink','red','red','white','orange','white',\"black\",'pink','green','green','pink','green','pink','white','orange',\"orange\",'red']) == [('pink', 6), ('black', 5), ('white', 5), ('red', 4)]",
            "assert count_common(['one', 'two', 'three', 'four', 'five', 'one', 'two', 'one', 'three', 'one']) == [('one', 4), ('two', 2), ('three', 2), ('four', 1)]",
            "assert count_common(['Facebook', 'Apple', 'Amazon', 'Netflix', 'Google', 'Apple', 'Netflix', 'Amazon']) == [('Apple', 2), ('Amazon', 2), ('Netflix', 2), ('Facebook', 1)]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 14,
        "code": [
            "def find_Volume(width, height, length):\n    return 0.5 * width * height * length"
        ],
        "test_list": [
            "assert find_Volume(10,8,6) == 240",
            "assert find_Volume(3,2,2) == 6",
            "assert find_Volume(1,2,1) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 15,
        "code": [
            "def split_lowerstring(s):\n    result = ['']\n    for char in s:\n        if char.islower():\n            result.append(char)\n            result.append('')\n        else:\n            result[-1] += char\n    return [''.join(filter(None, result))]"
        ],
        "test_list": [
            "assert split_lowerstring(\"AbCd\")==['bC','d']",
            "assert split_lowerstring(\"Python\")==['y', 't', 'h', 'o', 'n']",
            "assert split_lowerstring(\"Programming\")==['r', 'o', 'g', 'r', 'a', 'm', 'm', 'i', 'n', 'g']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 16,
        "code": [
            "def text_lowercase_underscore(s):\n    import re\n    if re.search(r'[a-z]+_[a-z]+', s):\n        return 'Found a match!'\n    return 'No match found'"
        ],
        "test_list": [
            "assert text_lowercase_underscore(\"aab_cbbbc\")==('Found a match!')",
            "assert text_lowercase_underscore(\"aab_Abbbc\")==('Not matched!')",
            "assert text_lowercase_underscore(\"Aaab_abbbc\")==('Not matched!')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 17,
        "code": [
            "def square_perimeter(side_length):\n    return 4 * side_length"
        ],
        "test_list": [
            "assert square_perimeter(10)==40",
            "assert square_perimeter(5)==20",
            "assert square_perimeter(4)==16"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 18,
        "code": [
            "def remove_dirty_chars(str1, str2):\n    for char in str2:\n        str1 = str1.replace(char, '')\n    return str1"
        ],
        "test_list": [
            "assert remove_dirty_chars(\"probasscurve\", \"pros\") == 'bacuve'",
            "assert remove_dirty_chars(\"digitalindia\", \"talent\") == 'digiidi'",
            "assert remove_dirty_chars(\"exoticmiles\", \"toxic\") == 'emles' "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 19,
        "code": [
            "def test_duplicate(arr):\n    return len(arr) != len(set(arr))"
        ],
        "test_list": [
            "assert test_duplicate(([1,2,3,4,5]))==False",
            "assert test_duplicate(([1,2,3,4, 4]))==True",
            "assert test_duplicate([1,1,2,2,3,3,4,4,5])==True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 20,
        "code": [
            "def is_woodall(n):\n    i = 1\n    while True:\n        woodall = i * 2**i + 1\n        if woodall == n:\n            return True\n        elif woodall > n:\n            return False\n        i += 1"
        ],
        "test_list": [
            "assert is_woodall(383) == True",
            "assert is_woodall(254) == False",
            "assert is_woodall(200) == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 21,
        "code": [
            "def multiples_of_num(m, n):\n    return [i*n for i in range(1, m+1)]"
        ],
        "test_list": [
            "assert multiples_of_num(4,3)== [3,6,9,12]",
            "assert multiples_of_num(2,5)== [5,10]",
            "assert multiples_of_num(9,2)== [2,4,6,8,10,12,14,16,18]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 22,
        "code": [
            "def find_first_duplicate(arr):\n    seen = {}\n    for num in arr:\n        if num in seen:\n            return num\n        seen[num] = True\n    return None  # or raise an exception if you prefer"
        ],
        "test_list": [
            "assert find_first_duplicate(([1, 2, 3, 4, 4, 5]))==4",
            "assert find_first_duplicate([1, 2, 3, 4])==-1",
            "assert find_first_duplicate([1, 1, 2, 3, 3, 2, 2])==1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 23,
        "code": [
            "def maximum_Sum(list_of_lists):\n    return max(sum(sublist) for sublist in list_of_lists)"
        ],
        "test_list": [
            "assert maximum_Sum([[1,2,3],[4,5,6],[10,11,12],[7,8,9]]) == 33",
            "assert maximum_Sum([[0,1,1],[1,1,2],[3,2,1]]) == 6",
            "assert maximum_Sum([[0,1,3],[1,2,1],[9,8,2],[0,1,0],[6,4,8]]) == 19"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 24,
        "code": [
            "def binary_to_decimal(n):\n    binary_str = str(n)\n    decimal = 0\n    for i, bit in enumerate(reversed(binary_str)):\n        if bit == '1':\n            decimal += 2 ** i\n    return decimal"
        ],
        "test_list": [
            "assert binary_to_decimal(100) == 4",
            "assert binary_to_decimal(1011) == 11",
            "assert binary_to_decimal(1101101) == 109"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 25,
        "code": [
            "def find_Product(arr, n):\n    count_dict = {}\n    for num in arr:\n        if num in count_dict:\n            count_dict[num] += 1\n        else:\n            count_dict[num] = 1\n    product = 1\n    for num, count in count_dict.items():\n        if count == 1:\n            product *= num\n    return product"
        ],
        "test_list": [
            "assert find_Product([1,1,2,3],4) == 6",
            "assert find_Product([1,2,3,1,1],5) == 6",
            "assert find_Product([1,1,4,5,6],5) == 120"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 26,
        "code": [
            "def check_k_elements(tuples, k):\n    return all(len(t) == k for t in tuples)"
        ],
        "test_list": [
            "assert check_k_elements([(4, 4), (4, 4, 4), (4, 4), (4, 4, 4, 4), (4, )], 4) == True",
            "assert check_k_elements([(7, 7, 7), (7, 7)], 7) == True",
            "assert check_k_elements([(9, 9), (9, 9, 9, 9)], 7) == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 27,
        "code": [
            "def remove(lst):\n    return [''.join(c for c in s if not c.isdigit()) for s in lst]"
        ],
        "test_list": [
            "assert remove(['4words', '3letters', '4digits']) == ['words', 'letters', 'digits']",
            "assert remove(['28Jan','12Jan','11Jan']) == ['Jan','Jan','Jan']",
            "assert remove(['wonder1','wonder2','wonder3']) == ['wonder','wonder','wonder']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 28,
        "code": [
            "import math\n\ndef binomial_Coeff(n, k):\n    if k > n:\n        return 0\n    return math.comb(n, k)"
        ],
        "test_list": [
            "assert binomial_Coeff(5,2) == 10",
            "assert binomial_Coeff(4,3) == 4",
            "assert binomial_Coeff(3,2) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 29,
        "code": [
            "def get_Odd_Occurrence(lst, _):\n    count_dict = {}\n    for elem in lst:\n        if elem in count_dict:\n            count_dict[elem] += 1\n        else:\n            count_dict[elem] = 1\n    for key, value in count_dict.items():\n        if value % 2 != 0:\n            return key\n    return None"
        ],
        "test_list": [
            "assert get_Odd_Occurrence([1,2,3,1,2,3,1],7) == 1",
            "assert get_Odd_Occurrence([1,2,3,2,3,1,3],7) == 3",
            "assert get_Odd_Occurrence([2,3,5,4,5,2,4,3,5,2,4,4,2],13) == 5"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 30,
        "code": [
            "def count_Substring_With_Equal_Ends(s):\n    count = 0\n    for length in range(1, len(s) + 1):\n        for i in range(len(s) - length + 1):\n            substring = s[i:i + length]\n            if substring[0] == substring[-1]:\n                count += 1\n    return count"
        ],
        "test_list": [
            "assert count_Substring_With_Equal_Ends(\"abc\") == 3",
            "assert count_Substring_With_Equal_Ends(\"abcda\") == 6",
            "assert count_Substring_With_Equal_Ends(\"ab\") == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 31,
        "code": [
            "import heapq\nfrom collections import Counter\n\ndef func(lists, k):\n    count = Counter(num for lst in lists for num in lst)\n    return heapq.nlargest(k, count, key=count.get)"
        ],
        "test_list": [
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],3)==[5, 7, 1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],1)==[1]",
            "assert func([[1, 2, 6], [1, 3, 4, 5, 7, 8], [1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12]],5)==[6, 5, 7, 8, 1]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 32,
        "code": [
            "def max_Prime_Factors(n):\n    def is_prime(num):\n        if num < 2:\n            return False\n        for i in range(2, int(num**0.5) + 1):\n            if num % i == 0:\n                return False\n        return True\n\n    max_prime_factor = 1\n    for i in range(2, n + 1):\n        if n % i == 0 and is_prime(i):\n            max_prime_factor = i\n    return max_prime_factor"
        ],
        "test_list": [
            "assert max_Prime_Factors(15) == 5",
            "assert max_Prime_Factors(6) == 3",
            "assert max_Prime_Factors(2) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 33,
        "code": [
            "def decimal_To_Binary(n):\n    return int(bin(n)[2:])"
        ],
        "test_list": [
            "assert decimal_To_Binary(10) == 1010",
            "assert decimal_To_Binary(1) == 1",
            "assert decimal_To_Binary(20) == 10100"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 34,
        "code": [
            "def find_missing(numbers, n):\n    total = n*(n+1)//2\n    return total - sum(numbers)"
        ],
        "test_list": [
            "assert find_missing([1,2,3,5],4) == 4",
            "assert find_missing([1,3,4,5],4) == 2",
            "assert find_missing([1,2,3,5,6,7],5) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 35,
        "code": [
            "def find_rect_num(n):\n    return n * (n + 1)"
        ],
        "test_list": [
            "assert find_rect_num(4) == 20",
            "assert find_rect_num(5) == 30",
            "assert find_rect_num(6) == 42"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 36,
        "code": [
            "def find_Nth_Digit(numerator, denominator, n):\n    fraction = numerator / denominator\n    decimal_str = str(fraction).replace('0.', '')\n    if n > len(decimal_str):\n        return -1  # or any other value to indicate the nth digit does not exist\n    else:\n        return int(decimal_str[n-1])"
        ],
        "test_list": [
            "assert find_Nth_Digit(1,2,1) == 5",
            "assert find_Nth_Digit(3,5,1) == 6",
            "assert find_Nth_Digit(5,6,5) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 37,
        "code": [
            "def sort_mixed_list(mixed_list):\n    ints = sorted([i for i in mixed_list if isinstance(i, int)])\n    strs = sorted([s for s in mixed_list if isinstance(s, str)])\n    return ints + strs"
        ],
        "test_list": [
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']",
            "assert sort_mixed_list([19,'red',12,'green','blue', 10,'white','green',1])==[1, 10, 12, 19, 'blue', 'green', 'green', 'red', 'white']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 38,
        "code": [
            "def div_even_odd(nums):\n    even = next(x for x in nums if x % 2 == 0)\n    odd = next(x for x in nums if x % 2 != 0)\n    return even / odd"
        ],
        "test_list": [
            "assert div_even_odd([1,3,5,7,4,1,6,8])==4",
            "assert div_even_odd([1,2,3,4,5,6,7,8,9,10])==2",
            "assert div_even_odd([1,5,7,9,10])==10"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 39,
        "code": [
            "from collections import Counter\nimport heapq\n\ndef rearange_string(s):\n    freq = Counter(s)\n    max_heap = [(-freq[c], c) for c in freq]\n    heapq.heapify(max_heap)\n    result = []\n    while max_heap:\n        freq, c = heapq.heappop(max_heap)\n        if result and result[-1] == c:\n            if not max_heap:\n                return ''\n            freq2, c2 = heapq.heappop(max_heap)\n            result.append(c2)\n            if freq2 < -1:\n                heapq.heappush(max_heap, (freq2 + 1, c2))\n        result.append(c)\n        if freq < -1:\n            heapq.heappush(max_heap, (freq + 1, c))\n    return ''.join(result)"
        ],
        "test_list": [
            "assert rearange_string(\"aab\")==('aba')",
            "assert rearange_string(\"aabb\")==('abab')",
            "assert rearange_string(\"abccdd\")==('cdabcd')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 40,
        "code": [
            "import collections\nimport itertools\n\ndef freq_element(lst):\n    flat_list = list(itertools.chain(*lst))\n    return dict(collections.Counter(flat_list))"
        ],
        "test_list": [
            "assert freq_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]])==({2: 3, 1: 2, 5: 2, 3: 1, 4: 1, 6: 1, 7: 1, 9: 1})",
            "assert freq_element([[1,2,3,4],[5,6,7,8],[9,10,11,12]])==({1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1, 10: 1, 11: 1, 12: 1})",
            "assert freq_element([[15,20,30,40],[80,90,100,110],[30,30,80,90]])==({30: 3, 80: 2, 90: 2, 15: 1, 20: 1, 40: 1, 100: 1, 110: 1})"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 41,
        "code": [
            "filter_evennumbers = lambda numbers: list(filter(lambda x: x % 2 == 0, numbers))"
        ],
        "test_list": [
            "assert filter_evennumbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])==[2, 4, 6, 8, 10]",
            "assert filter_evennumbers([10,20,45,67,84,93])==[10,20,84]",
            "assert filter_evennumbers([5,7,9,8,6,4,3])==[8,6,4]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 42,
        "code": [
            "def find_Sum(arr, threshold):\n    freq = {}\n    for num in arr:\n        if num in freq:\n            freq[num] += 1\n        else:\n            freq[num] = 1\n    repeated_nums = [num for num, count in freq.items() if count > 1]\n    return sum(repeated_nums)"
        ],
        "test_list": [
            "assert find_Sum([1,2,3,1,1,4,5,6],8) == 3",
            "assert find_Sum([1,2,3,1,1],5) == 3",
            "assert find_Sum([1,1,2],3) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 43,
        "code": [
            "import re\n\ndef text_match(s):\n    pattern = r'[a-z]+_[a-z]+'\n    if re.search(pattern, s):\n        return 'Found a match!'\n    else:\n        return 'No match found!'"
        ],
        "test_list": [
            "assert text_match(\"aab_cbbbc\") == 'Found a match!'",
            "assert text_match(\"aab_Abbbc\") == 'Not matched!'",
            "assert text_match(\"Aaab_abbbc\") == 'Not matched!'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 44,
        "code": [
            "def text_match_string(text):\n    word = 'python'\n    if text.lstrip().startswith(word):\n        return text.lstrip()[len(word):]\n    else:\n        return 'Not matched!'"
        ],
        "test_list": [
            "assert text_match_string(\" python\")==('Not matched!')",
            "assert text_match_string(\"python\")==('Found a match!')",
            "assert text_match_string(\"  lang\")==('Not matched!')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 45,
        "code": [
            "import math\n\ndef get_gcd(lst):\n    gcd = lst[0]\n    for num in lst[1:]:\n        gcd = math.gcd(gcd, num)\n    return gcd"
        ],
        "test_list": [
            "assert get_gcd([2, 4, 6, 8, 16]) == 2",
            "assert get_gcd([1, 2, 3]) == 1",
            "assert get_gcd([2, 4, 6, 8]) == 2 "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 46,
        "code": [
            "def test_distinct(numbers):\n    return len(numbers) == len(set(numbers))"
        ],
        "test_list": [
            "assert test_distinct([1,5,7,9]) == True",
            "assert test_distinct([2,4,5,5,7,9]) == False",
            "assert test_distinct([1,2,3]) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 47,
        "code": [
            "import math\n\ndef compute_Last_Digit(a, b):\n    numerator = math.factorial(a)\n    denominator = math.factorial(b)\n    if denominator == 0:\n        return \"Error: Division by zero\"\n    last_digit = (numerator // denominator) % 10\n    return last_digit"
        ],
        "test_list": [
            "assert compute_Last_Digit(2,4) == 2",
            "assert compute_Last_Digit(6,8) == 6",
            "assert compute_Last_Digit(1,2) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 48,
        "code": [
            "def odd_bit_set_number(n):\n    return n | 0xAAAAAAAA"
        ],
        "test_list": [
            "assert odd_bit_set_number(10) == 15",
            "assert odd_bit_set_number(20) == 21",
            "assert odd_bit_set_number(30) == 31"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 49,
        "code": [
            "def specified_element(lst, index):\n    return [sublist[index] for sublist in lst]"
        ],
        "test_list": [
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],0)==[1, 4, 7]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],2)==[3, 6, 9]",
            "assert specified_element([[1, 2, 3, 2], [4, 5, 6, 2], [7, 1, 9, 5]],1)==[2,5,1]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 50,
        "code": [
            "min_length_list = lambda lists: min(((len(lst), lst) for lst in lists), key=lambda x: x[0])"
        ],
        "test_list": [
            "assert min_length_list([[0], [1, 3], [5, 7], [9, 11], [13, 15, 17]])==(1, [0])",
            "assert min_length_list([[1,2,3,4,5],[1,2,3,4],[1,2,3],[1,2],[1]])==(1,[1])",
            "assert min_length_list([[3,4,5],[6,7,8,9],[10,11,12],[1,2]])==(2,[1,2])"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 51,
        "code": [
            "def check_equilateral(a, b, c):\n    if a == b == c:\n        return True\n    else:\n        return False"
        ],
        "test_list": [
            "assert check_equilateral(6,8,12)==False ",
            "assert check_equilateral(6,6,12)==False",
            "assert check_equilateral(6,6,6)==True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 52,
        "code": [
            "def parallelogram_area(base, height):\n    return base * height"
        ],
        "test_list": [
            "assert parallelogram_area(10,20)==200",
            "assert parallelogram_area(15,20)==300",
            "assert parallelogram_area(8,9)==72"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 53,
        "code": [
            "def check_Equality(s):\n    if len(s) < 1:\n        return \"The string is empty\"\n    elif s[0] == s[-1]:\n        return \"Equal\"\n    else:\n        return \"Not Equal\""
        ],
        "test_list": [
            "assert check_Equality(\"abcda\") == \"Equal\"",
            "assert check_Equality(\"ab\") == \"Not Equal\"",
            "assert check_Equality(\"mad\") == \"Not Equal\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 54,
        "code": [
            "def counting_sort(arr):\n    max_val = max(arr)\n    min_val = min(arr)\n    count = [0] * (max_val - min_val + 1)\n    for num in arr:\n        count[num - min_val] += 1\n    sorted_arr = []\n    for i, cnt in enumerate(count):\n        sorted_arr.extend([i + min_val] * cnt)\n    return sorted_arr"
        ],
        "test_list": [
            "assert counting_sort([1,23,4,5,6,7,8]) == [1, 4, 5, 6, 7, 8, 23]",
            "assert counting_sort([12, 9, 28, 33, 69, 45]) == [9, 12, 28, 33, 45, 69]",
            "assert counting_sort([8, 4, 14, 3, 2, 1]) == [1, 2, 3, 4, 8, 14]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 55,
        "code": [
            "def tn_gp(a, r, n):\n    return a * (r ** (n-1))"
        ],
        "test_list": [
            "assert tn_gp(1,5,2)==16",
            "assert tn_gp(1,5,4)==256",
            "assert tn_gp(2,6,3)==486"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 56,
        "code": [
            "def check(n):\n    reverse = int(str(n)[::-1])\n    return n == 2*reverse - 1"
        ],
        "test_list": [
            "assert check(70) == False",
            "assert check(23) == False",
            "assert check(73) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 57,
        "code": [
            "def find_Max_Num(digits, num_digits):\n    digits.sort(reverse=True)\n    return int(''.join(map(str, digits[:num_digits])))"
        ],
        "test_list": [
            "assert find_Max_Num([1,2,3],3) == 321",
            "assert find_Max_Num([4,5,6,1],4) == 6541",
            "assert find_Max_Num([1,2,3,9],4) == 9321"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 58,
        "code": [
            "def opposite_Signs(a, b):\n    return (a > 0) != (b > 0)"
        ],
        "test_list": [
            "assert opposite_Signs(1,-2) == True",
            "assert opposite_Signs(3,2) == False",
            "assert opposite_Signs(-10,-10) == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 59,
        "code": [
            "def is_octagonal(n):\n    return n*(3*n-2)"
        ],
        "test_list": [
            "assert is_octagonal(5) == 65",
            "assert is_octagonal(10) == 280",
            "assert is_octagonal(15) == 645"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 60,
        "code": [
            "def max_len_sub(arr, diff):\n    n = len(arr)\n    dp = [1] * n\n    for i in range(1, n):\n        for j in range(i):\n            if abs(arr[i] - arr[j]) == diff:\n                dp[i] = max(dp[i], dp[j] + 1)\n    return max(dp)"
        ],
        "test_list": [
            "assert max_len_sub([2, 5, 6, 3, 7, 6, 5, 8], 8) == 5",
            "assert max_len_sub([-2, -1, 5, -1, 4, 0, 3], 7) == 4",
            "assert max_len_sub([9, 11, 13, 15, 18], 5) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 61,
        "code": [
            "def count_Substrings(s, n):\n    count = 0\n    for length in range(1, n + 1):\n        for i in range(n - length + 1):\n            substring = s[i:i + length]\n            if sum(int(digit) for digit in substring) == length:\n                count += 1\n    return count"
        ],
        "test_list": [
            "assert count_Substrings('112112',6) == 6",
            "assert count_Substrings('111',3) == 6",
            "assert count_Substrings('1101112',7) == 12"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 62,
        "code": [
            "def smallest_num(nums):\n    return min(nums)"
        ],
        "test_list": [
            "assert smallest_num([10, 20, 1, 45, 99]) == 1",
            "assert smallest_num([1, 2, 3]) == 1",
            "assert smallest_num([45, 46, 50, 60]) == 45"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 63,
        "code": [
            "def max_difference(pairs):\n    return max(y - x for x, y in pairs)"
        ],
        "test_list": [
            "assert max_difference([(3, 5), (1, 7), (10, 3), (1, 2)]) == 7",
            "assert max_difference([(4, 6), (2, 17), (9, 13), (11, 12)]) == 15",
            "assert max_difference([(12, 35), (21, 27), (13, 23), (41, 22)]) == 23"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 64,
        "code": [
            "def subject_marks(marks):\n    return sorted(marks, key=lambda x: x[1])"
        ],
        "test_list": [
            "assert subject_marks([('English', 88), ('Science', 90), ('Maths', 97), ('Social sciences', 82)])==[('Social sciences', 82), ('English', 88), ('Science', 90), ('Maths', 97)]",
            "assert subject_marks([('Telugu',49),('Hindhi',54),('Social',33)])==([('Social',33),('Telugu',49),('Hindhi',54)])",
            "assert subject_marks([('Physics',96),('Chemistry',97),('Biology',45)])==([('Biology',45),('Physics',96),('Chemistry',97)])"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 65,
        "code": [
            "def recursive_list_sum(lst):\n    total = 0\n    for element in lst:\n        if isinstance(element, list):\n            total += recursive_list_sum(element)\n        else:\n            total += element\n    return total"
        ],
        "test_list": [
            "assert recursive_list_sum(([1, 2, [3,4],[5,6]]))==21",
            "assert recursive_list_sum(([7, 10, [15,14],[19,41]]))==106",
            "assert recursive_list_sum(([10, 20, [30,40],[50,60]]))==210"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 66,
        "code": [
            "def pos_count(lst):\n    return sum(1 for num in lst if num > 0)"
        ],
        "test_list": [
            "assert pos_count([1,-2,3,-4]) == 2",
            "assert pos_count([3,4,5,-1]) == 3",
            "assert pos_count([1,2,3,4]) == 4"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 67,
        "code": [
            "def bell_number(n):\n    bell_nums = [0]*(n+1)\n    bell_nums[0] = 1\n    for i in range(1, n+1):\n        bell_nums[i] = sum(bell_nums[k-1]*C(i-1, k-1) for k in range(1, i+1))\n    return bell_nums[n]\n\ndef C(n, k):\n    if k > n:\n        return 0\n    if k * 2 > n:\n        k = n-k\n    if k == 0 or n <= k:\n        return 1\n    res = 1\n    for i in range(1, k + 1):\n        res = res * (n - i + 1) / i\n    return res"
        ],
        "test_list": [
            "assert bell_number(2)==2",
            "assert bell_number(10)==115975",
            "assert bell_number(56)==6775685320645824322581483068371419745979053216268760300"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 68,
        "code": [
            "def is_Monotonic(arr):\n    is_increasing = all(arr[i] <= arr[i+1] for i in range(len(arr)-1))\n    is_decreasing = all(arr[i] >= arr[i+1] for i in range(len(arr)-1))\n    return is_increasing or is_decreasing"
        ],
        "test_list": [
            "assert is_Monotonic([6, 5, 4, 4]) == True",
            "assert is_Monotonic([1, 2, 2, 3]) == True",
            "assert is_Monotonic([1, 3, 2]) == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 69,
        "code": [
            "def is_sublist(lst, sublst):\n    lst_str = ','.join(str(i) for i in lst)\n    sublst_str = ','.join(str(i) for i in sublst)\n    return sublst_str in lst_str"
        ],
        "test_list": [
            "assert is_sublist([2,4,3,5,7],[3,7])==False",
            "assert is_sublist([2,4,3,5,7],[4,3])==True",
            "assert is_sublist([2,4,3,5,7],[1,6])==False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 70,
        "code": [
            "def get_equal(tuples_list, expected_length):\n    if all(len(t) == expected_length for t in tuples_list):\n        return 'All tuples have same length'\n    else:\n        return 'Not all tuples have same length'"
        ],
        "test_list": [
            "assert get_equal([(11, 22, 33), (44, 55, 66)], 3) == 'All tuples have same length'",
            "assert get_equal([(1, 2, 3), (4, 5, 6, 7)], 3) == 'All tuples do not have same length'",
            "assert get_equal([(1, 2), (3, 4)], 2) == 'All tuples have same length'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 71,
        "code": [
            "def comb_sort(arr):\n    def swap(i, j):\n        arr[i], arr[j] = arr[j], arr[i]\n\n    n = len(arr)\n    gap = n\n    shrink = 1.3\n    sorted = False\n\n    while not sorted:\n        gap = int(gap / shrink)\n        if gap > 1:\n            sorted = False\n        else:\n            gap = 1\n            sorted = True\n\n        i = 0\n        while i + gap < n:\n            if arr[i] > arr[i + gap]:\n                swap(i, i + gap)\n                sorted = False\n            i += 1\n\n    return arr"
        ],
        "test_list": [
            "assert comb_sort([5, 15, 37, 25, 79]) == [5, 15, 25, 37, 79]",
            "assert comb_sort([41, 32, 15, 19, 22]) == [15, 19, 22, 32, 41]",
            "assert comb_sort([99, 15, 13, 47]) == [13, 15, 47, 99]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 72,
        "code": [
            "import math\n\ndef dif_Square(n):\n    for i in range(1, int(math.sqrt(n)) + 1):\n        if math.sqrt(i * i + n) % 1 == 0:\n            return True\n    return False"
        ],
        "test_list": [
            "assert dif_Square(5) == True",
            "assert dif_Square(10) == False",
            "assert dif_Square(15) == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 73,
        "code": [
            "import re\n\ndef multiple_split(s):\n    return re.split('[\\n*]+', s)"
        ],
        "test_list": [
            "assert multiple_split('Forces of the \\ndarkness*are coming into the play.') == ['Forces of the ', 'darkness', 'are coming into the play.']",
            "assert multiple_split('Mi Box runs on the \\n Latest android*which has google assistance and chromecast.') == ['Mi Box runs on the ', ' Latest android', 'which has google assistance and chromecast.']",
            "assert multiple_split('Certain services\\nare subjected to change*over the seperate subscriptions.') == ['Certain services', 'are subjected to change', 'over the seperate subscriptions.']"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 74,
        "code": [
            "def is_samepatterns(list1, list2):\n    if len(list1) != len(list2):\n        return False\n    pattern = {}\n    for i in range(len(list1)):\n        if list1[i] not in pattern:\n            pattern[list1[i]] = list2[i]\n        elif pattern[list1[i]] != list2[i]:\n            return False\n    return True"
        ],
        "test_list": [
            "assert is_samepatterns([\"red\",\"green\",\"green\"], [\"a\", \"b\", \"b\"])==True ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\",\"b\"])==False ",
            "assert is_samepatterns([\"red\",\"green\",\"greenn\"], [\"a\",\"b\"])==False "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 75,
        "code": [
            "def find_tuples(tuples, k):\n    result = [str(t) for t in tuples if all(i % k == 0 for i in t)]\n    return '[' + ', '.join(result) + ']'"
        ],
        "test_list": [
            "assert find_tuples([(6, 24, 12), (7, 9, 6), (12, 18, 21)], 6) == '[(6, 24, 12)]'",
            "assert find_tuples([(5, 25, 30), (4, 2, 3), (7, 8, 9)], 5) == '[(5, 25, 30)]'",
            "assert find_tuples([(7, 9, 16), (8, 16, 4), (19, 17, 18)], 4) == '[(8, 16, 4)]'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 76,
        "code": [
            "def count_Squares(length, width):\n    return length * width"
        ],
        "test_list": [
            "assert count_Squares(4,3) == 20",
            "assert count_Squares(2,2) == 5",
            "assert count_Squares(1,1) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 77,
        "code": [
            "def is_Diff(n):\n    even_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 == 0)\n    odd_sum = sum(int(digit) for digit in str(n) if int(digit) % 2 != 0)\n    return abs(even_sum - odd_sum) == 9"
        ],
        "test_list": [
            "assert is_Diff (12345) == False",
            "assert is_Diff(1212112) == True",
            "assert is_Diff(1212) == False"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 78,
        "code": [
            "def count_With_Odd_SetBits(n):\n    count = 0\n    for i in range(1, n+1):\n        if bin(i).count('1') % 2 != 0:\n            count += 1\n    return count"
        ],
        "test_list": [
            "assert count_With_Odd_SetBits(5) == 3",
            "assert count_With_Odd_SetBits(10) == 5",
            "assert count_With_Odd_SetBits(15) == 8"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 79,
        "code": [
            "def word_len(word):\n    return len(word) % 2 != 0"
        ],
        "test_list": [
            "assert word_len(\"Hadoop\") == False",
            "assert word_len(\"great\") == True",
            "assert word_len(\"structure\") == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 80,
        "code": [
            "def tetrahedral_number(n):\n    return n*(n+1)*(n+2)/6"
        ],
        "test_list": [
            "assert tetrahedral_number(5) == 35.0",
            "assert tetrahedral_number(6) == 56.0",
            "assert tetrahedral_number(7) == 84.0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 81,
        "code": [
            "def zip_tuples(tuple1, tuple2):\n    length1 = len(tuple1)\n    length2 = len(tuple2)\n    length = min(length1, length2)\n    result = [(tuple1[i], tuple2[i]) for i in range(length)]\n    if length1 > length2:\n        result.extend([(x, tuple2[-1]) for x in tuple1[length:]])\n    elif length2 > length1:\n        result.extend([(tuple1[-1], x) for x in tuple2[length:]])\n    return result"
        ],
        "test_list": [
            "assert zip_tuples((7, 8, 4, 5, 9, 10),(1, 5, 6) ) == [(7, 1), (8, 5), (4, 6), (5, 1), (9, 5), (10, 6)]",
            "assert zip_tuples((8, 9, 5, 6, 10, 11),(2, 6, 7) ) == [(8, 2), (9, 6), (5, 7), (6, 2), (10, 6), (11, 7)]",
            "assert zip_tuples((9, 10, 6, 7, 11, 12),(3, 7, 8) ) == [(9, 3), (10, 7), (6, 8), (7, 3), (11, 7), (12, 8)]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 82,
        "code": [
            "import math\n\ndef volume_sphere(radius):\n    return (4/3) * math.pi * (radius ** 3)"
        ],
        "test_list": [
            "assert volume_sphere(10)==4188.790204786391",
            "assert volume_sphere(25)==65449.84694978735",
            "assert volume_sphere(20)==33510.32163829113"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 83,
        "code": [
            "def get_Char(s):\n    total = sum(ord(c) for c in s)\n    return chr(total % 256)"
        ],
        "test_list": [
            "assert get_Char(\"abc\") == \"f\"",
            "assert get_Char(\"gfg\") == \"t\"",
            "assert get_Char(\"ab\") == \"c\""
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 84,
        "code": [
            "def sequence(n):\n    a = 12\n    for _ in range(n - 1):\n        a = sum(int(digit) for digit in str(a))\n    return a"
        ],
        "test_list": [
            "assert sequence(10) == 6",
            "assert sequence(2) == 1",
            "assert sequence(3) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 85,
        "code": [
            "import math\n\ndef surfacearea_sphere(r):\n    return 4 * math.pi * (r ** 2)"
        ],
        "test_list": [
            "assert surfacearea_sphere(10)==1256.6370614359173",
            "assert surfacearea_sphere(15)==2827.4333882308138",
            "assert surfacearea_sphere(20)==5026.548245743669"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 86,
        "code": [
            "def centered_hexagonal_number(n):\n    return n * ((3*n) - 1) + 1"
        ],
        "test_list": [
            "assert centered_hexagonal_number(10) == 271",
            "assert centered_hexagonal_number(2) == 7",
            "assert centered_hexagonal_number(9) == 217"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 87,
        "code": [
            "def merge_dictionaries_three(dict1, dict2, dict3):\n    merged_dict = {**dict1, **dict2, **dict3}\n    return merged_dict"
        ],
        "test_list": [
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{ \"O\": \"Orange\", \"W\": \"White\", \"B\": \"Black\" })=={'B': 'Black', 'R': 'Red', 'P': 'Pink', 'G': 'Green', 'W': 'White', 'O': 'Orange'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" }, { \"G\": \"Green\", \"W\": \"White\" },{\"L\":\"lavender\",\"B\":\"Blue\"})=={'W': 'White', 'P': 'Pink', 'B': 'Black', 'R': 'Red', 'G': 'Green', 'L': 'lavender'}",
            "assert merge_dictionaries_three({ \"R\": \"Red\", \"B\": \"Black\", \"P\": \"Pink\" },{\"L\":\"lavender\",\"B\":\"Blue\"},{ \"G\": \"Green\", \"W\": \"White\" })=={'B': 'Black', 'P': 'Pink', 'R': 'Red', 'G': 'Green', 'L': 'lavender', 'W': 'White'}"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 88,
        "code": [
            "def freq_count(lst):\n    freq = {}\n    for item in lst:\n        if item in freq:\n            freq[item] += 1\n        else:\n            freq[item] = 1\n    return freq"
        ],
        "test_list": [
            "assert freq_count([10,10,10,10,20,20,20,20,40,40,50,50,30])==({10: 4, 20: 4, 40: 2, 50: 2, 30: 1}) ",
            "assert freq_count([1,2,3,4,3,2,4,1,3,1,4])==({1:3, 2:2,3:3,4:3}) ",
            "assert freq_count([5,6,7,4,9,10,4,5,6,7,9,5])==({10:1,5:3,6:2,7:2,4:2,9:2}) "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 89,
        "code": [
            "def closest_num(n):\n    return n - 1"
        ],
        "test_list": [
            "assert closest_num(11) == 10",
            "assert closest_num(7) == 6",
            "assert closest_num(12) == 11"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 90,
        "code": [
            "def len_log(words):\n    return max(len(word) for word in words)"
        ],
        "test_list": [
            "assert len_log([\"python\",\"PHP\",\"bigdata\"]) == 7",
            "assert len_log([\"a\",\"ab\",\"abc\"]) == 3",
            "assert len_log([\"small\",\"big\",\"tall\"]) == 5"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 91,
        "code": [
            "def find_substring(str_list, substring):\n    for string in str_list:\n        if substring in string:\n            return True\n    return False"
        ],
        "test_list": [
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ack\")==True",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"abc\")==False",
            "assert find_substring([\"red\", \"black\", \"white\", \"green\", \"orange\"],\"ange\")==True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 92,
        "code": [
            "def is_undulating(num_str):\n    num_list = list(map(int, num_str))\n    if len(num_list) < 2:\n        return False\n    diff = num_list[1] - num_list[0]\n    for i in range(2, len(num_list)):\n        if (num_list[i] - num_list[i-1]) * diff <= 0:\n            return False\n        diff = num_list[i] - num_list[i-1]\n    return True"
        ],
        "test_list": [
            "assert is_undulating(\"1212121\") == True",
            "assert is_undulating(\"1991\") == False",
            "assert is_undulating(\"121\") == True"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 93,
        "code": [
            "def power(a, b):\n    result = 1\n    for _ in range(abs(b)):\n        result *= a\n    if b < 0:\n        return 1 / result\n    return result"
        ],
        "test_list": [
            "assert power(3,4) == 81",
            "assert power(2,3) == 8",
            "assert power(5,5) == 3125"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 94,
        "code": [
            "def index_minimum(rec):\n    return min(rec, key=lambda x: x[1])[0]"
        ],
        "test_list": [
            "assert index_minimum([('Rash', 143), ('Manjeet', 200), ('Varsha', 100)]) == 'Varsha'",
            "assert index_minimum([('Yash', 185), ('Dawood', 125), ('Sanya', 175)]) == 'Dawood'",
            "assert index_minimum([('Sai', 345), ('Salman', 145), ('Ayesha', 96)]) == 'Ayesha'"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 95,
        "code": [
            "def Find_Min_Length(list_of_lists):\n    return min(len(sublist) for sublist in list_of_lists)"
        ],
        "test_list": [
            "assert Find_Min_Length([[1],[1,2]]) == 1",
            "assert Find_Min_Length([[1,2],[1,2,3],[1,2,3,4]]) == 2",
            "assert Find_Min_Length([[3,3,3],[4,4,4,4]]) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 96,
        "code": [
            "def divisor(n):\n    count = 0\n    for i in range(1, n + 1):\n        if n % i == 0:\n            count += 1\n    return count"
        ],
        "test_list": [
            "assert divisor(15) == 4 ",
            "assert divisor(12) == 6",
            "assert divisor(9) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 97,
        "code": [
            "def frequency_lists(lists):\n    flat_list = [item for sublist in lists for item in sublist]\n    frequency = {}\n    for item in flat_list:\n        if item in frequency:\n            frequency[item] += 1\n        else:\n            frequency[item] = 1\n    return frequency"
        ],
        "test_list": [
            "assert frequency_lists([[1, 2, 3, 2], [4, 5, 6, 2], [7, 8, 9, 5]])=={1: 1, 2: 3, 3: 1, 4: 1, 5: 2, 6: 1, 7: 1, 8: 1, 9: 1}",
            "assert frequency_lists([[1,2,3,4],[5,6,7,8],[9,10,11,12]])=={1: 1, 2: 1, 3: 1, 4: 1, 5: 1, 6: 1, 7: 1, 8: 1, 9: 1,10:1,11:1,12:1}",
            "assert frequency_lists([[20,30,40,17],[18,16,14,13],[10,20,30,40]])=={20:2,30:2,40:2,17: 1,18:1, 16: 1,14: 1,13: 1, 10: 1}"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 98,
        "code": [
            "def multiply_num(numbers):\n    product = 1\n    for num in numbers:\n        product *= num\n    return product / len(numbers)"
        ],
        "test_list": [
            "assert multiply_num((8, 2, 3, -1, 7))==-67.2",
            "assert multiply_num((-10,-20,-30))==-2000.0",
            "assert multiply_num((19,15,18))==1710.0"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 99,
        "code": [
            "def decimal_to_binary(n):\n    return bin(n)[2:]"
        ],
        "test_list": [
            "assert decimal_to_binary(8) == '1000'",
            "assert decimal_to_binary(18) == '10010'",
            "assert decimal_to_binary(7) == '111' "
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 100,
        "code": [
            "def next_smallest_palindrome(n):\n    n += 1\n    while not is_palindrome(n):\n        n += 1\n    return n\n\ndef is_palindrome(m):\n    return str(m) == str(m)[::-1]"
        ],
        "test_list": [
            "assert next_smallest_palindrome(99)==101",
            "assert next_smallest_palindrome(1221)==1331",
            "assert next_smallest_palindrome(120)==121"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 101,
        "code": [
            "def kth_element(arr, n, k):\n    arr.sort()\n    return arr[k-1]"
        ],
        "test_list": [
            "assert kth_element([12,3,5,7,19], 5, 2) == 3",
            "assert kth_element([17,24,8,23], 4, 3) == 8",
            "assert kth_element([16,21,25,36,4], 5, 4) == 36"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 102,
        "code": [
            "def snake_to_camel(s):\n    components = s.split('_')\n    return components[0].title() + ''.join(x.title() for x in components[1:])"
        ],
        "test_list": [
            "assert snake_to_camel('python_program')=='PythonProgram'",
            "assert snake_to_camel('python_language')==('PythonLanguage')",
            "assert snake_to_camel('programming_language')==('ProgrammingLanguage')"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 103,
        "code": [
            "def eulerian_num(n, m):\n    if m == 0 or m == n:\n        return 1\n    else:\n        return (n - m + 1) * eulerian_num(n, m - 1) + m * eulerian_num(n, m - 1)"
        ],
        "test_list": [
            "assert eulerian_num(3, 1) == 4",
            "assert eulerian_num(4, 1) == 11",
            "assert eulerian_num(5, 3) == 26"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 104,
        "code": [
            "sort_sublists = lambda lst: [sorted(sublist) for sublist in lst]"
        ],
        "test_list": [
            "assert sort_sublists(([\"green\", \"orange\"], [\"black\", \"white\"], [\"white\", \"black\", \"orange\"]))==[['green', 'orange'], ['black', 'white'], ['black', 'orange', 'white']]",
            "assert sort_sublists(([\" red \",\"green\" ],[\"blue \",\" black\"],[\" orange\",\"brown\"]))==[[' red ', 'green'], [' black', 'blue '], [' orange', 'brown']]",
            "assert sort_sublists(([\"zilver\",\"gold\"], [\"magnesium\",\"aluminium\"], [\"steel\", \"bronze\"]))==[['gold', 'zilver'],['aluminium', 'magnesium'], ['bronze', 'steel']]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 105,
        "code": [
            "def count(bool_list):\n    return sum(1 for bool_val in bool_list if bool_val)"
        ],
        "test_list": [
            "assert count([True,False,True]) == 2",
            "assert count([False,False]) == 0",
            "assert count([True,True,True]) == 3"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 106,
        "code": [
            "def add_lists(lst, tup):\n    return tup + tuple(lst)"
        ],
        "test_list": [
            "assert add_lists([5, 6, 7], (9, 10)) == (9, 10, 5, 6, 7)",
            "assert add_lists([6, 7, 8], (10, 11)) == (10, 11, 6, 7, 8)",
            "assert add_lists([7, 8, 9], (11, 12)) == (11, 12, 7, 8, 9)"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 107,
        "code": [
            "def count_Hexadecimal(start, end):\n    count = 0\n    for i in range(start, end + 1):\n        hex_num = hex(i)[2:]  # convert to hexadecimal and remove '0x'\n        if all(c in '0123456789abcdefABCDEF' for c in hex_num):\n            count += 1\n    return count"
        ],
        "test_list": [
            "assert count_Hexadecimal(10,15) == 6",
            "assert count_Hexadecimal(2,4) == 0",
            "assert count_Hexadecimal(15,16) == 1"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 108,
        "code": [
            "import heapq\n\ndef merge_sorted_list(*args):\n    heaps = []\n    for i, lst in enumerate(args):\n        if lst:\n            heapq.heappush(heaps, (lst[0], i, 0))\n    result = []\n    while heaps:\n        val, list_ind, element_ind = heapq.heappop(heaps)\n        result.append(val)\n        if element_ind + 1 < len(args[list_ind]):\n            next_val = args[list_ind][element_ind + 1]\n            heapq.heappush(heaps, (next_val, list_ind, element_ind + 1))\n    return result"
        ],
        "test_list": [
            "assert merge_sorted_list([25, 24, 15, 4, 5, 29, 110],[19, 20, 11, 56, 25, 233, 154],[24, 26, 54, 48])==[4, 5, 11, 15, 19, 20, 24, 24, 25, 25, 26, 29, 48, 54, 56, 110, 154, 233]",
            "assert merge_sorted_list([1, 3, 5, 6, 8, 9], [2, 5, 7, 11], [1, 4, 7, 8, 12])==[1, 1, 2, 3, 4, 5, 5, 6, 7, 7, 8, 8, 9, 11, 12]",
            "assert merge_sorted_list([18, 14, 10, 9, 8, 7, 9, 3, 2, 4, 1],[25, 35, 22, 85, 14, 65, 75, 25, 58],[12, 74, 9, 50, 61, 41])==[1, 2, 3, 4, 7, 8, 9, 9, 9, 10, 12, 14, 14, 18, 22, 25, 25, 35, 41, 50, 58, 61, 65, 74, 75, 85]"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 109,
        "code": [
            "def odd_Equivalent(s, n):\n    count = 0\n    for i in range(n):\n        if s.count('1') % 2 != 0:\n            count += 1\n        s = s[1:] + s[0]\n    return count"
        ],
        "test_list": [
            "assert odd_Equivalent(\"011001\",6) == 3",
            "assert odd_Equivalent(\"11011\",5) == 4",
            "assert odd_Equivalent(\"1010\",4) == 2"
        ],
        "test_setup_code": ""
    },
    {
        "task_id": 110,
        "code": [
            "def extract_missing(ranges, start, end):\n    all_ranges = [(start, end)]\n    for r in ranges:\n        new_ranges = []\n        for ar in all_ranges:\n            if ar[0] < r[0]:\n                new_ranges.append((ar[0], r[0]))\n            if ar[1] > r[1]:\n                new_ranges.append((r[1], ar[1]))\n            if ar[0] >= r[0] and ar[1] <= r[1]:\n                new_ranges.append(ar)\n            else:\n                new_ranges.extend([(ar[0], r[0]), (r[1], ar[1])])\n        all_ranges = new_ranges\n    return [r for r in all_ranges if r[0] < r[1]]"
        ],
        "test_list": [
            "assert extract_missing([(6, 9), (15, 34), (48, 70)], 2, 100) == [(2, 6), (9, 100), (9, 15), (34, 100), (34, 48), (70, 100)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 5, 60) == [(5, 7), (2, 60), (2, 15), (19, 60), (19, 38), (50, 60)]",
            "assert extract_missing([(7, 2), (15, 19), (38, 50)], 1, 52) == [(1, 7), (2, 52), (2, 15), (19, 52), (19, 38), (50, 52)]"
        ],
        "test_setup_code": ""
    }
]